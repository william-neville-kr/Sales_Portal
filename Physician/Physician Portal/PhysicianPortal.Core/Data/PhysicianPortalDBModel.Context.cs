//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhysicianPortal.Core.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MH_DWEntities : DbContext
    {
        public MH_DWEntities()
            : base("name=MH_DWEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ApplicationSetting> ApplicationSettings { get; set; }
        public virtual DbSet<AuditOperationType> AuditOperationTypes { get; set; }
        public virtual DbSet<AuditTrail> AuditTrails { get; set; }
        public virtual DbSet<ErrorLog> ErrorLogs { get; set; }
        public virtual DbSet<Message> Messages { get; set; }
        public virtual DbSet<PhysicianNote> PhysicianNotes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Office> Offices { get; set; }
        public virtual DbSet<PatientDocument> PatientDocuments { get; set; }
        public virtual DbSet<State> States { get; set; }
        public virtual DbSet<User_Office_Relationship> User_Office_Relationship { get; set; }
        public virtual DbSet<UserClaim> UserClaims { get; set; }
        public virtual DbSet<vwDocument> vwDocuments { get; set; }
        public virtual DbSet<vwPatient> vwPatients { get; set; }
        public virtual DbSet<vwPhysician> vwPhysicians { get; set; }
        public virtual DbSet<DimDrug> DimDrugs { get; set; }
        public virtual DbSet<vwPharmacyNote> vwPharmacyNotes { get; set; }
        public virtual DbSet<PhysicianPortalPrescription> PhysicianPortalPrescriptions { get; set; }
        public virtual DbSet<vwMessage> vwMessages { get; set; }
        public virtual DbSet<vwLastThreadMessage> vwLastThreadMessages { get; set; }
        public virtual DbSet<UserPhysicianRelationship> UserPhysicianRelationships { get; set; }
        public virtual DbSet<Disease> Diseases { get; set; }
        public virtual DbSet<RefFormCardiovascular> RefFormCardiovasculars { get; set; }
        public virtual DbSet<RefFormHivAid> RefFormHivAids { get; set; }
        public virtual DbSet<vwRefillFaxReportLog> vwRefillFaxReportLogs { get; set; }
        public virtual DbSet<vwWorkflow> vwWorkflows { get; set; }
        public virtual DbSet<RefFormCysticFibrosi> RefFormCysticFibrosis { get; set; }
        public virtual DbSet<RefFormGrowthHormone> RefFormGrowthHormones { get; set; }
        public virtual DbSet<RefFormHepatology> RefFormHepatologies { get; set; }
        public virtual DbSet<RefFormImmunology> RefFormImmunologies { get; set; }
        public virtual DbSet<RefFormOncologyInfusion> RefFormOncologyInfusions { get; set; }
        public virtual DbSet<RefFormOsteoporosi> RefFormOsteoporosis { get; set; }
        public virtual DbSet<RefFormPediatricGastoenterology> RefFormPediatricGastoenterologies { get; set; }
        public virtual DbSet<RefFormRemicade> RefFormRemicades { get; set; }
        public virtual DbSet<RefFormTransplant> RefFormTransplants { get; set; }
        public virtual DbSet<Pharmacy> Pharmacies { get; set; }
        public virtual DbSet<RefFormNeurology> RefFormNeurologies { get; set; }
        public virtual DbSet<RefFormOncology> RefFormOncologies { get; set; }
        public virtual DbSet<RefFormOncology_1> RefFormOncology_1 { get; set; }
        public virtual DbSet<RefFormOncology_2> RefFormOncology_2 { get; set; }
        public virtual DbSet<RefFormTransplant1> RefFormTransplant1 { get; set; }
        public virtual DbSet<RefFormTCA_AIandPI> RefFormTCA_AIandPI { get; set; }
        public virtual DbSet<InsuranceEligibilityInfo> InsuranceEligibilityInfoes { get; set; }
        public virtual DbSet<PokitDok_TradingPartner> PokitDok_TradingPartner { get; set; }
        public virtual DbSet<RefFormGastroenterology> RefFormGastroenterologies { get; set; }
        public virtual DbSet<NewRefill> NewRefills { get; set; }
        public virtual DbSet<User1> User1 { get; set; }
        public virtual DbSet<User> Users { get; set; }
        public virtual DbSet<RefFormNolaOncology> RefFormNolaOncologies { get; set; }
        public virtual DbSet<RefFormGeneralintake> RefFormGeneralintakes { get; set; }
        public virtual DbSet<RefFormBloodModifyingAgent> RefFormBloodModifyingAgents { get; set; }
        public virtual DbSet<RefillStatu> RefillStatus { get; set; }
        public virtual DbSet<vwDocument1> vwDocument1 { get; set; }
        public virtual DbSet<vwReferralForm> vwReferralForms { get; set; }
        public virtual DbSet<vwNotificationAlert> vwNotificationAlerts { get; set; }
        public virtual DbSet<PatientQueue> PatientQueues { get; set; }
        public virtual DbSet<HomePage> HomePages { get; set; }
        public virtual DbSet<PatientPicture> PatientPictures { get; set; }
        public virtual DbSet<vwPatientInsurance> vwPatientInsurances { get; set; }
        public virtual DbSet<vwPrescription> vwPrescriptions { get; set; }
        public virtual DbSet<vwAuditTrail> vwAuditTrails { get; set; }
        public virtual DbSet<PhysicianPortalPatient> PhysicianPortalPatients { get; set; }
        public virtual DbSet<PhysicianPortalPatient_ReferralForm_Relationship> PhysicianPortalPatient_ReferralForm_Relationship { get; set; }
        public virtual DbSet<PhysicianPortalPatientChecklistRelationship> PhysicianPortalPatientChecklistRelationships { get; set; }
        public virtual DbSet<ReferralForm> ReferralForms { get; set; }
        public virtual DbSet<ReferralFormCategory> ReferralFormCategories { get; set; }
        public virtual DbSet<ReferralFormChecklistRelationship> ReferralFormChecklistRelationships { get; set; }
        public virtual DbSet<vwDocumentsUploadLog> vwDocumentsUploadLogs { get; set; }
        public virtual DbSet<vwReferralDocument> vwReferralDocuments { get; set; }
        public virtual DbSet<vwRefillFaxDocument> vwRefillFaxDocuments { get; set; }
        public virtual DbSet<vwGetPhysicianPortalPatientMRN> vwGetPhysicianPortalPatientMRNs { get; set; }
        public virtual DbSet<vwPhysicianNote> vwPhysicianNotes { get; set; }
        public virtual DbSet<PhysicianSignature> PhysicianSignatures { get; set; }
        public virtual DbSet<FeedbackRelated> FeedbackRelateds { get; set; }
        public virtual DbSet<FeedbackStatu> FeedbackStatus { get; set; }
        public virtual DbSet<PhysicianPortalFeedback> PhysicianPortalFeedbacks { get; set; }
        public virtual DbSet<vwPhysicianPortalFeedback> vwPhysicianPortalFeedbacks { get; set; }
        public virtual DbSet<RefillFaxReportLog> RefillFaxReportLogs { get; set; }
        public virtual DbSet<RefFormDermatology> RefFormDermatologies { get; set; }
        public virtual DbSet<RefFormRheumatology> RefFormRheumatologies { get; set; }
    
        public virtual int SalesTeamResendFaxes(string faxNo, string fileName, Nullable<int> physicianId)
        {
            var faxNoParameter = faxNo != null ?
                new ObjectParameter("FaxNo", faxNo) :
                new ObjectParameter("FaxNo", typeof(string));
    
            var fileNameParameter = fileName != null ?
                new ObjectParameter("FileName", fileName) :
                new ObjectParameter("FileName", typeof(string));
    
            var physicianIdParameter = physicianId.HasValue ?
                new ObjectParameter("PhysicianId", physicianId) :
                new ObjectParameter("PhysicianId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SalesTeamResendFaxes", faxNoParameter, fileNameParameter, physicianIdParameter);
        }
    
        public virtual ObjectResult<SpGetSalesTeamPatients_Result> SpGetSalesTeamPatients(Nullable<int> salesTeamId)
        {
            var salesTeamIdParameter = salesTeamId.HasValue ?
                new ObjectParameter("SalesTeamId", salesTeamId) :
                new ObjectParameter("SalesTeamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SpGetSalesTeamPatients_Result>("SpGetSalesTeamPatients", salesTeamIdParameter);
        }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<spICD10Diseases_Result> spICD10Diseases()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spICD10Diseases_Result>("spICD10Diseases");
        }
    
        public virtual ObjectResult<spPatientChecklist_Result> spPatientChecklist(Nullable<int> physicianPortalPatientId, Nullable<int> referralFormId)
        {
            var physicianPortalPatientIdParameter = physicianPortalPatientId.HasValue ?
                new ObjectParameter("PhysicianPortalPatientId", physicianPortalPatientId) :
                new ObjectParameter("PhysicianPortalPatientId", typeof(int));
    
            var referralFormIdParameter = referralFormId.HasValue ?
                new ObjectParameter("ReferralFormId", referralFormId) :
                new ObjectParameter("ReferralFormId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spPatientChecklist_Result>("spPatientChecklist", physicianPortalPatientIdParameter, referralFormIdParameter);
        }
    }
}
