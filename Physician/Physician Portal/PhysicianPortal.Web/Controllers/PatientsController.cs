using Kendo.Mvc.UI;
using Kendo.Mvc.Extensions;
using PhysicianPortal.Core.Data;
using PhysicianPortal.Core.Repository;
using PhysicianPortal.Core.Helpers;
using PhysicianPortal.Web.Models;
using System;
using System.Linq;
using System.Web.Mvc;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Collections.Generic;
using PhysicianPortal.PokitDokIntegration.Models;
using System.Web;
using PhysicianPortal.Core.Helper;
using iTextSharp.text.pdf;
using System.Drawing.Printing;
using System.Text;
using HtmlAgilityPack;
using TuesPechkin;
using PhysicianPortal.Core.Data.ORTF;
using Microsoft.AspNet.Identity;
using PhysicianPortal.Web.Attributes;

namespace PhysicianPortal.Web.Controllers
{
    [CustomAuthorize]
    public class PatientsController : BaseController
    {
        protected readonly UnitOfWork _unitOfWork = new UnitOfWork();


        //private static IConverter pdfConverter =
        //                                    new ThreadSafeConverter(
        //                                        new RemotingToolset<PdfToolset>(
        //                                            new WinAnyCPUEmbeddedDeployment(
        //                                                new TempFolderDeployment())));


        // GET: Patient
        public ActionResult Index()
        {
            try
            {
                return View();
            }
            catch (Exception e)
            {
                Logger.InsertLog("Exception thrown in Method Index() PatientsController. " + e.Message, e);
                return View("Error", new ErrorModel(e, "PatientsController", "Index", ErrorTitle, ErrorMessage, null));
            }
        }

        public ActionResult GetPatients([DataSourceRequest] DataSourceRequest request, string sreachString = null)
        {
            try
            {
                IQueryable<vwPatient> PatientList = Enumerable.Empty<vwPatient>().AsQueryable();

                PatientList = _unitOfWork.PatientsRepository.GetAsQuerable().OrderBy(t => t.ActivityStatus);

                if (!string.IsNullOrEmpty(sreachString))
                {
                    PatientList = PatientList.Where(
                        t => (
                                 t.PhysicianName.ToLower().Contains(sreachString.ToLower())
                                 || t.PhyCity.ToLower().Contains(sreachString.ToLower())
                                 || t.FullName.ToLower().Contains(sreachString.ToLower())
                                 || t.ActivityStatus.ToLower().Contains(sreachString.ToLower())
                                 || t.PatientCode.ToLower().Contains(sreachString.ToLower())
                                 || t.StateProvince.ToLower().Contains(sreachString.ToLower())
                                 || t.DrugShortName.ToLower().Contains(sreachString.ToLower())
                             )
                    ).OrderBy(t => t.ActivityStatus);
                }

                List<int> physicianIds = null;
                if (UserManager.IsInRoleAsync(CurrentUser.Id, "Admin").Result)
                {
                    //When office admin log in.
                    int currentOffice = UserManager.GetClaims(CurrentUser.Id).FirstOrDefault(c => c.Type == "UserOffice").Value.ToInt0();

                    var userIds = _unitOfWork.User_Office_RelationshipRepository.GetAsQuerable(x => x.OfficeId == currentOffice).Select(x => x.UserId).ToList();
                    physicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => userIds.Contains(x.UserId)).Select(y => y.PhysicianId).Distinct().ToList();
                    PatientList = PatientList.Where(t => physicianIds.Contains(t.PhysicianId));
                }
                else if (UserManager.IsInRoleAsync(CurrentUser.Id, "Physician").Result || UserManager.IsInRoleAsync(CurrentUser.Id, "Technician").Result)
                {
                    //Technicians and Physicians can only view the patients of the physcians who are registered against them
                    physicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => x.UserId == CurrentUser.UserId).Select(y => y.PhysicianId).Distinct().ToList();
                    PatientList = PatientList.Where(t => physicianIds.Contains(t.PhysicianId));
                }

                if (UserManager.IsInRoleAsync(CurrentUser.Id, "Physician").Result || UserManager.IsInRoleAsync(CurrentUser.Id, "Technician").Result || UserManager.IsInRoleAsync(CurrentUser.Id, "Admin").Result)
                {
                    var dictQuery = _unitOfWork.PhysicianSignatureRepository.GetAsQuerable(x => physicianIds.Contains(x.PhysicianMasterId.Value)).Select(x => new { Id = x.PhysicianMasterId, JoinDate = x.JoiningDate.HasValue ? x.JoiningDate : DateTime.MinValue });

                    //var ptList = PatientList.ToList();

                    var tempList = PatientList.Join(dictQuery, pt => pt.PhysicianId, dd => dd.Id, (pt, dd) => new { pt, dd }).Where(y => y.pt.ReferralDateId.HasValue ? (y.pt.ReferralDateId >= y.dd.JoinDate) : true)
                        .Select(y => new PatientGridModel
                        {
                            PhysicianId = y.pt.PhysicianId,
                            //PhysicianIdEncrypted = SecurityHelper.Encrypt(y.pt.PhysicianId.ToString()),
                            ActivityStatus = y.pt.ActivityStatus,
                            AddressLine1 = y.pt.AddressLine1,
                            AddressLine2 = y.pt.AddressLine2,
                            City = y.pt.City,
                            CompanyName = y.pt.CompanyName,
                            Country = y.pt.Country,
                            County = y.pt.County,
                            DateOfBirth = y.pt.DateOfBirth,
                            Diagnosis = y.pt.Diagnosis,
                            DiseaseState = y.pt.DiseaseState,
                            DrugShortName = y.pt.DrugShortName,
                            FirstName = y.pt.FirstName,
                            FullName = y.pt.FullName,
                            Gender = y.pt.Gender,
                            IntakeRep = y.pt.IntakeRep,
                            IsQueued = y.pt.IsQueued,
                            IsQueuedStr = y.pt.IsQueuedStr,
                            LastFillDate = y.pt.LastFillDate,
                            LastName = y.pt.LastName,
                            LastOrderEvent = y.pt.LastOrderEvent,
                            NeedMoreInfo = y.pt.NeedMoreInfo,
                            NeedMoreInfoStr = y.pt.NeedMoreInfoStr,
                            NotesCount = y.pt.NotesCount,
                            NurseCoordinator = y.pt.NurseCoordinator,
                            OriginatingPharmacy = y.pt.OriginatingPharmacy,
                            PatientCode = y.pt.PatientCode,
                            PatientId = y.pt.PatientId,
                            //PatientIdEncrypted = SecurityHelper.Encrypt(y.pt.PatientId.ToString()),
                            PatientQueueId = y.pt.PatientQueueId,
                            PatientRepresentativeGroup = y.pt.PatientRepresentativeGroup,
                            PhoneNumber = y.pt.PhoneNumber,
                            PhyCity = y.pt.PhyCity,
                            PhysicianName = y.pt.PhysicianName,
                            PostalCode = y.pt.PostalCode,
                            PreferredLanguage = y.pt.PreferredLanguage,
                            ReferralDateId = y.pt.ReferralDateId,
                            ReferralSource = y.pt.ReferralSource,
                            RXStatus = y.pt.RXStatus,
                            ServiceArea = y.pt.ServiceArea,
                            StartOfCareDateId = y.pt.StartOfCareDateId,
                            StateProvince = y.pt.StateProvince,
                            YearOfBirth = y.pt.YearOfBirth
                        });

                    var filteredList = tempList.ToDataSourceResult(request);

                    foreach (PatientGridModel patient in filteredList.Data)
                    {
                        patient.PhysicianIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianId.ToString());
                        patient.PatientIdEncrypted = SecurityHelper.Encrypt(patient.PatientId.ToString());
                    }

                    return Json(filteredList, JsonRequestBehavior.AllowGet);
                }

                var temporaryList = PatientList.ToDataSourceResult(request);

                foreach (vwPatient patient in temporaryList.Data)
                {
                    patient.PhysicianIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianId.ToString());
                    patient.PatientIdEncrypted = SecurityHelper.Encrypt(patient.PatientId.ToString());
                }

                return Json(temporaryList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatients PatientsController. " + exception.Message, exception);
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }




        public ActionResult PatientDetails(string phyId, string patId)
        {
            try
            {
                int PatientId = int.Parse(SecurityHelper.Decrypt(patId));
                int PhysicianId = int.Parse(SecurityHelper.Decrypt(phyId));
                ViewBag.PhysicianId = phyId;
                ViewBag.PatientId = patId;
                vwPatient _PatientList = _unitOfWork.PatientsRepository.GetAsQuerable(t => t.PhysicianId == PhysicianId && t.PatientId == PatientId).FirstOrDefault();
                if (_PatientList == null)
                {
                    return View("Error", new ErrorModel(null, "PatientsController", "PatientDetails", ErrorTitle, "The patient does not exist", null));
                }
                ViewBag.physicianModel = _unitOfWork.PhysiciansRepository.GetAsQuerable(t => t.PhysicianId == _PatientList.PhysicianId).FirstOrDefault();

                _PatientList.PatientIdEncrypted = patId;
                _PatientList.PhysicianIdEncrypted = phyId;

                // For Display Messages
                var currentUser = CurrentUser;
                ViewBag.userRole = currentUser.RoleId;
                ViewBag.physicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => x.UserId == currentUser.UserId).Select(x => x.PhysicianId).ToList(); ;
                ViewBag.currentUserId = currentUser.UserId;
                ViewBag.WorkflowModel = _unitOfWork.WorkflowsRepository.GetAsQuerable(t => t.PatientId == PatientId).OrderByDescending(t => t.WorkflowStartDateId).ToList();//.OrderByDescending(t => t.PatientPrescriptionOperationsWorkflowCounterId).ToList(); //&& t.PhysicianMasterId == phyId
                InsuranceEligibilityInfo insuranceEligibilityInfo = _unitOfWork.InsuranceEligibilityInfoRepository.GetSingle(t => t.PatientId == PatientId);
                ViewBag.IsEligibilityValueExist = !string.IsNullOrEmpty(insuranceEligibilityInfo?.EligibilityValue);
                ViewBag.PokitDok_TradingPartnerId = insuranceEligibilityInfo?.PokitDok_TradingPartnerId;

                return View(_PatientList);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method PatientDetails PatientsController. " + exception.Message, exception);
                return View("Error", new ErrorModel(exception, "PatientsController", "PatientDetails", ErrorTitle, ErrorMessage, null));
            }
        }

        public ActionResult ShowInsuranceInfo(int InsuranceID)
        {
            try
            {
                vwPatientInsurance patientInsurance = _unitOfWork.PatientsInsuranceRepository.GetAsQuerable(t => t.InsuranceId == InsuranceID).FirstOrDefault();
                return PartialView("_InsuranceDetails", patientInsurance);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method ShowInsuranceInfo PatientsController. " + exception.Message, exception); ;
                return View("Error", new ErrorModel(exception, "PatientsController", "ShowInsuranceInfo", ErrorTitle, ErrorMessage, "~/Views/Shared/_ErrorLayout.cshtml"));
            }
        }

        public ActionResult GetPharmacyNotes([DataSourceRequest] DataSourceRequest request, vwPharmacyNote _vwPharmacyNote = null)
        {
            try
            {
                int patientId = 0;

                if (_vwPharmacyNote != null)
                {
                    patientId = _vwPharmacyNote.PatientId ?? 0;
                }

                IQueryable vwPharmacyNotesList = _unitOfWork.PharmacyNotesRepository.GetAsQuerable(t => t.PatientId == patientId);
                return Json(vwPharmacyNotesList.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPharmacyNotes PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetPrescriptions([DataSourceRequest] DataSourceRequest request, vwPrescription _vwPrescription = null)
        {
            try
            {
                string patientID = null;
                int PatientId = 0;

                if (_vwPrescription != null)
                    patientID = _vwPrescription.PatientIdEncrypted;
                if (patientID != null)
                {
                    PatientId = int.Parse(SecurityHelper.Decrypt(patientID));
                }
                var vwPrescriptionsList = _unitOfWork.PreceptionRepository.GetAsQuerable(t => t.PatientId == PatientId);
                return Json(vwPrescriptionsList.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPrescriptions PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetPhysicians()
        {
            try
            {

                List<int> listOfUserPhysicians = _unitOfWork.UserRepository.GetAsQuerable(x => x.RoleId == 2).Select(y => y.UserId).ToList();
                List<int> listOfPhysicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => listOfUserPhysicians.Contains(x.UserId)).Select(y => y.PhysicianId).ToList();
                IQueryable physiciansList = _unitOfWork.PhysiciansRepository.GetAsQuerable(x => listOfPhysicianIds.Contains(x.PhysicianId)).Take(AutoCompleteListSize);
                return Json(physiciansList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPhysicians PatientController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        //public ActionResult GetDiseases()
        //{
        //    try
        //    {
        //        //var diseaseList = _unitOfWork.spICD10Diseases_ResultRepository.context.spICD10Diseases().Take(AutoCompleteListSize).ToList();
        //        var diseaseList = _unitOfWork.DiseaseRepository.GetAsQuerable().Take(AutoCompleteListSize);
        //        return Json(diseaseList, JsonRequestBehavior.AllowGet);
        //    }
        //    catch (Exception exception)
        //    {
        //        Logger.InsertLog("Exception thrown in Method GetDiseases PatientController. " + exception.Message, exception);
        //        return Json(null, JsonRequestBehavior.AllowGet);
        //    }
        //}

        public ActionResult GetDrugs()
        {
            try
            {
                var drugsList = _unitOfWork.DrugRepository.GetAsQuerable(t => t.ProductName != null && t.ProductName != "").Take(AutoCompleteListSize);
                return Json(drugsList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetDrugs PatientController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult ShowPrescriptionInfo(int PrescriptionID)
        {
            try
            {
                vwPrescription prescription = _unitOfWork.PreceptionRepository.GetAsQuerable(t => t.PrescriptionId == PrescriptionID).FirstOrDefault();
                return PartialView("_PrescriptionPopUp", prescription);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method ShowPrescriptionInfo PatientsController. " + exception.Message, exception);
                return View("Error", new ErrorModel(exception, "PatientsController", "ShowPrescriptionInfo", ErrorTitle, ErrorMessage, "~/Views/Shared/_ErrorLayout.cshtml"));
            }
        }

        [HttpPost]
        public JsonResult UploadDocument(string PatientId, string PhysicianId, string DocumentDescription)
        {
            try
            {
                //Decrypting Ids

                int patientid = PatientId != null ? int.Parse(SecurityHelper.Decrypt(PatientId)) : 0;
                int physicianid = PhysicianId != null ? int.Parse(SecurityHelper.Decrypt(PhysicianId)) : 0;


                PatientDocument dimDocument = new PatientDocument();
                //dimDocument.DocumentId = 2001;

                var getPatientMRN = _unitOfWork.PatientsRepository.GetSingle(t => t.PatientId == patientid)?.PatientCode ?? "No_MRN";
                var getPatientFullName = _unitOfWork.PatientsRepository.GetSingle(t => t.PatientId == physicianid)?.FullName;

                //Save File in the given location
                if (Request.Files.Count > 0)
                {
                    var file = Request.Files[0];

                    if (file != null && file.ContentLength > 0)
                    {
                        var fileName = Path.GetFileNameWithoutExtension(file.FileName);
                        var fileExtension = Path.GetExtension(file.FileName);
                        //string fileName = System.Web.Configuration.WebConfigurationManager.AppSettings["PatientDocumentsPath"].ToString() + "/" + pDFFormModel.FileName + DateTime.Now.Ticks.ToString() + ".pdf";
                        //var path = Path.Combine(Server.MapPath("~/Document/PatientDocuments/"), fileName);
                        //var path = Path.Combine(System.Web.Configuration.WebConfigurationManager.AppSettings["PatientDocumentsPath"].ToString(), fileName);

                        //var submitChecklistDocumentPtah = SettingManager.GetSettingByName("SubmitChecklistDocumentPath");
                        //string fName = fileName.Length > 15 ? fileName.Substring(0, 15) : fileName;
                        //fileName = "PhPt_PatId_"  + PatientId?.ToString() + fName + "_" + DateTime.Now.ToString("yyMMdd_HHmmss") + fileExtension; // milliseconds ffffff
                        //var path = Path.Combine(submitChecklistDocumentPtah?.Value, fileName);


                        string fName = fileName.Length > 15 ? fileName.Substring(0, 15) : fileName;
                        //fName = fName.Replace(" ", String.Empty);
                        //fileName = "PhPt_MRN_" + getPatientMRN + "_" + fName + "_" + DateTime.Now.ToString("yyMMdd_HHmmss") + fileExtension; // milliseconds ffffff

                        fileName = (GetDocumentSaveFormat(getPatientMRN, (int)DocumentAddedType.AddedFromCPR)) + fileExtension;

                        var path = Path.Combine(GetDocumentPathWithPhysicianId(physicianid), fileName);

                        // Get Local Path 
                        var localPath = Path.Combine(GetLocalDocumentPath(), fileName);
                        file.SaveAs(localPath);

                        //dimDocument.FolderFileName = "FolderFileName";
                        //dimDocument.FolderFileNameUNC = "\\BIOCPR\\FolderFileNameUNC";

                        // local Document Path 
                        dimDocument.FolderFileName = localPath;
                        dimDocument.FolderFileNameUNC = localPath;
                        dimDocument.DocumentName = fileName;
                        dimDocument.PatientId = patientid;
                        dimDocument.PhysicianId = physicianid;
                        dimDocument.DocumentDescription = DocumentDescription;
                        dimDocument.CreatedOn = DateTime.UtcNow;

                        // Live Document Path  and save file on server
                        dimDocument.SubmittedToPath = path;
                        // submit file to live server 
                        file.SaveAs(path);

                        dimDocument.IsSubmitted = true;
                        dimDocument.SubmittedDate = DateTime.UtcNow;

                        _unitOfWork.DocumentsRepository.Insert(dimDocument);
                        _unitOfWork.Save();

                        AuditLogger.AuditTracker("New Document Uploaded.", "A new document name " + fileName + " has been uploaded for patient " + getPatientFullName, (int)AuditOperationType.Addition);
                        return Json(new { message = "File Uploaded Successfully", success = true });
                    }
                }
                return Json(new { message = "Failed to upload the file", success = false });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method UploadDocument PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetPatientsDocuments([DataSourceRequest] DataSourceRequest request, string sreachString = null)
        {
            try
            {
                IQueryable AuditTrailList;
                string[] words = { " " };

                words = sreachString.Split(new string[] { " --" }, StringSplitOptions.RemoveEmptyEntries);

                if (UserManager.IsInRoleAsync(CurrentUser.Id, "SuperAdmin").Result)
                {
                    if (words.Length >= 2)
                    {
                        DateTime startDate = DateTime.Parse(words[0]);
                        DateTime endDate = DateTime.Parse(words[1]);
                        endDate = endDate.AddDays(1).AddSeconds(-1);
                        AuditTrailList = _unitOfWork.vwDocumentsUploadLogRepository.GetAsQuerable(t => t.AuditStamp >= startDate && t.AuditStamp <= endDate);
                        return Json(AuditTrailList.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        //AuditTrailList = unitOfWork.AuditTrailRepository.GetAsQuerable().Select(t => new { t.AuditStamp, t.LogMessage, t.Data, t.Url, t.Device });
                        AuditTrailList = _unitOfWork.vwDocumentsUploadLogRepository.GetAsQuerable();//.Select(t => new { t.AuditStamp, t.LogMessage, t.Data, t.Url, t.Device });
                        return Json(AuditTrailList.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
                    }
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetAuditTrail AdminController. " + exception.Message, exception);
                return View("Error", new ErrorModel(exception, "AdminController", "GetAuditTrail", ErrorTitle, ErrorMessage, null));
            }
            return Json(null, JsonRequestBehavior.AllowGet);
        }


        // Upload Document To live Server 
        [HttpPost]
        public JsonResult UploadDocumentToliveServer(string documentIdEncrypted)
        {
            try
            {
                int documentId = int.Parse(SecurityHelper.Decrypt(documentIdEncrypted));

                PatientDocument document = _unitOfWork.DocumentsRepository.GetSingle(t => t.DocumentId == documentId);

                if (document == null)
                {
                    return Json(new { message = "Document did't submitted successfully", success = true });
                }
                else
                {
                    string filePath = document.FolderFileName;
                    string filePathDestination = document.SubmittedToPath;

                    if (System.IO.File.Exists(filePath) && !System.IO.File.Exists(filePathDestination))
                    {
                        System.IO.File.Copy(filePath, filePathDestination);
                        document.SubmittedDate = DateTime.UtcNow;
                        _unitOfWork.DocumentsRepository.Update(document);
                        _unitOfWork.Save();

                    }
                    AuditLogger.AuditTracker("Document submitted ", "Document submitted to live server", (int)AuditOperationType.Addition);
                    return Json(new { message = "Document submitted successfully", success = true });

                }

            }
            catch (Exception ex)
            {
                Logger.InsertLog("Exception thrown in Method UploadDocumentToliveServer(int DocumentId) PatientsController. " + ex.Message, ex);
                return Json(new { success = 0, message = "Failed to add patient: " + ex.Message });
            }

        }


        public ActionResult GetPatientDocumentsRecords([DataSourceRequest] DataSourceRequest request, vwDocument _vwDocument = null)
        {
            try
            {
                string patientId = null;
                int PatientId = 0;

                if (_vwDocument != null)
                {
                    patientId = _vwDocument.PatientIdEncrypted;
                    if (patientId != null)
                    {
                        PatientId = int.Parse(SecurityHelper.Decrypt(patientId));
                    }
                }

                var documentsList = _unitOfWork.PatientDocumentsRepository.GetAsQuerable(t => t.PatientId == PatientId).Select(x => new PatientDocumentModel
                {
                    CreatedOn = x.CreatedOn,
                    DocumentDescription = x.DocumentDescription,
                    DocumentId = x.DocumentId,
                    DocumentName = x.DocumentName,
                    NationalProviderIdentifier = x.NationalProviderIdentifier,
                    PatientFullName = x.PatientFullName,
                    PhysicianFullName = x.PhysicianFullName,
                    SubmittedDate = x.SubmittedDate,
                });

                var filteredDocuments = documentsList.ToDataSourceResult(request);

                foreach (PatientDocumentModel document in filteredDocuments.Data)
                {
                    document.DocumentIdEncrypted = SecurityHelper.Encrypt(document.DocumentId.ToString());
                    document.DocumentId = -1;
                }


                return Json(filteredDocuments, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientDocumentsRecords PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetAllPatientDocumentsRecords([DataSourceRequest] DataSourceRequest request, vwDocument _vwDocument = null)
        {
            try
            {
                var documentsList = _unitOfWork.PatientDocumentsRepository.GetAsQuerable().Select(x => new PatientDocumentModel
                {
                    CreatedOn = x.CreatedOn,
                    DocumentDescription = x.DocumentDescription,
                    DocumentId = x.DocumentId,
                    DocumentName = x.DocumentName,
                    NationalProviderIdentifier = x.NationalProviderIdentifier,
                    PatientFullName = x.PatientFullName,
                    PhysicianFullName = x.PhysicianFullName,
                    SubmittedDate = x.SubmittedDate,
                });

                var filteredDocuments = documentsList.ToDataSourceResult(request);

                foreach (PatientDocumentModel document in filteredDocuments.Data)
                {
                    document.DocumentIdEncrypted = SecurityHelper.Encrypt(document.DocumentId.ToString());
                    document.DocumentId = -1;
                }


                return Json(filteredDocuments, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientDocumentsRecords PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetAllReferralFormDocuments([DataSourceRequest] DataSourceRequest request, vwReferralDocument _vwDocument = null)
        {
            try
            {
                var documentsList = _unitOfWork.vwReferralDocumentRepository.GetAsQuerable().Select(x => new ReferralFormDocumentModel
                {
                    CreatedOn = x.CreatedOn,
                    //DocumentDescription = x.DocumentDescription,
                    DocumentId = x.RefferalFormDocumentId,
                    DocumentName = x.FileName,
                    NationalProviderIdentifier = x.NationalProviderIdentifier,
                    PatientFullName = x.PatientFullName,
                    PhysicianFullName = x.PhysicianFullName,
                    SubmittedDate = x.SubmittedDate,
                    PhysicianPortalPatientId = x.PhysicianPortalPatientId.Value
                });

                var filteredDocuments = documentsList.ToDataSourceResult(request);

                foreach (ReferralFormDocumentModel document in filteredDocuments.Data)
                {
                    document.DocumentIdEncrypted = SecurityHelper.Encrypt(document.DocumentId.ToString());
                    document.DocumentId = -1;
                    document.PhysicianPortalPatientIdEncrypted = SecurityHelper.Encrypt(document.PhysicianPortalPatientId.ToString());
                    document.PhysicianPortalPatientId = -1;
                }

                return Json(filteredDocuments, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientDocumentsRecords PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult GetDocumentsTIF(string fileName)
        {
            try
            {
                //For Local Host
                //if (fileName.Length > 0 && System.IO.File.Exists(Server.MapPath(fileName)))
                //{
                //    var byteArr = ShowImage(Server.MapPath(fileName));
                //    return Json(new { message = Convert.ToBase64String(byteArr), success = true });
                //}

                //For Online Web
                if (fileName.Length > 0 && System.IO.File.Exists(fileName))
                {
                    var byteArr = ShowImage(fileName);
                    return Json(new { message = Convert.ToBase64String(byteArr), success = true });
                }
                else
                {
                    return Json(new { message = "Not Found", success = false });
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetDocumentsTIF PatientsController. " + exception.Message, exception);
                return Json(new { message = "Not Found", success = false });
            }
        }

        private byte[] ShowImage(string fileName)
        {
            try
            {
                System.Drawing.Image imageBitmap = System.Drawing.Image.FromFile(fileName);

                int frameCount = imageBitmap.GetFrameCount(FrameDimension.Page);
                int runningHeight = 0;
                int maxWidth = 0;
                for (int measurementFrameIndex = 0; (measurementFrameIndex <= (frameCount - 1)); measurementFrameIndex++)
                {
                    imageBitmap.SelectActiveFrame(FrameDimension.Page, measurementFrameIndex);
                    runningHeight = (runningHeight + imageBitmap.Height);
                    maxWidth = Math.Max(maxWidth, imageBitmap.Width);
                }

                var combinedBitmap = new Bitmap(maxWidth, runningHeight);
                int runningVerticalPosition = 0;
                for (int frameIndex = 0; frameIndex <= (frameCount - 1); frameIndex++)
                {
                    imageBitmap.SelectActiveFrame(FrameDimension.Page, frameIndex);
                    EmbedBitmap(imageBitmap, ref combinedBitmap, runningVerticalPosition);

                    runningVerticalPosition = (runningVerticalPosition + (imageBitmap.Height + 5));
                }

                byte[] byteArray = new byte[0];
                using (MemoryStream stream = new MemoryStream())
                {
                    combinedBitmap.Save(stream, System.Drawing.Imaging.ImageFormat.Png);
                    stream.Close();

                    byteArray = stream.ToArray();
                }

                return byteArray;
            }
            catch (Exception e)
            {
                Logger.InsertLog("Exception thrown in Method ShowImage PatientsController. " + e.Message, e);
                return null;
            }
        }

        private static void EmbedBitmap(System.Drawing.Image SourceBitmap, ref Bitmap DestinationBitmap, int VerticalPosition)
        {
            try
            {
                var sourceRectangle = new System.Drawing.Rectangle(new Point(0, 0), new Size(SourceBitmap.Width, SourceBitmap.Height));
                var destinationRectangle = new System.Drawing.Rectangle(new Point(0, VerticalPosition),
                    new Size(SourceBitmap.Width, SourceBitmap.Height));
                using (Graphics canvas = Graphics.FromImage(DestinationBitmap))
                {
                    canvas.DrawImage(SourceBitmap, destinationRectangle, sourceRectangle, GraphicsUnit.Pixel);
                }
            }
            catch (Exception e)
            {
                Logger.InsertLog("Exception thrown in Method EmbedBitmap PatientsController. " + e.Message, e);
            }
        }


        [HttpPost]
        public JsonResult GetDocumentData(string documentIdEncrypted)
        {
            try
            {
                int documentId = int.Parse(SecurityHelper.Decrypt(documentIdEncrypted));
                vwDocument document = _unitOfWork.PatientDocumentsRepository.GetAsQuerable(x => x.DocumentId == documentId).FirstOrDefault();

                if (document != null)
                {
                    if (!string.IsNullOrEmpty(document.FolderFileNameUNC))
                    {
                        if (document.FolderFileNameUNC.ToLower().IndexOf(".tif") > 0)
                        {
                            //tif document
                            var byteArr = ShowImage(document.FolderFileNameUNC);

                            return Json(new { filetype = "tif", fileData = Convert.ToBase64String(byteArr), success = true }, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            //pdf document
                            byte[] contents = System.IO.File.ReadAllBytes(document.FolderFileNameUNC);
                            return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        var fileNotExistPath = SettingManager.GetSettingByName("PhysicianPortalDocumentsBaseFolder").Value + "File_Not_Exists.pdf";
                        byte[] contents = System.IO.File.ReadAllBytes(fileNotExistPath);
                        return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                    }
                }

                return Json(new { message = "File not Found", success = false }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                if (exception.GetType() == typeof(FileNotFoundException))
                {
                    var fileNotExistPath = SettingManager.GetSettingByName("PhysicianPortalDocumentsBaseFolder").Value + "File_Not_Exists.pdf";
                    byte[] contents = System.IO.File.ReadAllBytes(fileNotExistPath);
                    return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                }
                Logger.InsertLog("Exception thrown in Method GetDocumentData PatientsController. " + exception.Message, exception);
                return Json(new { message = "Error in GetDocumentData.", success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult GetPharmacyDocumentData(string documentIdEncrypted)
        {
            try
            {
                int documentId = int.Parse(SecurityHelper.Decrypt(documentIdEncrypted));
                vwDocument1 document = _unitOfWork.PharmacyDocumentsRepository.GetAsQuerable(x => x.DocumenstId == documentId).FirstOrDefault();

                if (document != null)
                {
                    if (document.FolderFileNameUNC.ToLower().IndexOf(".tif") > 0)
                    {
                        //tif document
                        var byteArr = ShowImage(document.FolderFileNameUNC);

                        return Json(new { filetype = "tif", fileData = Convert.ToBase64String(byteArr), success = true }, JsonRequestBehavior.AllowGet);
                    }
                    else
                    {
                        //pdf document
                        byte[] contents = System.IO.File.ReadAllBytes(document.FolderFileNameUNC);
                        return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                    }
                }

                return Json(new { message = "File not Found", success = false }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPharmacyDocumentData PatientsController. " + exception.Message, exception);
                return Json(new { message = "Error in GetPharmacyDocumentData.", success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult GetReferralFormDocumentData(string documentIdEncrypted)
        {
            try
            {
                int documentId = int.Parse(SecurityHelper.Decrypt(documentIdEncrypted));
                vwReferralDocument document = _unitOfWork.vwReferralDocumentRepository.GetAsQuerable(x => x.RefferalFormDocumentId == documentId).FirstOrDefault();

                var documentFolder = SettingManager.GetSettingByName("ChecklistDocumentPath").Value;
                var filepath = Path.Combine(documentFolder, document.FileName);

                if (document != null)
                {
                    if (!string.IsNullOrEmpty(document.FilePath))
                    {
                        if (filepath.ToLower().IndexOf(".tif") > 0)
                        {
                            //tif document
                            var byteArr = ShowImage(filepath);

                            return Json(new { filetype = "tif", fileData = Convert.ToBase64String(byteArr), success = true }, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            //pdf document
                            byte[] contents = System.IO.File.ReadAllBytes(filepath);
                            return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        var fileNotExistPath = SettingManager.GetSettingByName("PhysicianPortalDocumentsBaseFolder").Value + "File_Not_Exists.pdf";
                        byte[] contents = System.IO.File.ReadAllBytes(fileNotExistPath);
                        return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                    }
                }

                return Json(new { message = "File not Found", success = false }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                if (exception.GetType() == typeof(FileNotFoundException))
                {
                    var fileNotExistPath = SettingManager.GetSettingByName("PhysicianPortalDocumentsBaseFolder").Value + "File_Not_Exists.pdf";
                    byte[] contents = System.IO.File.ReadAllBytes(fileNotExistPath);
                    return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                }
                Logger.InsertLog("Exception thrown in Method GetReferralFormDocumentData PatientsController. " + exception.Message, exception);
                return Json(new { message = "Error in GetReferralFormDocumentData.", success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpPost]
        public JsonResult GetRefillFormDocumentData(string documentIdEncrypted)
        {
            try
            {
                int documentId = int.Parse(SecurityHelper.Decrypt(documentIdEncrypted));
                vwRefillFaxDocument document = _unitOfWork.vwRefillFaxDocumentRepository.GetAsQuerable(x => x.id == documentId).FirstOrDefault();

                if (document != null)
                {
                    if (!string.IsNullOrEmpty(document.RefillDocumentPath))
                    {
                        if (document.RefillDocumentPath.ToLower().IndexOf(".tif") > 0)
                        {
                            //tif document
                            var byteArr = ShowImage(document.RefillDocumentPath);

                            return Json(new { filetype = "tif", fileData = Convert.ToBase64String(byteArr), success = true }, JsonRequestBehavior.AllowGet);
                        }
                        else
                        {
                            //pdf document
                            byte[] contents = System.IO.File.ReadAllBytes(document.RefillDocumentPath);
                            return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                        }
                    }
                    else
                    {
                        var fileNotExistPath = SettingManager.GetSettingByName("PhysicianPortalDocumentsBaseFolder").Value + "File_Not_Exists.pdf";
                        byte[] contents = System.IO.File.ReadAllBytes(fileNotExistPath);
                        return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                    }
                }

                return Json(new { message = "File not Found", success = false }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                if (exception.GetType() == typeof(FileNotFoundException))
                {
                    var fileNotExistPath = SettingManager.GetSettingByName("PhysicianPortalDocumentsBaseFolder").Value + "File_Not_Exists.pdf";
                    byte[] contents = System.IO.File.ReadAllBytes(fileNotExistPath);
                    return Json(new { filetype = "pdf", fileData = Convert.ToBase64String(contents), success = true }, JsonRequestBehavior.AllowGet);
                }
                Logger.InsertLog("Exception thrown in Method GetRefillFormDocumentData PatientsController. " + exception.Message, exception);
                return Json(new { message = "Error in GetRefillFormDocumentData.", success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        #region GetPatientDocumentsPDF
        public ActionResult GetPatientDocumentsPDF(string fileName)
        {
            try
            {
                //if (fileName.Length > 0 && System.IO.File.Exists(Server.MapPath(fileName)))
                //{
                //    byte[] contents = System.IO.File.ReadAllBytes(Server.MapPath(fileName));
                //    Response.AddHeader("Content-Disposition", "inline; filename=test.pdf");
                //    return File(contents, "application/pdf");
                //}
                //if (fileName.Length > 0 && System.IO.File.Exists(fileName))
                //{
                try
                {
                    byte[] contents = System.IO.File.ReadAllBytes(fileName);
                    Response.AddHeader("Content-Disposition", "inline; filename=test.pdf");
                    return File(contents, "application/pdf");
                }
                //}
                //else
                //{
                catch (Exception exception)
                {
                    Logger.InsertLog("Exception thrown in Method GetPatientDocumentsPDF PatientsController. " + exception.Message, exception);

                    var getDocumentPath = SettingManager.GetSettingByName("ChecklistDocumentPath");
                    var pdfFileName = Path.Combine(Server.MapPath(getDocumentPath?.Value), "File_Not_Exists.pdf");

                    byte[] contents = System.IO.File.ReadAllBytes(pdfFileName);
                    Response.AddHeader("Content-Disposition", "inline; filename=test.pdf");
                    return File(contents, "application/pdf");
                }
                //return Json(new { message = "Not Found", success = false }, JsonRequestBehavior.AllowGet);
                //}
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientDocumentsPDF PatientsController. " + exception.Message, exception);
                return Json(new { message = "Error in GetPatientDocumentsPDF.", success = false }, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetPatientReferralPDF(string fileName)
        {
            try
            {
                var pdfDocumentPath = SettingManager.GetSettingByName("FilledPDFDocumentsPath").Value;
                if (fileName.Length > 0 && System.IO.File.Exists(pdfDocumentPath + fileName))
                {
                    byte[] contents = System.IO.File.ReadAllBytes(pdfDocumentPath + fileName);
                    Response.AddHeader("Content-Disposition", "inline; filename=test.pdf");
                    return File(contents, "application/pdf");
                }
                //if (fileName.Length > 0 && System.IO.File.Exists(fileName))
                //{
                //    byte[] contents = System.IO.File.ReadAllBytes(fileName);
                //    Response.AddHeader("Content-Disposition", "inline; filename=test.pdf");
                //    return File(contents, "application/pdf");
                //}
                else
                {
                    return Json(new { message = "Not Found", success = false }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientDocumentsPDF PatientsController. " + exception.Message, exception);
                return Json(new { message = "Error in GetPatientDocumentsPDF.", success = false }, JsonRequestBehavior.AllowGet);
            }
        }
        #endregion

        public JsonResult FaxPatietnDocument(FaxDocumentModel model)
        {
            try
            {
                int documentId = int.Parse(SecurityHelper.Decrypt(model.DocumentIdEncrypted));
                vwDocument document = _unitOfWork.PatientDocumentsRepository.GetAsQuerable(x => x.DocumentId == documentId).FirstOrDefault();

                if (document != null)
                {
                    if (!string.IsNullOrEmpty(model.FaxNumber))
                    {

                        CommonHelper.SendFax(model.FaxNumber, document.FolderFileNameUNC);
                    }
                    if (!string.IsNullOrEmpty(model.Email))
                    {
                        CommonHelper.SendEmail("Physicians Team Email Document", "Please, check out the attachment.", model.Email, document.FolderFileNameUNC);
                    }
                }
                return Json(new { message = "Email sent Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method FaxDocument PatientsController. " + exception.Message, exception);
                return Json(new { message = "Failed Sending Email", success = false });
            }
        }


        public JsonResult FaxPharmacyDocument(FaxDocumentModel model)
        {
            try
            {
                int documentId = int.Parse(SecurityHelper.Decrypt(model.DocumentIdEncrypted));
                vwDocument1 document = _unitOfWork.PharmacyDocumentsRepository.GetAsQuerable(x => x.DocumenstId == documentId).FirstOrDefault();

                if (document != null)
                {
                    if (!string.IsNullOrEmpty(model.FaxNumber))
                    {

                        CommonHelper.SendFax(model.FaxNumber, document.FolderFileNameUNC);
                    }
                    if (!string.IsNullOrEmpty(model.Email))
                    {
                        CommonHelper.SendEmail("Physicians Team Email Document", "Please, check out the attachment.", model.Email, document.FolderFileNameUNC);
                    }
                }
                return Json(new { message = "Email sent Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method FaxDocument PatientsController. " + exception.Message, exception);
                return Json(new { message = "Failed Sending Email", success = false });
            }
        }

        public ActionResult GetPatientNameList(string searchPatientName)
        {
            try
            {
                List<vwPatient> patientNameList;

                var currentUser = CurrentUser;
                if (UserManager.IsInRoleAsync(currentUser.Id, "SuperAdmin").Result || UserManager.IsInRoleAsync(currentUser.Id, "Pharmacist").Result)
                {
                    patientNameList = _unitOfWork.PatientsRepository.GetAsQuerable(t => t.FullName.Contains(searchPatientName)).Take(AutoCompleteListSize).ToList();

                    foreach (vwPatient patient in patientNameList)
                    {
                        patient.PatientIdEncrypted = SecurityHelper.Encrypt(patient.PatientId.ToString());
                        patient.PhysicianIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianId.ToString());
                    }

                    return Json(patientNameList, JsonRequestBehavior.AllowGet);
                }
                else if (UserManager.IsInRoleAsync(CurrentUser.Id, "Admin").Result)
                {
                    //When office admin log in.
                    int currentOffice = UserManager.GetClaims(CurrentUser.Id).FirstOrDefault(c => c.Type == "UserOffice").Value.ToInt0();

                    var userIds = _unitOfWork.User_Office_RelationshipRepository.GetAsQuerable(x => x.OfficeId == currentOffice).Select(x => x.UserId).ToList();
                    var physicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => userIds.Contains(x.UserId)).Select(y => y.PhysicianId).ToList();
                    patientNameList = _unitOfWork.PatientsRepository.GetAsQuerable(t => physicianIds.Contains(t.PhysicianId) && t.FullName.Contains(searchPatientName)).Take(AutoCompleteListSize).ToList();
                    foreach (vwPatient patient in patientNameList)
                    {
                        patient.PatientIdEncrypted = SecurityHelper.Encrypt(patient.PatientId.ToString());
                        patient.PhysicianIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianId.ToString());
                    }
                    return Json(patientNameList, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    List<int> physicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => x.UserId == currentUser.UserId).Select(y => y.PhysicianId).ToList();
                    patientNameList = _unitOfWork.PatientsRepository.GetAsQuerable(t => physicianIds.Contains(t.PhysicianId) && t.FullName.Contains(searchPatientName)).Take(AutoCompleteListSize).ToList();
                    foreach (vwPatient patient in patientNameList)
                    {
                        patient.PatientIdEncrypted = SecurityHelper.Encrypt(patient.PatientId.ToString());
                        patient.PhysicianIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianId.ToString());
                    }
                    return Json(patientNameList, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientNameList PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetPharmacyDocumentsRecords([DataSourceRequest] DataSourceRequest request, vwDocument1 _vwDocument1 = null)
        {
            try
            {
                string patientID = null;
                int PatientId = 0;

                if (_vwDocument1 != null)
                    patientID = _vwDocument1.PatientIdEncrypted;
                if (patientID != null)
                {
                    PatientId = int.Parse(SecurityHelper.Decrypt(patientID));
                }

                var documentsList = _unitOfWork.PharmacyDocumentsRepository.GetAsQuerable(x => x.PatientId == PatientId).Select(x => new
                                                                        PharmacyDocumentModel
                {
                    DocumentAssignedDate = x.DocumentAssignedDate,
                    DocumentCreatedDate = x.DocumentCreatedDate,
                    DocumentDescription = x.DocumentDescription,
                    DocumentId = x.DocumenstId
                }
                );

                var filteredDocuments = documentsList.ToDataSourceResult(request);

                foreach (PharmacyDocumentModel document in filteredDocuments.Data)
                {
                    document.DocumentIdEncrypted = SecurityHelper.Encrypt(document.DocumentId.ToString());
                    document.DocumentId = -1;
                }

                return Json(filteredDocuments, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPharmacyDocumentsRecords PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        #region ReferralForm
        //public ActionResult ReferralForms(int PatientId)
        //{
        //    ViewBag.GetReferralFormCategories = GetReferralFormCategories();
        //    PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PatientId);
        //    return View(patient);
        //}

        //public ActionResult GetReferralForms([DataSourceRequest] DataSourceRequest request, int? PatientId = null)
        //{
        //    try
        //    {
        //        var ReferralForms = _unitOfWork.ReferralFormsRepository
        //                                        .GetAsQuerable()
        //                                        .Select(t => new ReferralFormViewModel
        //                                        {
        //                                            ReferralFormId = t.ReferralFormId,
        //                                            ReferralFormCategoryName = t.ReferralFormCategory.CategoryName,
        //                                            ReferralFormName = t.ReferralFormName,
        //                                            ReferralFormLink = t.ReferralFormValue.Replace("-", "").Replace(" ", "_").Replace(")", "").Replace("(", "")
        //                                        });

        //        if (PatientId != null)
        //        {
        //            var physicianPortalPatient_ReferralForm_RelationshipList = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetAsQuerable(t => t.PatientId == PatientId).Select(t => t.ReferralFormId).ToList();
        //            var ReferralFormViewModelList = _unitOfWork.ReferralFormsRepository
        //                                        .GetAsQuerable(t => !physicianPortalPatient_ReferralForm_RelationshipList.Contains(t.ReferralFormId))
        //                                        .Select(t => new ReferralFormViewModel
        //                                        {
        //                                            ReferralFormId = t.ReferralFormId,
        //                                            ReferralFormCategoryName = t.ReferralFormCategory.CategoryName,
        //                                            ReferralFormName = t.ReferralFormName,
        //                                            ReferralFormLink = t.ReferralFormValue.Replace("-", "").Replace(" ", "_").Replace(")", "").Replace("(", "")
        //                                        });
        //            return Json(ReferralFormViewModelList.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        //        }

        //        return Json(ReferralForms.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
        //    }
        //    catch (Exception exception)
        //    {
        //        Logger.InsertLog("Exception thrown in Method GetReferralForms PatientsController. " + exception.Message, exception);
        //        return Json(null, JsonRequestBehavior.AllowGet);
        //    }
        //}

        private IQueryable GetReferralFormCategories()
        {
            return _unitOfWork.ReferralFormCategoriesRepository.GetAsQuerable().Select(t => new SelectListItem { Text = t.CategoryName, Value = t.ReferralFormCategoryId.ToString() });
        }

        public JsonResult GetReferralForms(string ReferralFormCategoryId, int? PhysicianPortalPatientId = null, int? PatientId = null)
        {
            try
            {
                // if PatientId not null means dim paitent 
                int referralFormCategoryId = ReferralFormCategoryId.ToInt0();

                var physicianPortalPatient_ReferralForm_RelationshipList = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository
                                                                                      .GetAsQuerable(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && !(t.IsDeleted ?? false))
                                                                                      .Select(t => t.ReferralFormId);
                IQueryable referralForms = _unitOfWork.ReferralFormsRepository
                                                      .GetAsQuerable(t => !physicianPortalPatient_ReferralForm_RelationshipList.Contains(t.ReferralFormId)
                                                                          && t.ReferralFormCategoryId == referralFormCategoryId
                                                      )
                                                      .Select(t => new SelectListItem
                                                      {
                                                          Text = t.ReferralFormName,
                                                          Value = t.ReferralFormValue.Replace("-", "").Replace(" ", "_").Replace(")", "").Replace("(", "")
                                                      });
                return Json(new { message = referralForms, success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetReferralForms PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Error", success = false });
        }

        public ActionResult GetPatientReferralForms([DataSourceRequest] DataSourceRequest request, int PhysicianPortalPatientId)
        {
            try
            {
                //var physicianPortalPatient_ReferralForm_RelationshipList = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetAsQuerable(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralForm.ReferralFormCategoryId == ReferralFormCategoryId).Select(t => t.ReferralFormId).ToList();
                //var ReferralFormViewModelList = _unitOfWork.ReferralFormsRepository
                //                                .GetAsQuerable(t => physicianPortalPatient_ReferralForm_RelationshipList.Contains(t.ReferralFormId))
                //                                .Select(t => new ReferralFormViewModel
                //                                {
                //                                    ReferralFormId = t.ReferralFormId,
                //                                    ReferralFormCategoryName = t.ReferralFormCategory.CategoryName,
                //                                    ReferralFormName = t.ReferralFormName,
                //                                    ReferralFormLink = t.ReferralFormValue.Replace("-", "").Replace(" ", "_").Replace(")", "").Replace("(", "")
                //                                });

                //var ReferralFormViewModelList = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository
                //    .GetAsQuerable(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralForm.ReferralFormCategoryId == ReferralFormCategoryId)
                //    .Select(t => new ReferralFormViewModel
                //    {
                //        ReferralFormId = t.ReferralForm.ReferralFormId,
                //        ReferralFormCategoryName = t.ReferralForm.ReferralFormCategory.CategoryName,
                //        ReferralFormName = t.ReferralForm.ReferralFormName,
                //        ReferralFormLink = t.ReferralForm.ReferralFormValue.Replace("-", "").Replace(" ", "_").Replace(")", "").Replace("(", ""),
                //        FilledOn = t.FilledOn,
                //        FilledBy = t.FilledBy
                //    }
                //    );


                List<ReferralFormViewModel> ReferralFormViewModelList = _unitOfWork.vwReferralFormRepository
                    .GetAsQuerable(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId).Select(x => new ReferralFormViewModel()
                    {
                        ReferralFormId = x.ReferralFormId,
                        ReferralFormCategoryName = x.ReferralFormCategoryName,
                        ReferralFormName = x.ReferralFormName,
                        ReferralFormLink = x.ReferralFormLink,
                        PhysicianPortalPatientId = x.PhysicianPortalPatientId,
                        FilledOn = x.FilledOn,
                        FilledBy = x.FilledBy
                    }).ToList();


                var checklistIdsForSubmittedForms = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.GetAsQuerable(x => x.PhysicianPortalPatientId == PhysicianPortalPatientId && x.IsSubmited == true).ToList().Select(x => x.ReferralFormChecklistRelationshipId);
                List<int> idsOfSubmittedForms = _unitOfWork.ReferralFormChecklistRelationshipRepository.GetAsQuerable(x => checklistIdsForSubmittedForms.Contains(x.ReferralFormChecklistRelationshipId)).Select(x => x.ReferralFormId.Value).ToList();


                foreach (var form in ReferralFormViewModelList)
                {
                    if (idsOfSubmittedForms.Contains(form.ReferralFormId))
                    {
                        form.IsSubmited = true;
                    }
                    else
                    {
                        form.IsSubmited = false;
                    }
                }



                return Json(ReferralFormViewModelList.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientReferralForms PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult DeletePatientReferralForm(int ReferralFormId, string PhysicianPortalPatientId, int refferalFormId)
        {
            try
            {
                //Sometimes the + symbol is not encoded and appears as a ' ' in the string, we need to replace it back to +
                PhysicianPortalPatientId = PhysicianPortalPatientId.Replace(" ", "+");
                int patientid = PhysicianPortalPatientId != null ? int.Parse(SecurityHelper.Decrypt(PhysicianPortalPatientId)) : 0;

                var checklistIds = _unitOfWork.ReferralFormChecklistRelationshipRepository.GetAsQuerable(x => x.ReferralFormId == refferalFormId).Select(x => x.ReferralFormChecklistRelationshipId).ToList();
                var checklistItems = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.GetAsQuerable(x => x.PhysicianPortalPatientId == patientid && checklistIds.Contains(x.ReferralFormChecklistRelationshipId.Value)).ToList();
                foreach (PhysicianPortalPatientChecklistRelationship checklistItem in checklistItems)
                {
                    //_unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Delete(checklistItem);
                    checklistItem.IsDeleted = true;
                    checklistItem.DeletedOn = DateTime.UtcNow;
                    checklistItem.DeletedBy = CurrentUser.UserId;

                    _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Update(checklistItem);
                }

                var item = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.ReferralFormId == ReferralFormId && t.PhysicianPortalPatientId == patientid);
                if (item != null)
                {
                    item.IsDeleted = true;
                    item.ModifiedOn = DateTime.UtcNow;
                    item.ModifiedBy = CurrentUser.UserId;
                }
                _unitOfWork.Save();

                return Json(new { message = "Referral Form deleted Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method DeletePatientReferralForm PatientsController. " + exception.Message, exception);
                return Json(new { message = "Failed to delete Referral Form.", success = false });
            }
        }

        //ggca_Cardiovascular...........................
        public ActionResult ggca_cardio_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca cardio referral form"));
            return RedirectToAction("CardiovascularReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 33 });
        }
        public ActionResult lmfl_cardio_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl cardio referral form"));
            return RedirectToAction("CardiovascularReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 34 });
        }
        public ActionResult nola_cardio_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola cardio referral form"));
            return RedirectToAction("CardiovascularReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 35 });
        }
        public ActionResult ofl_cardio_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl cardio referral form"));
            return RedirectToAction("CardiovascularReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 36 });
        }
        //Cardiovascular................................
        public ActionResult CardiovascularReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {
                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }

                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 1;
                }


                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormCardiovascularViewModel refFormCardiovascularViewModel = new RefFormCardiovascularViewModel();

                //Set ReferralFormId
                refFormCardiovascularViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormCardiovascularViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormCardiovascularViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormCardiovascularViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormCardiovascularViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormCardiovascularViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormCardiovascularViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormCardiovascularViewModel.PhysicianFullName = physician.FullName;
                        refFormCardiovascularViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormCardiovascularViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormCardiovascularViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormCardiovascularViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormCardiovascularViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormCardiovascularViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormCardiovascularViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormCardiovascular refFormCardiovascular = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormCardiovascular = _unitOfWork.RefFormCardiovascularesRepository.GetSingle(t => t.RefFormCardiovascularId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormCardiovascular == null) refFormCardiovascular = new RefFormCardiovascular();


                    refFormCardiovascularViewModel.RefFormCardiovascularId = refFormCardiovascular.RefFormCardiovascularId;

                    //Form
                    refFormCardiovascularViewModel.FormDate = refFormCardiovascular.FormDate;
                    refFormCardiovascularViewModel.FormNeedsByDate = refFormCardiovascular.FormNeedsByDate;
                    refFormCardiovascularViewModel.ChkBox_ShipToPatient = refFormCardiovascular.ChkBox_ShipToPatient;
                    refFormCardiovascularViewModel.ChkBox_ShipToOffice = refFormCardiovascular.ChkBox_ShipToOffice;
                    refFormCardiovascularViewModel.ChkBox_ShipToOther = refFormCardiovascular.ChkBox_ShipToOther;
                    refFormCardiovascularViewModel.TxtBox_ShipToOther = refFormCardiovascular.TxtBox_ShipToOther;

                    //Diagnosis:
                    refFormCardiovascularViewModel.DiagnosisE78_0 = refFormCardiovascular.DiagnosisE78_0 ?? false;
                    refFormCardiovascularViewModel.DiagnosisE78_2 = refFormCardiovascular.DiagnosisE78_2 ?? false;
                    refFormCardiovascularViewModel.DiagnosisE78_4 = refFormCardiovascular.DiagnosisE78_4 ?? false;
                    refFormCardiovascularViewModel.DiagnosisE78_5 = refFormCardiovascular.DiagnosisE78_5 ?? false;
                    refFormCardiovascularViewModel.DiagnosisASCVD = refFormCardiovascular.DiagnosisASCVD ?? false;
                    refFormCardiovascularViewModel.DiagnosisASCVDCodes = refFormCardiovascular.DiagnosisASCVDCodes;

                    //Drug Allergies:
                    refFormCardiovascularViewModel.DrugAllergies = refFormCardiovascular.DrugAllergies;

                    //Please provide one secondary ICD-10-CM code:
                    refFormCardiovascularViewModel.ChkBox_I20_0 = refFormCardiovascular.ChkBox_I20_0 ?? false;
                    refFormCardiovascularViewModel.ChkBox_I20_9 = refFormCardiovascular.ChkBox_I20_9 ?? false;
                    refFormCardiovascularViewModel.ChkBox_I21 = refFormCardiovascular.ChkBox_I21 ?? false;
                    refFormCardiovascularViewModel.TxtBox_I21 = refFormCardiovascular.TxtBox_I21;
                    refFormCardiovascularViewModel.ChkBox_I22 = refFormCardiovascular.ChkBox_I22 ?? false;
                    refFormCardiovascularViewModel.TxtBox_I22 = refFormCardiovascular.TxtBox_I22;
                    refFormCardiovascularViewModel.ChkBox_I25 = refFormCardiovascular.ChkBox_I25 ?? false;
                    refFormCardiovascularViewModel.TxtBox_I25 = refFormCardiovascular.TxtBox_I25;
                    refFormCardiovascularViewModel.ChkBox_I63 = refFormCardiovascular.ChkBox_I63 ?? false;
                    refFormCardiovascularViewModel.TxtBox_I63 = refFormCardiovascular.TxtBox_I63;
                    refFormCardiovascularViewModel.ChkBox_I65 = refFormCardiovascular.ChkBox_I65 ?? false;
                    refFormCardiovascularViewModel.TxtBox_I65 = refFormCardiovascular.TxtBox_I65;
                    refFormCardiovascularViewModel.ChkBox_I66 = refFormCardiovascular.ChkBox_I66 ?? false;
                    refFormCardiovascularViewModel.TxtBox_I66 = refFormCardiovascular.TxtBox_I66;
                    refFormCardiovascularViewModel.ChkBox_I67 = refFormCardiovascular.ChkBox_I67 ?? false;
                    refFormCardiovascularViewModel.TxtBox_I67 = refFormCardiovascular.TxtBox_I67;
                    refFormCardiovascularViewModel.ChkBox_I70 = refFormCardiovascular.ChkBox_I70 ?? false;
                    refFormCardiovascularViewModel.TxtBox_I70 = refFormCardiovascular.TxtBox_I70;
                    refFormCardiovascularViewModel.ChkBox_I73_9 = refFormCardiovascular.ChkBox_I73_9 ?? false;
                    refFormCardiovascularViewModel.ChkBox_G45_9 = refFormCardiovascular.ChkBox_G45_9 ?? false;
                    refFormCardiovascularViewModel.ChkBox_G46 = refFormCardiovascular.ChkBox_G46 ?? false;
                    refFormCardiovascularViewModel.TxtBox_G46 = refFormCardiovascular.TxtBox_G46;
                    refFormCardiovascularViewModel.ChkBox_Other = refFormCardiovascular.ChkBox_Other ?? false;
                    refFormCardiovascularViewModel.TxtBox_Other = refFormCardiovascular.TxtBox_Other;
                    refFormCardiovascularViewModel.Most_recent_LDL_C_level_on_treatment = refFormCardiovascular.Most_recent_LDL_C_level_on_treatment;
                    refFormCardiovascularViewModel.Most_recent_LDL_C_level_on_treatment_Date = refFormCardiovascular.Most_recent_LDL_C_level_on_treatment_Date.HasValue ? refFormCardiovascular.Most_recent_LDL_C_level_on_treatment_Date.Value : DateTime.UtcNow;
                    refFormCardiovascularViewModel.ChkBox_Atorvastatin = refFormCardiovascular.ChkBox_Atorvastatin ?? false;
                    refFormCardiovascularViewModel.ChkBox_Ezetimibe = refFormCardiovascular.ChkBox_Ezetimibe ?? false;
                    refFormCardiovascularViewModel.ChkBox_Pravastatin = refFormCardiovascular.ChkBox_Pravastatin ?? false;
                    refFormCardiovascularViewModel.ChkBox_Rosuvastatin = refFormCardiovascular.ChkBox_Rosuvastatin ?? false;
                    refFormCardiovascularViewModel.ChkBox_Simvastatin = refFormCardiovascular.ChkBox_Simvastatin ?? false;
                    refFormCardiovascularViewModel.Prior_and_or_Current_Treatments_Other = refFormCardiovascular.Prior_and_or_Current_Treatments_Other;
                    refFormCardiovascularViewModel.Dose = refFormCardiovascular.Dose;
                    refFormCardiovascularViewModel.Length_of_Treatment = refFormCardiovascular.Length_of_Treatment;
                    refFormCardiovascularViewModel.Reason_for_Discontinuing = refFormCardiovascular.Reason_for_Discontinuing;
                    refFormCardiovascularViewModel.Family_History_of_ACSVD_Yes = refFormCardiovascular.Family_History_of_ACSVD_Yes;
                    refFormCardiovascularViewModel.Family_History_of_ACSVD_No = refFormCardiovascular.Family_History_of_ACSVD_No;
                    refFormCardiovascularViewModel.Allergies = refFormCardiovascular.Allergies;

                    //PRESCRIPTION INFORMATION
                    refFormCardiovascularViewModel.C75_mg_mL_Pre_filled_Pen_2_pack = refFormCardiovascular.C75_mg_mL_Pre_filled_Pen_2_pack ?? false;
                    refFormCardiovascularViewModel.C150_mg_mL_Pre_filled_Pen_2_pack = refFormCardiovascular.C150_mg_mL_Pre_filled_Pen_2_pack ?? false;
                    refFormCardiovascularViewModel.C75_mg_mL_Pre_filled_Syringe_2_pack = refFormCardiovascular.C75_mg_mL_Pre_filled_Syringe_2_pack ?? false;
                    refFormCardiovascularViewModel.C150_mg_mL_Pre_filled_Syringe_2_pack = refFormCardiovascular.C150_mg_mL_Pre_filled_Syringe_2_pack ?? false;
                    refFormCardiovascularViewModel.Inject_subcutaneously_once_every_2_weeks1 = refFormCardiovascular.Inject_subcutaneously_once_every_2_weeks1 ?? false;
                    refFormCardiovascularViewModel.Refills1 = refFormCardiovascular.Refills1;

                    refFormCardiovascularViewModel.C140_mg_mL_SureClick_1_pack = refFormCardiovascular.C140_mg_mL_SureClick_1_pack ?? false;
                    refFormCardiovascularViewModel.C140_mg_mL_SureClick_2_pack = refFormCardiovascular.C140_mg_mL_SureClick_2_pack ?? false;
                    refFormCardiovascularViewModel.C140_mg_mL_SureClick_3_pack = refFormCardiovascular.C140_mg_mL_SureClick_3_pack ?? false;
                    refFormCardiovascularViewModel.C140_mg_mL_Pre_filled_Syringe_1_pack = refFormCardiovascular.C140_mg_mL_Pre_filled_Syringe_1_pack ?? false;
                    refFormCardiovascularViewModel.Inject_subcutaneously_once_every_2_weeks2 = refFormCardiovascular.Inject_subcutaneously_once_every_2_weeks2 ?? false;
                    refFormCardiovascularViewModel.Inject_subcutaneously_monthly = refFormCardiovascular.Inject_subcutaneously_monthly ?? false;
                    refFormCardiovascularViewModel.Refills2 = refFormCardiovascular.Refills2;

                    refFormCardiovascularViewModel.C420_mg_3_5_mL_single_use_Pushtronex_System = refFormCardiovascular.C420_mg_3_5_mL_single_use_Pushtronex_System ?? false;
                    refFormCardiovascularViewModel.Administer_subcutaneously_once_monthly = refFormCardiovascular.Administer_subcutaneously_once_monthly ?? false;

                    refFormCardiovascularViewModel.Date1 = refFormCardiovascular.Date1;
                    refFormCardiovascularViewModel.Date2 = refFormCardiovascular.Date2;

                    refFormCardiovascularViewModel.IsSignatured = refFormCardiovascular.IsSignatured ?? false;
                    return View(refFormCardiovascularViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method CardiovascularReferralForm PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormCardiovascularViewModel());
        }

        [HttpPost]
        public JsonResult CardiovascularReferralForm(RefFormCardiovascularViewModel refFormCardiovascularViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormCardiovascularViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormCardiovascular refFormCardiovascular = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormCardiovascularViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormCardiovascular = _unitOfWork.RefFormCardiovascularesRepository.GetSingle(t => t.RefFormCardiovascularId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormCardiovascular == null)
                {
                    refFormCardiovascular = new RefFormCardiovascular();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form
                refFormCardiovascular.FormDate = refFormCardiovascularViewModel.FormDate;
                refFormCardiovascular.FormNeedsByDate = refFormCardiovascularViewModel.FormNeedsByDate;
                refFormCardiovascular.ChkBox_ShipToPatient = refFormCardiovascularViewModel.ChkBox_ShipToPatient;
                refFormCardiovascular.ChkBox_ShipToOffice = refFormCardiovascularViewModel.ChkBox_ShipToOffice;
                refFormCardiovascular.ChkBox_ShipToOther = refFormCardiovascularViewModel.ChkBox_ShipToOther;
                refFormCardiovascular.TxtBox_ShipToOther = refFormCardiovascularViewModel.TxtBox_ShipToOther;

                //Diagnosis:
                refFormCardiovascular.DiagnosisE78_0 = refFormCardiovascularViewModel.DiagnosisE78_0;
                refFormCardiovascular.DiagnosisE78_2 = refFormCardiovascularViewModel.DiagnosisE78_2;
                refFormCardiovascular.DiagnosisE78_4 = refFormCardiovascularViewModel.DiagnosisE78_4;
                refFormCardiovascular.DiagnosisE78_5 = refFormCardiovascularViewModel.DiagnosisE78_5;
                refFormCardiovascular.DiagnosisASCVD = refFormCardiovascularViewModel.DiagnosisASCVD;
                refFormCardiovascular.DiagnosisASCVDCodes = refFormCardiovascularViewModel.DiagnosisASCVDCodes;

                //Drug Allergies:
                refFormCardiovascular.DrugAllergies = refFormCardiovascularViewModel.DrugAllergies;

                //Please provide one secondary ICD-10-CM code:
                refFormCardiovascular.ChkBox_I20_0 = refFormCardiovascularViewModel.ChkBox_I20_0;
                refFormCardiovascular.ChkBox_I20_9 = refFormCardiovascularViewModel.ChkBox_I20_9;
                refFormCardiovascular.ChkBox_I21 = refFormCardiovascularViewModel.ChkBox_I21;
                refFormCardiovascular.TxtBox_I21 = refFormCardiovascularViewModel.TxtBox_I21;
                refFormCardiovascular.ChkBox_I22 = refFormCardiovascularViewModel.ChkBox_I22;
                refFormCardiovascular.TxtBox_I22 = refFormCardiovascularViewModel.TxtBox_I22;
                refFormCardiovascular.ChkBox_I25 = refFormCardiovascularViewModel.ChkBox_I25;
                refFormCardiovascular.TxtBox_I25 = refFormCardiovascularViewModel.TxtBox_I25;
                refFormCardiovascular.ChkBox_I63 = refFormCardiovascularViewModel.ChkBox_I63;
                refFormCardiovascular.TxtBox_I63 = refFormCardiovascularViewModel.TxtBox_I63;
                refFormCardiovascular.ChkBox_I65 = refFormCardiovascularViewModel.ChkBox_I65;
                refFormCardiovascular.TxtBox_I65 = refFormCardiovascularViewModel.TxtBox_I65;
                refFormCardiovascular.ChkBox_I66 = refFormCardiovascularViewModel.ChkBox_I66;
                refFormCardiovascular.TxtBox_I66 = refFormCardiovascularViewModel.TxtBox_I66;
                refFormCardiovascular.ChkBox_I67 = refFormCardiovascularViewModel.ChkBox_I67;
                refFormCardiovascular.TxtBox_I67 = refFormCardiovascularViewModel.TxtBox_I67;
                refFormCardiovascular.ChkBox_I70 = refFormCardiovascularViewModel.ChkBox_I70;
                refFormCardiovascular.TxtBox_I70 = refFormCardiovascularViewModel.TxtBox_I70;
                refFormCardiovascular.ChkBox_I73_9 = refFormCardiovascularViewModel.ChkBox_I73_9;
                refFormCardiovascular.ChkBox_G45_9 = refFormCardiovascularViewModel.ChkBox_G45_9;
                refFormCardiovascular.ChkBox_G46 = refFormCardiovascularViewModel.ChkBox_G46;
                refFormCardiovascular.TxtBox_G46 = refFormCardiovascularViewModel.TxtBox_G46;
                refFormCardiovascular.ChkBox_Other = refFormCardiovascularViewModel.ChkBox_Other;
                refFormCardiovascular.TxtBox_Other = refFormCardiovascularViewModel.TxtBox_Other;
                refFormCardiovascular.Most_recent_LDL_C_level_on_treatment = refFormCardiovascularViewModel.Most_recent_LDL_C_level_on_treatment;
                refFormCardiovascular.Most_recent_LDL_C_level_on_treatment_Date = refFormCardiovascularViewModel.Most_recent_LDL_C_level_on_treatment_Date;
                refFormCardiovascular.ChkBox_Atorvastatin = refFormCardiovascularViewModel.ChkBox_Atorvastatin;
                refFormCardiovascular.ChkBox_Ezetimibe = refFormCardiovascularViewModel.ChkBox_Ezetimibe;
                refFormCardiovascular.ChkBox_Pravastatin = refFormCardiovascularViewModel.ChkBox_Pravastatin;
                refFormCardiovascular.ChkBox_Rosuvastatin = refFormCardiovascularViewModel.ChkBox_Rosuvastatin;
                refFormCardiovascular.ChkBox_Simvastatin = refFormCardiovascularViewModel.ChkBox_Simvastatin;
                refFormCardiovascular.Prior_and_or_Current_Treatments_Other = refFormCardiovascularViewModel.Prior_and_or_Current_Treatments_Other;
                refFormCardiovascular.Dose = refFormCardiovascularViewModel.Dose;
                refFormCardiovascular.Length_of_Treatment = refFormCardiovascularViewModel.Length_of_Treatment;
                refFormCardiovascular.Reason_for_Discontinuing = refFormCardiovascularViewModel.Reason_for_Discontinuing;
                refFormCardiovascular.Family_History_of_ACSVD_Yes = refFormCardiovascularViewModel.Family_History_of_ACSVD_Yes;
                refFormCardiovascular.Family_History_of_ACSVD_No = refFormCardiovascularViewModel.Family_History_of_ACSVD_No;
                refFormCardiovascular.Allergies = refFormCardiovascularViewModel.Allergies;

                //PRESCRIPTION INFORMATION
                refFormCardiovascular.C75_mg_mL_Pre_filled_Pen_2_pack = refFormCardiovascularViewModel.C75_mg_mL_Pre_filled_Pen_2_pack;
                refFormCardiovascular.C150_mg_mL_Pre_filled_Pen_2_pack = refFormCardiovascularViewModel.C150_mg_mL_Pre_filled_Pen_2_pack;
                refFormCardiovascular.C75_mg_mL_Pre_filled_Syringe_2_pack = refFormCardiovascularViewModel.C75_mg_mL_Pre_filled_Syringe_2_pack;
                refFormCardiovascular.C150_mg_mL_Pre_filled_Syringe_2_pack = refFormCardiovascularViewModel.C150_mg_mL_Pre_filled_Syringe_2_pack;
                refFormCardiovascular.Inject_subcutaneously_once_every_2_weeks1 = refFormCardiovascularViewModel.Inject_subcutaneously_once_every_2_weeks1;
                refFormCardiovascular.Refills1 = refFormCardiovascularViewModel.Refills1;

                refFormCardiovascular.C140_mg_mL_SureClick_1_pack = refFormCardiovascularViewModel.C140_mg_mL_SureClick_1_pack;
                refFormCardiovascular.C140_mg_mL_SureClick_2_pack = refFormCardiovascularViewModel.C140_mg_mL_SureClick_2_pack;
                refFormCardiovascular.C140_mg_mL_SureClick_3_pack = refFormCardiovascularViewModel.C140_mg_mL_SureClick_3_pack;
                refFormCardiovascular.C140_mg_mL_Pre_filled_Syringe_1_pack = refFormCardiovascularViewModel.C140_mg_mL_Pre_filled_Syringe_1_pack;
                refFormCardiovascular.Inject_subcutaneously_once_every_2_weeks2 = refFormCardiovascularViewModel.Inject_subcutaneously_once_every_2_weeks2;
                refFormCardiovascular.Inject_subcutaneously_monthly = refFormCardiovascularViewModel.Inject_subcutaneously_monthly;
                refFormCardiovascular.Refills2 = refFormCardiovascularViewModel.Refills2;

                refFormCardiovascular.C420_mg_3_5_mL_single_use_Pushtronex_System = refFormCardiovascularViewModel.C420_mg_3_5_mL_single_use_Pushtronex_System;
                refFormCardiovascular.Administer_subcutaneously_once_monthly = refFormCardiovascularViewModel.Administer_subcutaneously_once_monthly;

                refFormCardiovascular.Date1 = refFormCardiovascularViewModel.Date1;
                refFormCardiovascular.Date2 = refFormCardiovascularViewModel.Date2;

                refFormCardiovascular.IsSignatured = refFormCardiovascularViewModel.IsSignatured;

                refFormCardiovascular.ModifiedBy = CurrentUser.UserId;
                refFormCardiovascular.ModifiedOn = DateTime.UtcNow;

                if (IsEdit)
                {
                    _unitOfWork.RefFormCardiovascularesRepository.Update(refFormCardiovascular);
                    AuditLogger.AuditTracker("Edit CardiovascularReferralForm", "A  CardiovascularReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormCardiovascular.CreatedBy = CurrentUser.UserId;
                    refFormCardiovascular.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormCardiovascularesRepository.Insert(refFormCardiovascular);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New CardiovascularReferralForm", "A new CardiovascularReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormCardiovascularViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormCardiovascular.RefFormCardiovascularId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);

                }
                _unitOfWork.Save();
                return Json(new { message = "Save Cardiovascular Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method CardiovascularReferralForm PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save Cardiovascular Referral Form Unsuccessfully.", success = false });
        }
        //ggca cysticfibrosis referral form

        public ActionResult ggca_cysticfibrosis_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca cysticfibrosis referral form"));
            return RedirectToAction("CysticFibrosisReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 38 });
        }
        //ofl cysticfibrosis referral form

        public ActionResult ofl_cysticfibrosis_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl cysticfibrosis referral form"));
            return RedirectToAction("CysticFibrosisReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 39 });
        }

        //CysticFibrosis................................
        public ActionResult CysticFibrosisReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cystic Fibrosis Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 2;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormCysticFibrosisViewModel refFormCysticFibrosisViewModel = new RefFormCysticFibrosisViewModel();

                //Set ReferralFormId
                refFormCysticFibrosisViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormCysticFibrosisViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormCysticFibrosisViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormCysticFibrosisViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormCysticFibrosisViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormCysticFibrosisViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormCysticFibrosisViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormCysticFibrosisViewModel.PhysicianFullName = physician.FullName;
                        refFormCysticFibrosisViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormCysticFibrosisViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormCysticFibrosisViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormCysticFibrosisViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormCysticFibrosisViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormCysticFibrosisViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormCysticFibrosisViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormCysticFibrosi refFormCysticFibrosi = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormCysticFibrosi = _unitOfWork.RefFormCysticFibrosisRepository.GetSingle(t => t.RefFormCysticFibrosisId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormCysticFibrosi == null) refFormCysticFibrosi = new RefFormCysticFibrosi();


                    refFormCysticFibrosisViewModel.RefFormCysticFibrosisId = refFormCysticFibrosi.RefFormCysticFibrosisId;

                    //Form
                    //Add your code here.

                    refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_0_Cystic_Fibrosis = refFormCysticFibrosi.ChkBox_CLINICAL_E84_0_Cystic_Fibrosis ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_9_Cystic_Fibrosis = refFormCysticFibrosi.ChkBox_CLINICAL_E84_9_Cystic_Fibrosis ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_11_Mecoium_ileus = refFormCysticFibrosi.ChkBox_CLINICAL_E84_11_Mecoium_ileus ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_19_Cystic_Fibrosis = refFormCysticFibrosi.ChkBox_CLINICAL_E84_19_Cystic_Fibrosis ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_8_Cystic_Fibrosis = refFormCysticFibrosi.ChkBox_CLINICAL_E84_8_Cystic_Fibrosis ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CLINICAL_B96_5_pseudomonas = refFormCysticFibrosi.ChkBox_CLINICAL_B96_5_pseudomonas ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CLINICAL_Other = refFormCysticFibrosi.ChkBox_CLINICAL_Other ?? false;
                    refFormCysticFibrosisViewModel.CLINICAL_Other = refFormCysticFibrosi.CLINICAL_Other;
                    refFormCysticFibrosisViewModel.CLINICAL_Drug_Allergies = refFormCysticFibrosi.CLINICAL_Drug_Allergies;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Albuterol = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Albuterol ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Bethkis = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Bethkis ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Budesonide = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Budesonide ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Cayston = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Cayston ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Colistin = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Colistin ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Hyper_Sal = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Hyper_Sal ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Kitabis_Pak = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Kitabis_Pak ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Levalbuterol = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Levalbuterol ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Mucomyst = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Mucomyst ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Pulmozyme = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Pulmozyme ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_TOBI = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_TOBI ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_TOBI_Podhaler = refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_TOBI_Podhaler ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_083__3mL_vial_ = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_083__3mL_vial_ ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_5__2_5mg_0_5mL_ = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_5__2_5mg_0_5mL_ ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Ventolin = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Ventolin ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Proair = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Proair ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_25mg_2ml = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_25mg_2ml ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_5mg_2ml = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_5mg_2ml ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_75mg = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_75mg ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_150mg = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_150mg ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_5ml_Sterile_H2O = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_5ml_Sterile_H2O ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Syringe = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Syringe ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Sodium_chloride = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Sodium_chloride ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_3___4ml_ = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_3___4ml_ ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_7___4ml_ = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_7___4ml_ ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_31mg_3ml = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_31mg_3ml ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_63mg_3ml = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_63mg_3ml ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_1_25mg_3ml = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_1_25mg_3ml ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_10_ = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_10_ ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_20__inhalation = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_20__inhalation ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Bd_syringes = refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Bd_syringes ?? false;
                    refFormCysticFibrosisViewModel.Directions1 = refFormCysticFibrosi.Directions1;
                    refFormCysticFibrosisViewModel.Directions1_Qty = refFormCysticFibrosi.Directions1_Qty;
                    refFormCysticFibrosisViewModel.Directions1_Refills = refFormCysticFibrosi.Directions1_Refills;
                    refFormCysticFibrosisViewModel.Radio1_28_days_on_28_days_off = refFormCysticFibrosi.Radio1_28_days_on_28_days_off ?? false;
                    refFormCysticFibrosisViewModel.Radio1_continuous = refFormCysticFibrosi.Radio1_continuous ?? false;
                    refFormCysticFibrosisViewModel.Radio1_Qty_TxtBox = refFormCysticFibrosi.Radio1_Qty_TxtBox;
                    refFormCysticFibrosisViewModel.Radio1_Refills_TxtBox = refFormCysticFibrosi.Radio1_Refills_TxtBox;
                    refFormCysticFibrosisViewModel.Directions2 = refFormCysticFibrosi.Directions2;
                    refFormCysticFibrosisViewModel.Directions2_Qty = refFormCysticFibrosi.Directions2_Qty;
                    refFormCysticFibrosisViewModel.Directions2_Refills = refFormCysticFibrosi.Directions2_Refills;
                    refFormCysticFibrosisViewModel.Directions2_28_days_on_28_days_off_Qty = refFormCysticFibrosi.Directions2_28_days_on_28_days_off_Qty;
                    refFormCysticFibrosisViewModel.Directions2_28_days_on_28_days_off_Refills = refFormCysticFibrosi.Directions2_28_days_on_28_days_off_Refills;
                    refFormCysticFibrosisViewModel.ChkBox_once_daily1 = refFormCysticFibrosi.ChkBox_once_daily1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_once_twice1 = refFormCysticFibrosi.ChkBox_once_twice1 ?? false;
                    refFormCysticFibrosisViewModel.Radio2_28_days_on_28_days_off = refFormCysticFibrosi.Radio2_28_days_on_28_days_off ?? false;
                    refFormCysticFibrosisViewModel.Radio2_continuous = refFormCysticFibrosi.Radio2_continuous ?? false;
                    refFormCysticFibrosisViewModel.Radio2_Qty_TxtBox = refFormCysticFibrosi.Radio2_Qty_TxtBox;
                    refFormCysticFibrosisViewModel.Radio2_Refills_TxtBox = refFormCysticFibrosi.Radio2_Refills_TxtBox;
                    refFormCysticFibrosisViewModel.Directions3 = refFormCysticFibrosi.Directions3;
                    refFormCysticFibrosisViewModel.Directions3_Qty = refFormCysticFibrosi.Directions3_Qty;
                    refFormCysticFibrosisViewModel.Directions3_Refills = refFormCysticFibrosi.Directions3_Refills;
                    refFormCysticFibrosisViewModel.Radio3_28_days_on_28_days_off = refFormCysticFibrosi.Radio3_28_days_on_28_days_off ?? false;
                    refFormCysticFibrosisViewModel.Radio3_continuous = refFormCysticFibrosi.Radio3_continuous ?? false;
                    refFormCysticFibrosisViewModel.Radio3_Qty_TxtBox = refFormCysticFibrosi.Radio3_Qty_TxtBox;
                    refFormCysticFibrosisViewModel.Radio3_Refills_TxtBox = refFormCysticFibrosi.Radio3_Refills_TxtBox;
                    refFormCysticFibrosisViewModel.Directions4 = refFormCysticFibrosi.Directions4;
                    refFormCysticFibrosisViewModel.Directions4_Qty = refFormCysticFibrosi.Directions4_Qty;
                    refFormCysticFibrosisViewModel.Directions4_Refills = refFormCysticFibrosi.Directions4_Refills;
                    refFormCysticFibrosisViewModel.Directions5 = refFormCysticFibrosi.Directions5;
                    refFormCysticFibrosisViewModel.Directions5_Qty = refFormCysticFibrosi.Directions5_Qty;
                    refFormCysticFibrosisViewModel.Directions5_Refills = refFormCysticFibrosi.Directions5_Refills;
                    refFormCysticFibrosisViewModel.ChkBox_once_daily2 = refFormCysticFibrosi.ChkBox_once_daily2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_once_twice2 = refFormCysticFibrosi.ChkBox_once_twice2 ?? false;
                    refFormCysticFibrosisViewModel.Pulmozym_Qty = refFormCysticFibrosi.Pulmozym_Qty;
                    refFormCysticFibrosisViewModel.Pulmozym_Refills = refFormCysticFibrosi.Pulmozym_Refills;
                    refFormCysticFibrosisViewModel.Radio4_28_days_on_28_days_off = refFormCysticFibrosi.Radio4_28_days_on_28_days_off ?? false;
                    refFormCysticFibrosisViewModel.Radio4_continuous = refFormCysticFibrosi.Radio4_continuous ?? false;
                    refFormCysticFibrosisViewModel.Radio4_Qty_TxtBox = refFormCysticFibrosi.Radio4_Qty_TxtBox;
                    refFormCysticFibrosisViewModel.Radio4_Refills_TxtBox = refFormCysticFibrosi.Radio4_Refills_TxtBox;
                    refFormCysticFibrosisViewModel.Radio5_28_days_on_28_days_off = refFormCysticFibrosi.Radio5_28_days_on_28_days_off ?? false;
                    refFormCysticFibrosisViewModel.Radio5_continuous = refFormCysticFibrosi.Radio5_continuous ?? false;
                    refFormCysticFibrosisViewModel.Radio5_Qty_TxtBox = refFormCysticFibrosi.Radio5_Qty_TxtBox;
                    refFormCysticFibrosisViewModel.Radio5_Refills_TxtBox = refFormCysticFibrosi.Radio5_Refills_TxtBox;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Creon = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Creon ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Pancreaze = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Pancreaze ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Pertzye = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Pertzye ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Viokace = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Viokace ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Zenpep = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Zenpep ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_3000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_3000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_6000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_6000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_12000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_12000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_24000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_24000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_36000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_36000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_4200u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_4200u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_10500u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_10500u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_16800u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_16800u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_21000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_21000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_4000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_4000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_16000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_16000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_8000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_8000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_10440u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_10440u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_20880u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_20880u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_3000u1 = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_3000u1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_5000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_5000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_10000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_10000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_15000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_15000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_20000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_20000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_25000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_25000u ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_40000u = refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_40000u ?? false;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES___of_caps_per_meals = refFormCysticFibrosi.PANCREATIC_ENZYMES___of_caps_per_meals;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES___of_caps_per_snacks = refFormCysticFibrosi.PANCREATIC_ENZYMES___of_caps_per_snacks;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Daily_max = refFormCysticFibrosi.PANCREATIC_ENZYMES_Daily_max;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_advise__of_consumed_meals = refFormCysticFibrosi.PANCREATIC_ENZYMES_advise__of_consumed_meals;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox1 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox2 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox2;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox3 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox3;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox4 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox4;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox5 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox5;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox6 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox6;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox1 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox2 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox2;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox3 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox3;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox4 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox4;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox5 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox5;
                    refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox6 = refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox6;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Aquadeks = refFormCysticFibrosi.ChkBox_VITAMINS_Aquadeks ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Calcium_carbonate = refFormCysticFibrosi.ChkBox_VITAMINS_Calcium_carbonate ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_DEKAS = refFormCysticFibrosi.ChkBox_VITAMINS_DEKAS ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_MVW_Complete = refFormCysticFibrosi.ChkBox_VITAMINS_MVW_Complete ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Vitamin_D = refFormCysticFibrosi.ChkBox_VITAMINS_Vitamin_D ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Liquid = refFormCysticFibrosi.ChkBox_VITAMINS_Liquid ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Chew_Tab = refFormCysticFibrosi.ChkBox_VITAMINS_Chew_Tab ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Soft_Gels = refFormCysticFibrosi.ChkBox_VITAMINS_Soft_Gels ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_1250mg = refFormCysticFibrosi.ChkBox_VITAMINS_1250mg ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Liquid2 = refFormCysticFibrosi.ChkBox_VITAMINS_Liquid2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Capsule = refFormCysticFibrosi.ChkBox_VITAMINS_Capsule ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_ChewTab2 = refFormCysticFibrosi.ChkBox_VITAMINS_ChewTab2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Soft_Gels2 = refFormCysticFibrosi.ChkBox_VITAMINS_Soft_Gels2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Drops = refFormCysticFibrosi.ChkBox_VITAMINS_Drops ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D3000 = refFormCysticFibrosi.ChkBox_VITAMINS_D3000 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D5000 = refFormCysticFibrosi.ChkBox_VITAMINS_D5000 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D1000 = refFormCysticFibrosi.ChkBox_VITAMINS_D1000 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D2000 = refFormCysticFibrosi.ChkBox_VITAMINS_D2000 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D2000_2 = refFormCysticFibrosi.ChkBox_VITAMINS_D2000_2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D5000_2 = refFormCysticFibrosi.ChkBox_VITAMINS_D5000_2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D50000 = refFormCysticFibrosi.ChkBox_VITAMINS_D50000 ?? false;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions1 = refFormCysticFibrosi.VITAMINS_Directions1;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions2 = refFormCysticFibrosi.VITAMINS_Directions2;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions3 = refFormCysticFibrosi.VITAMINS_Directions3;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions4 = refFormCysticFibrosi.VITAMINS_Directions4;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions5 = refFormCysticFibrosi.VITAMINS_Directions5;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions1_Qty_TxtBox1 = refFormCysticFibrosi.VITAMINS_Directions1_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions2_Qty_TxtBox2 = refFormCysticFibrosi.VITAMINS_Directions2_Qty_TxtBox2;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions3_Qty_TxtBox3 = refFormCysticFibrosi.VITAMINS_Directions3_Qty_TxtBox3;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions4_Qty_TxtBox4 = refFormCysticFibrosi.VITAMINS_Directions4_Qty_TxtBox4;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions5_Qty_TxtBox5 = refFormCysticFibrosi.VITAMINS_Directions5_Qty_TxtBox5;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions1_Refills_TxtBox1 = refFormCysticFibrosi.VITAMINS_Directions1_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions2_Refills_TxtBox2 = refFormCysticFibrosi.VITAMINS_Directions2_Refills_TxtBox2;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions3_Refills_TxtBox3 = refFormCysticFibrosi.VITAMINS_Directions3_Refills_TxtBox3;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions3_Refills_TxtBox4 = refFormCysticFibrosi.VITAMINS_Directions3_Refills_TxtBox4;
                    refFormCysticFibrosisViewModel.VITAMINS_Directions3_Refills_TxtBox5 = refFormCysticFibrosi.VITAMINS_Directions3_Refills_TxtBox5;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Azithromycin = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Azithromycin ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Lansoprazole = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Lansoprazole ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Miralax = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Miralax ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Omeprazole = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Omeprazole ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Protonix = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Protonix ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Zantac = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Zantac ?? false;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength1 = refFormCysticFibrosi.ANTIBIOTICS_Strength1;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength2 = refFormCysticFibrosi.ANTIBIOTICS_Strength2;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength3 = refFormCysticFibrosi.ANTIBIOTICS_Strength3;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength4 = refFormCysticFibrosi.ANTIBIOTICS_Strength4;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength5 = refFormCysticFibrosi.ANTIBIOTICS_Strength5;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength6 = refFormCysticFibrosi.ANTIBIOTICS_Strength6;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions1 = refFormCysticFibrosi.ANTIBIOTICS_Directions1;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions2 = refFormCysticFibrosi.ANTIBIOTICS_Directions2;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions3 = refFormCysticFibrosi.ANTIBIOTICS_Directions3;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions4 = refFormCysticFibrosi.ANTIBIOTICS_Directions4;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions5 = refFormCysticFibrosi.ANTIBIOTICS_Directions5;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions6 = refFormCysticFibrosi.ANTIBIOTICS_Directions6;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox1 = refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox2 = refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox2;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox3 = refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox3;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox4 = refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox4;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox5 = refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox5;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox6 = refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox6;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox1 = refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox2 = refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox2;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox3 = refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox3;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox4 = refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox4;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox5 = refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox5;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox6 = refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox6;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Aerobika = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Aerobika ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Aeroeclipse_XL = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Aeroeclipse_XL ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Mobilaire = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Mobilaire ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Mobilaire_Filter = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Mobilaire_Filter ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Other1 = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Other1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Other2 = refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Other2 ?? false;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox1 = refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox2 = refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox2;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox3 = refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox3;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox4 = refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox4;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox5 = refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox5;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox1 = refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox2 = refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox2;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox3 = refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox3;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox4 = refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox4;
                    refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox5 = refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox5;
                    refFormCysticFibrosisViewModel.ChkBox_PARI_LC_plus = refFormCysticFibrosi.ChkBox_PARI_LC_plus ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PARI_Trek_S = refFormCysticFibrosi.ChkBox_PARI_Trek_S ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PARI_Vios_Pro = refFormCysticFibrosi.ChkBox_PARI_Vios_Pro ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_PARI_Vios_Pro_Filter = refFormCysticFibrosi.ChkBox_PARI_Vios_Pro_Filter ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_other = refFormCysticFibrosi.ChkBox_other ?? false;
                    refFormCysticFibrosisViewModel.PARI_LC_plus_Qty_TxtBox1 = refFormCysticFibrosi.PARI_LC_plus_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.PARI_Trek_Qty_TxtBox1 = refFormCysticFibrosi.PARI_Trek_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.PARI_Vios_Pro_Qty_TxtBox1 = refFormCysticFibrosi.PARI_Vios_Pro_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.PARI_Vios_Pro_Filter_Qty_TxtBox1 = refFormCysticFibrosi.PARI_Vios_Pro_Filter_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.Other_Qty_TxtBox1 = refFormCysticFibrosi.Other_Qty_TxtBox1;
                    refFormCysticFibrosisViewModel.PARI_LC_plus_Refills_TxtBox1 = refFormCysticFibrosi.PARI_LC_plus_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.PARI_Trek_Refills_TxtBox1 = refFormCysticFibrosi.PARI_Trek_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.PARI_Vios_Pro_Refills_TxtBox1 = refFormCysticFibrosi.PARI_Vios_Pro_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.PARI_Vios_Pro_Filter_Refills_TxtBox1 = refFormCysticFibrosi.PARI_Vios_Pro_Filter_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.Other_Refills_TxtBox1 = refFormCysticFibrosi.Other_Refills_TxtBox1;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_Kalydeco = refFormCysticFibrosi.ChkBox_CFTR_Kalydeco ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_56_Tablets = refFormCysticFibrosi.ChkBox_CFTR_56_Tablets ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_168_Tablets = refFormCysticFibrosi.ChkBox_CFTR_168_Tablets ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_56_Single_Dose_Packets1 = refFormCysticFibrosi.ChkBox_CFTR_56_Single_Dose_Packets1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_168_Single_Dose_Packets1 = refFormCysticFibrosi.ChkBox_CFTR_168_Single_Dose_Packets1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_56_Single_Dose_Packets2 = refFormCysticFibrosi.ChkBox_CFTR_56_Single_Dose_Packets2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_168_Single_Dose_Packets2 = refFormCysticFibrosi.ChkBox_CFTR_168_Single_Dose_Packets2 ?? false;
                    refFormCysticFibrosisViewModel.CFTR_List_mutations = refFormCysticFibrosi.CFTR_List_mutations;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_Orkambi1 = refFormCysticFibrosi.ChkBox_CFTR_Orkambi1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_F508del_mutationYes1 = refFormCysticFibrosi.ChkBox_CFTR_F508del_mutationYes1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_F508del_mutationNo1 = refFormCysticFibrosi.ChkBox_CFTR_F508del_mutationNo1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_112Tablets1 = refFormCysticFibrosi.ChkBox_CFTR_112Tablets1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_336Tablets1 = refFormCysticFibrosi.ChkBox_CFTR_336Tablets1 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_Orkambi2 = refFormCysticFibrosi.ChkBox_CFTR_Orkambi2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_F508del_mutationYes2 = refFormCysticFibrosi.ChkBox_CFTR_F508del_mutationYes2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_F508del_mutationNo2 = refFormCysticFibrosi.ChkBox_CFTR_F508del_mutationNo2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_112Tablets2 = refFormCysticFibrosi.ChkBox_CFTR_112Tablets2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_336Tablets2 = refFormCysticFibrosi.ChkBox_CFTR_336Tablets2 ?? false;
                    refFormCysticFibrosisViewModel.ChkBox_CFTR_Other = refFormCysticFibrosi.ChkBox_CFTR_Other ?? false;

                    refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormCysticFibrosisViewModel.IsSignatured = refFormCysticFibrosi.IsSignatured ?? false;

                    return View(refFormCysticFibrosisViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method CardiovascularReferralForm PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormCysticFibrosisViewModel());
        }

        [HttpPost]
        public JsonResult CysticFibrosisReferralForm(RefFormCysticFibrosisViewModel refFormCysticFibrosisViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormCysticFibrosisViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormCysticFibrosi refFormCysticFibrosi = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormCysticFibrosisViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormCysticFibrosi = _unitOfWork.RefFormCysticFibrosisRepository.GetSingle(t => t.RefFormCysticFibrosisId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormCysticFibrosi == null)
                {
                    refFormCysticFibrosi = new RefFormCysticFibrosi();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form
                refFormCysticFibrosi.RefFormCysticFibrosisId = refFormCysticFibrosisViewModel.RefFormCysticFibrosisId;
                refFormCysticFibrosi.ChkBox_CLINICAL_E84_0_Cystic_Fibrosis = refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_0_Cystic_Fibrosis;
                refFormCysticFibrosi.ChkBox_CLINICAL_E84_9_Cystic_Fibrosis = refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_9_Cystic_Fibrosis;
                refFormCysticFibrosi.ChkBox_CLINICAL_E84_11_Mecoium_ileus = refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_11_Mecoium_ileus;
                refFormCysticFibrosi.ChkBox_CLINICAL_E84_19_Cystic_Fibrosis = refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_19_Cystic_Fibrosis;
                refFormCysticFibrosi.ChkBox_CLINICAL_E84_8_Cystic_Fibrosis = refFormCysticFibrosisViewModel.ChkBox_CLINICAL_E84_8_Cystic_Fibrosis;
                refFormCysticFibrosi.ChkBox_CLINICAL_B96_5_pseudomonas = refFormCysticFibrosisViewModel.ChkBox_CLINICAL_B96_5_pseudomonas;
                refFormCysticFibrosi.ChkBox_CLINICAL_Other = refFormCysticFibrosisViewModel.ChkBox_CLINICAL_Other;
                refFormCysticFibrosi.CLINICAL_Other = refFormCysticFibrosisViewModel.CLINICAL_Other;
                refFormCysticFibrosi.CLINICAL_Drug_Allergies = refFormCysticFibrosisViewModel.CLINICAL_Drug_Allergies;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Albuterol = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Albuterol;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Bethkis = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Bethkis;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Budesonide = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Budesonide;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Cayston = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Cayston;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Colistin = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Colistin;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Hyper_Sal = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Hyper_Sal;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Kitabis_Pak = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Kitabis_Pak;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Levalbuterol = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Levalbuterol;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Mucomyst = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Mucomyst;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_Pulmozyme = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_Pulmozyme;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_TOBI = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_TOBI;
                refFormCysticFibrosi.ChkBox_MEDICATION_INHALATIONS_TOBI_Podhaler = refFormCysticFibrosisViewModel.ChkBox_MEDICATION_INHALATIONS_TOBI_Podhaler;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_083__3mL_vial_ = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_083__3mL_vial_;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_5__2_5mg_0_5mL_ = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_5__2_5mg_0_5mL_;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Ventolin = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Ventolin;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Proair = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Proair;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_25mg_2ml = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_25mg_2ml;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_5mg_2ml = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_5mg_2ml;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_75mg = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_75mg;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_150mg = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_150mg;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_5ml_Sterile_H2O = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_5ml_Sterile_H2O;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Syringe = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Syringe;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Sodium_chloride = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Sodium_chloride;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_3___4ml_ = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_3___4ml_;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_7___4ml_ = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_7___4ml_;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_31mg_3ml = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_31mg_3ml;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_0_63mg_3ml = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_0_63mg_3ml;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_1_25mg_3ml = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_1_25mg_3ml;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_10_ = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_10_;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_20__inhalation = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_20__inhalation;
                refFormCysticFibrosi.ChkBox_DOSE_STRENGTH_Bd_syringes = refFormCysticFibrosisViewModel.ChkBox_DOSE_STRENGTH_Bd_syringes;
                refFormCysticFibrosi.Directions1 = refFormCysticFibrosisViewModel.Directions1;
                refFormCysticFibrosi.Directions1_Qty = refFormCysticFibrosisViewModel.Directions1_Qty;
                refFormCysticFibrosi.Directions1_Refills = refFormCysticFibrosisViewModel.Directions1_Refills;
                refFormCysticFibrosi.Radio1_28_days_on_28_days_off = refFormCysticFibrosisViewModel.Radio1_28_days_on_28_days_off;
                refFormCysticFibrosi.Radio1_continuous = refFormCysticFibrosisViewModel.Radio1_continuous;
                refFormCysticFibrosi.Radio1_Qty_TxtBox = refFormCysticFibrosisViewModel.Radio1_Qty_TxtBox;
                refFormCysticFibrosi.Radio1_Refills_TxtBox = refFormCysticFibrosisViewModel.Radio1_Refills_TxtBox;
                refFormCysticFibrosi.Directions2 = refFormCysticFibrosisViewModel.Directions2;
                refFormCysticFibrosi.Directions2_Qty = refFormCysticFibrosisViewModel.Directions2_Qty;
                refFormCysticFibrosi.Directions2_Refills = refFormCysticFibrosisViewModel.Directions2_Refills;
                refFormCysticFibrosi.Directions2_28_days_on_28_days_off_Qty = refFormCysticFibrosisViewModel.Directions2_28_days_on_28_days_off_Qty;
                refFormCysticFibrosi.Directions2_28_days_on_28_days_off_Refills = refFormCysticFibrosisViewModel.Directions2_28_days_on_28_days_off_Refills;
                refFormCysticFibrosi.ChkBox_once_daily1 = refFormCysticFibrosisViewModel.ChkBox_once_daily1;
                refFormCysticFibrosi.ChkBox_once_twice1 = refFormCysticFibrosisViewModel.ChkBox_once_twice1;
                refFormCysticFibrosi.Radio2_28_days_on_28_days_off = refFormCysticFibrosisViewModel.Radio2_28_days_on_28_days_off;
                refFormCysticFibrosi.Radio2_continuous = refFormCysticFibrosisViewModel.Radio2_continuous;
                refFormCysticFibrosi.Radio2_Qty_TxtBox = refFormCysticFibrosisViewModel.Radio2_Qty_TxtBox;
                refFormCysticFibrosi.Radio2_Refills_TxtBox = refFormCysticFibrosisViewModel.Radio2_Refills_TxtBox;
                refFormCysticFibrosi.Directions3 = refFormCysticFibrosisViewModel.Directions3;
                refFormCysticFibrosi.Directions3_Qty = refFormCysticFibrosisViewModel.Directions3_Qty;
                refFormCysticFibrosi.Directions3_Refills = refFormCysticFibrosisViewModel.Directions3_Refills;
                refFormCysticFibrosi.Radio3_28_days_on_28_days_off = refFormCysticFibrosisViewModel.Radio3_28_days_on_28_days_off;
                refFormCysticFibrosi.Radio3_continuous = refFormCysticFibrosisViewModel.Radio3_continuous;
                refFormCysticFibrosi.Radio3_Qty_TxtBox = refFormCysticFibrosisViewModel.Radio3_Qty_TxtBox;
                refFormCysticFibrosi.Radio3_Refills_TxtBox = refFormCysticFibrosisViewModel.Radio3_Refills_TxtBox;
                refFormCysticFibrosi.Directions4 = refFormCysticFibrosisViewModel.Directions4;
                refFormCysticFibrosi.Directions4_Qty = refFormCysticFibrosisViewModel.Directions4_Qty;
                refFormCysticFibrosi.Directions4_Refills = refFormCysticFibrosisViewModel.Directions4_Refills;
                refFormCysticFibrosi.Directions5 = refFormCysticFibrosisViewModel.Directions5;
                refFormCysticFibrosi.Directions5_Qty = refFormCysticFibrosisViewModel.Directions5_Qty;
                refFormCysticFibrosi.Directions5_Refills = refFormCysticFibrosisViewModel.Directions5_Refills;
                refFormCysticFibrosi.ChkBox_once_daily2 = refFormCysticFibrosisViewModel.ChkBox_once_daily2;
                refFormCysticFibrosi.ChkBox_once_twice2 = refFormCysticFibrosisViewModel.ChkBox_once_twice2;
                refFormCysticFibrosi.Pulmozym_Qty = refFormCysticFibrosisViewModel.Pulmozym_Qty;
                refFormCysticFibrosi.Pulmozym_Refills = refFormCysticFibrosisViewModel.Pulmozym_Refills;
                refFormCysticFibrosi.Radio4_28_days_on_28_days_off = refFormCysticFibrosisViewModel.Radio4_28_days_on_28_days_off;
                refFormCysticFibrosi.Radio4_continuous = refFormCysticFibrosisViewModel.Radio4_continuous;
                refFormCysticFibrosi.Radio4_Qty_TxtBox = refFormCysticFibrosisViewModel.Radio4_Qty_TxtBox;
                refFormCysticFibrosi.Radio4_Refills_TxtBox = refFormCysticFibrosisViewModel.Radio4_Refills_TxtBox;
                refFormCysticFibrosi.Radio5_28_days_on_28_days_off = refFormCysticFibrosisViewModel.Radio5_28_days_on_28_days_off;
                refFormCysticFibrosi.Radio5_continuous = refFormCysticFibrosisViewModel.Radio5_continuous;
                refFormCysticFibrosi.Radio5_Qty_TxtBox = refFormCysticFibrosisViewModel.Radio5_Qty_TxtBox;
                refFormCysticFibrosi.Radio5_Refills_TxtBox = refFormCysticFibrosisViewModel.Radio5_Refills_TxtBox;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Creon = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Creon;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Pancreaze = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Pancreaze;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Pertzye = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Pertzye;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Viokace = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Viokace;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_Zenpep = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_Zenpep;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_3000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_3000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_6000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_6000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_12000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_12000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_24000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_24000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_36000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_36000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_4200u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_4200u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_10500u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_10500u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_16800u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_16800u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_21000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_21000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_4000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_4000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_16000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_16000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_8000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_8000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_10440u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_10440u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_20880u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_20880u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_3000u1 = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_3000u1;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_5000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_5000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_10000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_10000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_15000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_15000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_20000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_20000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_25000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_25000u;
                refFormCysticFibrosi.ChkBox_PANCREATIC_ENZYMES_40000u = refFormCysticFibrosisViewModel.ChkBox_PANCREATIC_ENZYMES_40000u;
                refFormCysticFibrosi.PANCREATIC_ENZYMES___of_caps_per_meals = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES___of_caps_per_meals;
                refFormCysticFibrosi.PANCREATIC_ENZYMES___of_caps_per_snacks = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES___of_caps_per_snacks;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Daily_max = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Daily_max;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_advise__of_consumed_meals = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_advise__of_consumed_meals;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox1 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox1;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox2 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox2;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox3 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox3;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox4 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox4;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox5 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox5;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Qty_TxtBox6 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Qty_TxtBox6;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox1 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox1;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox2 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox2;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox3 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox3;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox4 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox4;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox5 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox5;
                refFormCysticFibrosi.PANCREATIC_ENZYMES_Refills_TxtBox6 = refFormCysticFibrosisViewModel.PANCREATIC_ENZYMES_Refills_TxtBox6;
                refFormCysticFibrosi.ChkBox_VITAMINS_Aquadeks = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Aquadeks;
                refFormCysticFibrosi.ChkBox_VITAMINS_Calcium_carbonate = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Calcium_carbonate;
                refFormCysticFibrosi.ChkBox_VITAMINS_DEKAS = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_DEKAS;
                refFormCysticFibrosi.ChkBox_VITAMINS_MVW_Complete = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_MVW_Complete;
                refFormCysticFibrosi.ChkBox_VITAMINS_Vitamin_D = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Vitamin_D;
                refFormCysticFibrosi.ChkBox_VITAMINS_Liquid = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Liquid;
                refFormCysticFibrosi.ChkBox_VITAMINS_Chew_Tab = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Chew_Tab;
                refFormCysticFibrosi.ChkBox_VITAMINS_Soft_Gels = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Soft_Gels;
                refFormCysticFibrosi.ChkBox_VITAMINS_1250mg = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_1250mg;
                refFormCysticFibrosi.ChkBox_VITAMINS_Liquid2 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Liquid2;
                refFormCysticFibrosi.ChkBox_VITAMINS_Capsule = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Capsule;
                refFormCysticFibrosi.ChkBox_VITAMINS_ChewTab2 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_ChewTab2;
                refFormCysticFibrosi.ChkBox_VITAMINS_Soft_Gels2 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Soft_Gels2;
                refFormCysticFibrosi.ChkBox_VITAMINS_Drops = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_Drops;
                refFormCysticFibrosi.ChkBox_VITAMINS_D3000 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D3000;
                refFormCysticFibrosi.ChkBox_VITAMINS_D5000 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D5000;
                refFormCysticFibrosi.ChkBox_VITAMINS_D1000 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D1000;
                refFormCysticFibrosi.ChkBox_VITAMINS_D2000 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D2000;
                refFormCysticFibrosi.ChkBox_VITAMINS_D2000_2 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D2000_2;
                refFormCysticFibrosi.ChkBox_VITAMINS_D5000_2 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D5000_2;
                refFormCysticFibrosi.ChkBox_VITAMINS_D50000 = refFormCysticFibrosisViewModel.ChkBox_VITAMINS_D50000;
                refFormCysticFibrosi.VITAMINS_Directions1 = refFormCysticFibrosisViewModel.VITAMINS_Directions1;
                refFormCysticFibrosi.VITAMINS_Directions2 = refFormCysticFibrosisViewModel.VITAMINS_Directions2;
                refFormCysticFibrosi.VITAMINS_Directions3 = refFormCysticFibrosisViewModel.VITAMINS_Directions3;
                refFormCysticFibrosi.VITAMINS_Directions4 = refFormCysticFibrosisViewModel.VITAMINS_Directions4;
                refFormCysticFibrosi.VITAMINS_Directions5 = refFormCysticFibrosisViewModel.VITAMINS_Directions5;
                refFormCysticFibrosi.VITAMINS_Directions1_Qty_TxtBox1 = refFormCysticFibrosisViewModel.VITAMINS_Directions1_Qty_TxtBox1;
                refFormCysticFibrosi.VITAMINS_Directions2_Qty_TxtBox2 = refFormCysticFibrosisViewModel.VITAMINS_Directions2_Qty_TxtBox2;
                refFormCysticFibrosi.VITAMINS_Directions3_Qty_TxtBox3 = refFormCysticFibrosisViewModel.VITAMINS_Directions3_Qty_TxtBox3;
                refFormCysticFibrosi.VITAMINS_Directions4_Qty_TxtBox4 = refFormCysticFibrosisViewModel.VITAMINS_Directions4_Qty_TxtBox4;
                refFormCysticFibrosi.VITAMINS_Directions5_Qty_TxtBox5 = refFormCysticFibrosisViewModel.VITAMINS_Directions5_Qty_TxtBox5;
                refFormCysticFibrosi.VITAMINS_Directions1_Refills_TxtBox1 = refFormCysticFibrosisViewModel.VITAMINS_Directions1_Refills_TxtBox1;
                refFormCysticFibrosi.VITAMINS_Directions2_Refills_TxtBox2 = refFormCysticFibrosisViewModel.VITAMINS_Directions2_Refills_TxtBox2;
                refFormCysticFibrosi.VITAMINS_Directions3_Refills_TxtBox3 = refFormCysticFibrosisViewModel.VITAMINS_Directions3_Refills_TxtBox3;
                refFormCysticFibrosi.VITAMINS_Directions3_Refills_TxtBox4 = refFormCysticFibrosisViewModel.VITAMINS_Directions3_Refills_TxtBox4;
                refFormCysticFibrosi.VITAMINS_Directions3_Refills_TxtBox5 = refFormCysticFibrosisViewModel.VITAMINS_Directions3_Refills_TxtBox5;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Azithromycin = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Azithromycin;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Lansoprazole = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Lansoprazole;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Miralax = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Miralax;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Omeprazole = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Omeprazole;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Protonix = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Protonix;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_Zantac = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_Zantac;
                refFormCysticFibrosi.ANTIBIOTICS_Strength1 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength1;
                refFormCysticFibrosi.ANTIBIOTICS_Strength2 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength2;
                refFormCysticFibrosi.ANTIBIOTICS_Strength3 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength3;
                refFormCysticFibrosi.ANTIBIOTICS_Strength4 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength4;
                refFormCysticFibrosi.ANTIBIOTICS_Strength5 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength5;
                refFormCysticFibrosi.ANTIBIOTICS_Strength6 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Strength6;
                refFormCysticFibrosi.ANTIBIOTICS_Directions1 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions1;
                refFormCysticFibrosi.ANTIBIOTICS_Directions2 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions2;
                refFormCysticFibrosi.ANTIBIOTICS_Directions3 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions3;
                refFormCysticFibrosi.ANTIBIOTICS_Directions4 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions4;
                refFormCysticFibrosi.ANTIBIOTICS_Directions5 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions5;
                refFormCysticFibrosi.ANTIBIOTICS_Directions6 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Directions6;
                refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox1 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox1;
                refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox2 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox2;
                refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox3 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox3;
                refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox4 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox4;
                refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox5 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox5;
                refFormCysticFibrosi.ANTIBIOTICS_Qty_TxtBox6 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Qty_TxtBox6;
                refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox1 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox1;
                refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox2 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox2;
                refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox3 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox3;
                refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox4 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox4;
                refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox5 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox5;
                refFormCysticFibrosi.ANTIBIOTICS_Refills_TxtBox6 = refFormCysticFibrosisViewModel.ANTIBIOTICS_Refills_TxtBox6;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Aerobika = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Aerobika;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Aeroeclipse_XL = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Aeroeclipse_XL;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Mobilaire = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Mobilaire;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Mobilaire_Filter = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Mobilaire_Filter;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Other1 = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Other1;
                refFormCysticFibrosi.ChkBox_ANTIBIOTICS_DME_Other2 = refFormCysticFibrosisViewModel.ChkBox_ANTIBIOTICS_DME_Other2;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox1 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox1;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox2 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox2;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox3 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox3;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox4 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox4;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Qty_TxtBox5 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Qty_TxtBox5;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox1 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox1;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox2 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox2;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox3 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox3;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox4 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox4;
                refFormCysticFibrosi.ANTIBIOTICS_DME_Refills_TxtBox5 = refFormCysticFibrosisViewModel.ANTIBIOTICS_DME_Refills_TxtBox5;
                refFormCysticFibrosi.ChkBox_PARI_LC_plus = refFormCysticFibrosisViewModel.ChkBox_PARI_LC_plus;
                refFormCysticFibrosi.ChkBox_PARI_Trek_S = refFormCysticFibrosisViewModel.ChkBox_PARI_Trek_S;
                refFormCysticFibrosi.ChkBox_PARI_Vios_Pro = refFormCysticFibrosisViewModel.ChkBox_PARI_Vios_Pro;
                refFormCysticFibrosi.ChkBox_PARI_Vios_Pro_Filter = refFormCysticFibrosisViewModel.ChkBox_PARI_Vios_Pro_Filter;
                refFormCysticFibrosi.ChkBox_other = refFormCysticFibrosisViewModel.ChkBox_other;
                refFormCysticFibrosi.PARI_LC_plus_Qty_TxtBox1 = refFormCysticFibrosisViewModel.PARI_LC_plus_Qty_TxtBox1;
                refFormCysticFibrosi.PARI_Trek_Qty_TxtBox1 = refFormCysticFibrosisViewModel.PARI_Trek_Qty_TxtBox1;
                refFormCysticFibrosi.PARI_Vios_Pro_Qty_TxtBox1 = refFormCysticFibrosisViewModel.PARI_Vios_Pro_Qty_TxtBox1;
                refFormCysticFibrosi.PARI_Vios_Pro_Filter_Qty_TxtBox1 = refFormCysticFibrosisViewModel.PARI_Vios_Pro_Filter_Qty_TxtBox1;
                refFormCysticFibrosi.Other_Qty_TxtBox1 = refFormCysticFibrosisViewModel.Other_Qty_TxtBox1;
                refFormCysticFibrosi.PARI_LC_plus_Refills_TxtBox1 = refFormCysticFibrosisViewModel.PARI_LC_plus_Refills_TxtBox1;
                refFormCysticFibrosi.PARI_Trek_Refills_TxtBox1 = refFormCysticFibrosisViewModel.PARI_Trek_Refills_TxtBox1;
                refFormCysticFibrosi.PARI_Vios_Pro_Refills_TxtBox1 = refFormCysticFibrosisViewModel.PARI_Vios_Pro_Refills_TxtBox1;
                refFormCysticFibrosi.PARI_Vios_Pro_Filter_Refills_TxtBox1 = refFormCysticFibrosisViewModel.PARI_Vios_Pro_Filter_Refills_TxtBox1;
                refFormCysticFibrosi.Other_Refills_TxtBox1 = refFormCysticFibrosisViewModel.Other_Refills_TxtBox1;
                refFormCysticFibrosi.ChkBox_CFTR_Kalydeco = refFormCysticFibrosisViewModel.ChkBox_CFTR_Kalydeco;
                refFormCysticFibrosi.ChkBox_CFTR_56_Tablets = refFormCysticFibrosisViewModel.ChkBox_CFTR_56_Tablets;
                refFormCysticFibrosi.ChkBox_CFTR_168_Tablets = refFormCysticFibrosisViewModel.ChkBox_CFTR_168_Tablets;
                refFormCysticFibrosi.ChkBox_CFTR_56_Single_Dose_Packets1 = refFormCysticFibrosisViewModel.ChkBox_CFTR_56_Single_Dose_Packets1;
                refFormCysticFibrosi.ChkBox_CFTR_168_Single_Dose_Packets1 = refFormCysticFibrosisViewModel.ChkBox_CFTR_168_Single_Dose_Packets1;
                refFormCysticFibrosi.ChkBox_CFTR_56_Single_Dose_Packets2 = refFormCysticFibrosisViewModel.ChkBox_CFTR_56_Single_Dose_Packets2;
                refFormCysticFibrosi.ChkBox_CFTR_168_Single_Dose_Packets2 = refFormCysticFibrosisViewModel.ChkBox_CFTR_168_Single_Dose_Packets2;
                refFormCysticFibrosi.CFTR_List_mutations = refFormCysticFibrosisViewModel.CFTR_List_mutations;
                refFormCysticFibrosi.ChkBox_CFTR_Orkambi1 = refFormCysticFibrosisViewModel.ChkBox_CFTR_Orkambi1;
                refFormCysticFibrosi.ChkBox_CFTR_F508del_mutationYes1 = refFormCysticFibrosisViewModel.ChkBox_CFTR_F508del_mutationYes1;
                refFormCysticFibrosi.ChkBox_CFTR_F508del_mutationNo1 = refFormCysticFibrosisViewModel.ChkBox_CFTR_F508del_mutationNo1;
                refFormCysticFibrosi.ChkBox_CFTR_112Tablets1 = refFormCysticFibrosisViewModel.ChkBox_CFTR_112Tablets1;
                refFormCysticFibrosi.ChkBox_CFTR_336Tablets1 = refFormCysticFibrosisViewModel.ChkBox_CFTR_336Tablets1;
                refFormCysticFibrosi.ChkBox_CFTR_Orkambi2 = refFormCysticFibrosisViewModel.ChkBox_CFTR_Orkambi2;
                refFormCysticFibrosi.ChkBox_CFTR_F508del_mutationYes2 = refFormCysticFibrosisViewModel.ChkBox_CFTR_F508del_mutationYes2;
                refFormCysticFibrosi.ChkBox_CFTR_F508del_mutationNo2 = refFormCysticFibrosisViewModel.ChkBox_CFTR_F508del_mutationNo2;
                refFormCysticFibrosi.ChkBox_CFTR_112Tablets2 = refFormCysticFibrosisViewModel.ChkBox_CFTR_112Tablets2;
                refFormCysticFibrosi.ChkBox_CFTR_336Tablets2 = refFormCysticFibrosisViewModel.ChkBox_CFTR_336Tablets2;
                refFormCysticFibrosi.ChkBox_CFTR_Other = refFormCysticFibrosisViewModel.ChkBox_CFTR_Other;

                refFormCysticFibrosi.Date1 = refFormCysticFibrosisViewModel.Date1;
                refFormCysticFibrosi.Date2 = refFormCysticFibrosisViewModel.Date2;

                refFormCysticFibrosi.IsSignatured = refFormCysticFibrosisViewModel.IsSignatured;

                refFormCysticFibrosi.ModifiedBy = CurrentUser.UserId;
                refFormCysticFibrosi.ModifiedOn = DateTime.UtcNow;

                if (IsEdit)
                {
                    _unitOfWork.RefFormCysticFibrosisRepository.Update(refFormCysticFibrosi);
                    AuditLogger.AuditTracker("Edit CysticFibrosisReferralForm", "A  CysticFibrosisReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormCysticFibrosi.CreatedBy = CurrentUser.UserId;
                    refFormCysticFibrosi.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormCysticFibrosisRepository.Insert(refFormCysticFibrosi);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New CysticFibrosisReferralForm", "A new CysticFibrosisReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormCysticFibrosisViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormCysticFibrosi.RefFormCysticFibrosisId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save CysticFibrosis Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method CysticFibrosisReferralForm PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save CysticFibrosis Referral Form Unsuccessfully.", success = false });
        }

        public ActionResult CysticFibrosisReferralForm_1(int PhysicianPortalPatientId)
        {

            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cystic Fibrosis Referral Form (1)"));
            return RedirectToAction("CysticFibrosisReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 9 });

        }
        //ggca infectious referral form
        public ActionResult ggca_infectious_referral_form(int PhysicianPortalPatientId)
        {

            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca infectious referral form"));
            return RedirectToAction("HivAidsReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 52 });

        }
        //laca infectious referral form
        public ActionResult laca_infectious_referral_form(int PhysicianPortalPatientId)
        {

            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Laca infectious referral form"));
            return RedirectToAction("HivAidsReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 53 });

        }
        //HivAids.......................................
        public ActionResult HivAidsReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Hiv Aids Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 8;
                }
                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormHivAidViewModel refFormHivAidViewModel = new RefFormHivAidViewModel();

                //Set ReferralFormId
                refFormHivAidViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormHivAidViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormHivAidViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormHivAidViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormHivAidViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormHivAidViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormHivAidViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormHivAidViewModel.PhysicianFullName = physician.FullName;
                        refFormHivAidViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormHivAidViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormHivAidViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormHivAidViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormHivAidViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormHivAidViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormHivAidViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }
                }

                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                RefFormHivAid refFormHivAid = null;

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormHivAid = _unitOfWork.RefFormHivAidsRepository.GetSingle(t => t.RefFormHivAidsId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormHivAid == null) refFormHivAid = new RefFormHivAid();

                refFormHivAidViewModel.RefFormHivAidsId = refFormHivAid.RefFormHivAidsId;

                //Form
                refFormHivAidViewModel.FormDate = refFormHivAid.FormDate;
                refFormHivAidViewModel.FormNeedsByDate = refFormHivAid.FormNeedsByDate;
                refFormHivAidViewModel.ChkBox_ShipToPatient = refFormHivAid.ChkBox_ShipToPatient;
                refFormHivAidViewModel.ChkBox_ShipToOffice = refFormHivAid.ChkBox_ShipToOffice;
                refFormHivAidViewModel.ChkBox_ShipToOther = refFormHivAid.ChkBox_ShipToOther;
                refFormHivAidViewModel.TxtBox_ShipToOther = refFormHivAid.TxtBox_ShipToOther;

                //Diagnosis:
                refFormHivAidViewModel.B20_HIV_AIDS = refFormHivAid.B20_HIV_AIDS;
                refFormHivAidViewModel.B18_1_Chronic_Hepatitis_B = refFormHivAid.B18_1_Chronic_Hepatitis_B;
                refFormHivAidViewModel.B18_2_Chronic_Hepatitis_C = refFormHivAid.B18_2_Chronic_Hepatitis_C;
                refFormHivAidViewModel.ChkBox_DiagnosisOther = refFormHivAid.ChkBox_DiagnosisOther;
                refFormHivAidViewModel.TxtBox_DiagnosisOther = refFormHivAid.TxtBox_DiagnosisOther;

                //Drug Allergies:
                refFormHivAidViewModel.DrugAllergiesTxt = refFormHivAid.DrugAllergiesTxt;
                refFormHivAidViewModel.CD_4_T_cell = refFormHivAid.CD_4_T_cell;
                refFormHivAidViewModel.HIV_RNA = refFormHivAid.HIV_RNA;
                refFormHivAidViewModel.HCV_genotype = refFormHivAid.HCV_genotype;
                refFormHivAidViewModel.Viral_Load = refFormHivAid.Viral_Load;
                refFormHivAidViewModel.ALT = refFormHivAid.ALT;
                refFormHivAidViewModel.Liver_Biopsy_Results = refFormHivAid.Liver_Biopsy_Results;
                refFormHivAidViewModel.Weight = refFormHivAid.Weight;
                refFormHivAidViewModel.BLOOD_RESULTS_Date_Drawn = refFormHivAid.BLOOD_RESULTS_Date_Drawn;
                refFormHivAidViewModel.Hgb_Hct = refFormHivAid.Hgb_Hct;
                refFormHivAidViewModel.WBC = refFormHivAid.WBC;

                //PRESCRIPTION INFORMATION
                //NRTIs/NNRTIs
                refFormHivAidViewModel.ChkBox_Edurant = refFormHivAid.ChkBox_Edurant;
                refFormHivAidViewModel.TxtBox_Edurant1 = refFormHivAid.TxtBox_Edurant1;
                refFormHivAidViewModel.TxtBox_Edurant2 = refFormHivAid.TxtBox_Edurant2;
                refFormHivAidViewModel.TxtBox_Edurant_Quantity = refFormHivAid.TxtBox_Edurant_Quantity;
                refFormHivAidViewModel.TxtBox_Edurant_Refill = refFormHivAid.TxtBox_Edurant_Refill;
                refFormHivAidViewModel.ChkBox_Emtriva = refFormHivAid.ChkBox_Emtriva;
                refFormHivAidViewModel.TxtBox_Emtriva1 = refFormHivAid.TxtBox_Emtriva1;
                refFormHivAidViewModel.TxtBox_Emtriva2 = refFormHivAid.TxtBox_Emtriva2;
                refFormHivAidViewModel.TxtBox_Emtriva_Quantity = refFormHivAid.TxtBox_Emtriva_Quantity;
                refFormHivAidViewModel.TxtBox_Emtriva_Refill = refFormHivAid.TxtBox_Emtriva_Refill;
                refFormHivAidViewModel.ChkBox_Epivir = refFormHivAid.ChkBox_Epivir;
                refFormHivAidViewModel.TxtBox_Epivir1 = refFormHivAid.TxtBox_Epivir1;
                refFormHivAidViewModel.TxtBox_Epivir2 = refFormHivAid.TxtBox_Epivir2;
                refFormHivAidViewModel.TxtBox_Epivir_Quantity = refFormHivAid.TxtBox_Epivir_Quantity;
                refFormHivAidViewModel.TxtBox_Epivir_Refill = refFormHivAid.TxtBox_Epivir_Refill;
                refFormHivAidViewModel.ChkBox_Intelence = refFormHivAid.ChkBox_Intelence;
                refFormHivAidViewModel.TxtBox_Intelence1 = refFormHivAid.TxtBox_Intelence1;
                refFormHivAidViewModel.TxtBox_Intelence2 = refFormHivAid.TxtBox_Intelence2;
                refFormHivAidViewModel.TxtBox_Intelence_Quantity = refFormHivAid.TxtBox_Intelence_Quantity;
                refFormHivAidViewModel.TxtBox_Intelence_Refill = refFormHivAid.TxtBox_Intelence_Refill;
                refFormHivAidViewModel.ChkBox_Resciptor = refFormHivAid.ChkBox_Resciptor;
                refFormHivAidViewModel.TxtBox_Resciptor1 = refFormHivAid.TxtBox_Resciptor1;
                refFormHivAidViewModel.TxtBox_Resciptor2 = refFormHivAid.TxtBox_Resciptor2;
                refFormHivAidViewModel.TxtBox_Resciptor_Quantity = refFormHivAid.TxtBox_Resciptor_Quantity;
                refFormHivAidViewModel.TxtBox_Resciptor_Refill = refFormHivAid.TxtBox_Resciptor_Refill;
                refFormHivAidViewModel.ChkBox_Retrovir = refFormHivAid.ChkBox_Retrovir;
                refFormHivAidViewModel.TxtBox_Retrovir1 = refFormHivAid.TxtBox_Retrovir1;
                refFormHivAidViewModel.TxtBox_Retrovir2 = refFormHivAid.TxtBox_Retrovir2;
                refFormHivAidViewModel.TxtBox_Retrovir_Quantity = refFormHivAid.TxtBox_Retrovir_Quantity;
                refFormHivAidViewModel.TxtBox_Retrovir_Refill = refFormHivAid.TxtBox_Retrovir_Refill;
                refFormHivAidViewModel.ChkBox_Sustiva = refFormHivAid.ChkBox_Sustiva;
                refFormHivAidViewModel.TxtBox_Sustiva1 = refFormHivAid.TxtBox_Sustiva1;
                refFormHivAidViewModel.TxtBox_Sustiva2 = refFormHivAid.TxtBox_Sustiva2;
                refFormHivAidViewModel.TxtBox_Sustiva_Quantity = refFormHivAid.TxtBox_Sustiva_Quantity;
                refFormHivAidViewModel.TxtBox_Sustiva_Refill = refFormHivAid.TxtBox_Sustiva_Refill;
                refFormHivAidViewModel.ChkBox_Videx = refFormHivAid.ChkBox_Videx;
                refFormHivAidViewModel.TxtBox_Videx1 = refFormHivAid.TxtBox_Videx1;
                refFormHivAidViewModel.TxtBox_Videx2 = refFormHivAid.TxtBox_Videx2;
                refFormHivAidViewModel.TxtBox_Videx_Quantity = refFormHivAid.TxtBox_Videx_Quantity;
                refFormHivAidViewModel.TxtBox_Videx_Refill = refFormHivAid.TxtBox_Videx_Refill;
                refFormHivAidViewModel.ChkBox_Viramune = refFormHivAid.ChkBox_Viramune;
                refFormHivAidViewModel.TxtBox_Viramune1 = refFormHivAid.TxtBox_Viramune1;
                refFormHivAidViewModel.TxtBox_Viramune2 = refFormHivAid.TxtBox_Viramune2;
                refFormHivAidViewModel.TxtBox_Viramune_Quantity = refFormHivAid.TxtBox_Viramune_Quantity;
                refFormHivAidViewModel.TxtBox_Viramune_Refill = refFormHivAid.TxtBox_Viramune_Refill;
                refFormHivAidViewModel.ChkBox_Viread = refFormHivAid.ChkBox_Viread;
                refFormHivAidViewModel.TxtBox_Viread1 = refFormHivAid.TxtBox_Viread1;
                refFormHivAidViewModel.TxtBox_Viread2 = refFormHivAid.TxtBox_Viread2;
                refFormHivAidViewModel.TxtBox_Viread_Quantity = refFormHivAid.TxtBox_Viread_Quantity;
                refFormHivAidViewModel.TxtBox_Viread_Refill = refFormHivAid.TxtBox_Viread_Refill;
                refFormHivAidViewModel.ChkBox_Zerit = refFormHivAid.ChkBox_Zerit;
                refFormHivAidViewModel.TxtBox_Zerit1 = refFormHivAid.TxtBox_Zerit1;
                refFormHivAidViewModel.TxtBox_Zerit2 = refFormHivAid.TxtBox_Zerit2;
                refFormHivAidViewModel.TxtBox_Zerit_Quantity = refFormHivAid.TxtBox_Zerit_Quantity;
                refFormHivAidViewModel.TxtBox_Zerit_Refill = refFormHivAid.TxtBox_Zerit_Refill;
                refFormHivAidViewModel.ChkBox_Ziagen = refFormHivAid.ChkBox_Ziagen;
                refFormHivAidViewModel.TxtBox_Ziagen1 = refFormHivAid.TxtBox_Ziagen1;
                refFormHivAidViewModel.TxtBox_Ziagen2 = refFormHivAid.TxtBox_Ziagen2;
                refFormHivAidViewModel.TxtBox_Ziagen_Quantity = refFormHivAid.TxtBox_Ziagen_Quantity;
                refFormHivAidViewModel.TxtBox_Ziagen_Refill = refFormHivAid.TxtBox_Ziagen_Refill;

                //Protease Inhibitors
                refFormHivAidViewModel.ChkBox_Aptivus = refFormHivAid.ChkBox_Aptivus;
                refFormHivAidViewModel.TxtBox_Aptivus1 = refFormHivAid.TxtBox_Aptivus1;
                refFormHivAidViewModel.TxtBox_Aptivus2 = refFormHivAid.TxtBox_Aptivus2;
                refFormHivAidViewModel.TxtBox_Aptivus_Quantity = refFormHivAid.TxtBox_Aptivus_Quantity;
                refFormHivAidViewModel.TxtBox_Aptivus_Refill = refFormHivAid.TxtBox_Aptivus_Refill;
                refFormHivAidViewModel.ChkBox_Invirase = refFormHivAid.ChkBox_Invirase;
                refFormHivAidViewModel.TxtBox_Invirase1 = refFormHivAid.TxtBox_Invirase1;
                refFormHivAidViewModel.TxtBox_Invirase2 = refFormHivAid.TxtBox_Invirase2;
                refFormHivAidViewModel.TxtBox_Invirase_Quantity = refFormHivAid.TxtBox_Invirase_Quantity;
                refFormHivAidViewModel.TxtBox_Invirase_Refill = refFormHivAid.TxtBox_Invirase_Refill;
                refFormHivAidViewModel.ChkBox_Kaletra = refFormHivAid.ChkBox_Kaletra;
                refFormHivAidViewModel.TxtBox_Kaletra1 = refFormHivAid.TxtBox_Kaletra1;
                refFormHivAidViewModel.TxtBox_Kaletra2 = refFormHivAid.TxtBox_Kaletra2;
                refFormHivAidViewModel.TxtBox_Kaletra_Quantity = refFormHivAid.TxtBox_Kaletra_Quantity;
                refFormHivAidViewModel.TxtBox_Kaletra_Refill = refFormHivAid.TxtBox_Kaletra_Refill;
                refFormHivAidViewModel.ChkBox_Lexiva = refFormHivAid.ChkBox_Lexiva;
                refFormHivAidViewModel.TxtBox_Lexiva1 = refFormHivAid.TxtBox_Lexiva1;
                refFormHivAidViewModel.TxtBox_Lexiva2 = refFormHivAid.TxtBox_Lexiva2;
                refFormHivAidViewModel.TxtBox_Lexiva_Quantity = refFormHivAid.TxtBox_Lexiva_Quantity;
                refFormHivAidViewModel.TxtBox_Lexiva_Refill = refFormHivAid.TxtBox_Lexiva_Refill;
                refFormHivAidViewModel.ChkBox_Norvir = refFormHivAid.ChkBox_Norvir;
                refFormHivAidViewModel.TxtBox_Norvir1 = refFormHivAid.TxtBox_Norvir1;
                refFormHivAidViewModel.TxtBox_Norvir2 = refFormHivAid.TxtBox_Norvir2;
                refFormHivAidViewModel.TxtBox_Norvir_Quantity = refFormHivAid.TxtBox_Norvir_Quantity;
                refFormHivAidViewModel.TxtBox_Norvir_Refill = refFormHivAid.TxtBox_Norvir_Refill;
                refFormHivAidViewModel.ChkBox_Prezista = refFormHivAid.ChkBox_Prezista;
                refFormHivAidViewModel.TxtBox_Prezista1 = refFormHivAid.TxtBox_Prezista1;
                refFormHivAidViewModel.TxtBox_Prezista2 = refFormHivAid.TxtBox_Prezista2;
                refFormHivAidViewModel.TxtBox_Prezista_Quantity = refFormHivAid.TxtBox_Prezista_Quantity;
                refFormHivAidViewModel.TxtBox_Prezista_Refill = refFormHivAid.TxtBox_Prezista_Refill;
                refFormHivAidViewModel.ChkBox_Reyataz = refFormHivAid.ChkBox_Reyataz;
                refFormHivAidViewModel.TxtBox_Reyataz1 = refFormHivAid.TxtBox_Reyataz1;
                refFormHivAidViewModel.TxtBox_Reyataz2 = refFormHivAid.TxtBox_Reyataz2;
                refFormHivAidViewModel.TxtBox_Reyataz_Quantity = refFormHivAid.TxtBox_Reyataz_Quantity;
                refFormHivAidViewModel.TxtBox_Reyataz_Refill = refFormHivAid.TxtBox_Reyataz_Refill;
                refFormHivAidViewModel.ChkBox_Viracept = refFormHivAid.ChkBox_Viracept;
                refFormHivAidViewModel.TxtBox_Viracept1 = refFormHivAid.TxtBox_Viracept1;
                refFormHivAidViewModel.TxtBox_Viracept2 = refFormHivAid.TxtBox_Viracept2;
                refFormHivAidViewModel.TxtBox_Viracept_Quantity = refFormHivAid.TxtBox_Viracept_Quantity;
                refFormHivAidViewModel.TxtBox_Viracept_Refill = refFormHivAid.TxtBox_Viracept_Refill;

                //Combinations
                refFormHivAidViewModel.ChkBox_Atripla = refFormHivAid.ChkBox_Atripla;
                refFormHivAidViewModel.TxtBox_Atripla1 = refFormHivAid.TxtBox_Atripla1;
                refFormHivAidViewModel.TxtBox_Atripla2 = refFormHivAid.TxtBox_Atripla2;
                refFormHivAidViewModel.TxtBox_Atripla_Quantity = refFormHivAid.TxtBox_Atripla_Quantity;
                refFormHivAidViewModel.TxtBox_Atripla_Refill = refFormHivAid.TxtBox_Atripla_Refill;
                refFormHivAidViewModel.ChkBox_Combivir = refFormHivAid.ChkBox_Combivir;
                refFormHivAidViewModel.TxtBox_Combivir1 = refFormHivAid.TxtBox_Combivir1;
                refFormHivAidViewModel.TxtBox_Combivir2 = refFormHivAid.TxtBox_Combivir2;
                refFormHivAidViewModel.TxtBox_Combivir_Quantity = refFormHivAid.TxtBox_Combivir_Quantity;
                refFormHivAidViewModel.TxtBox_Combivir_Refill = refFormHivAid.TxtBox_Combivir_Refill;
                refFormHivAidViewModel.ChkBox_Complera = refFormHivAid.ChkBox_Complera;
                refFormHivAidViewModel.TxtBox_Complera1 = refFormHivAid.TxtBox_Complera1;
                refFormHivAidViewModel.TxtBox_Complera2 = refFormHivAid.TxtBox_Complera2;
                refFormHivAidViewModel.TxtBox_Complera_Quantity = refFormHivAid.TxtBox_Complera_Quantity;
                refFormHivAidViewModel.TxtBox_Complera_Refill = refFormHivAid.TxtBox_Complera_Refill;
                refFormHivAidViewModel.ChkBox_Epzicom = refFormHivAid.ChkBox_Epzicom;
                refFormHivAidViewModel.TxtBox_Epzicom1 = refFormHivAid.TxtBox_Epzicom1;
                refFormHivAidViewModel.TxtBox_Epzicom2 = refFormHivAid.TxtBox_Epzicom2;
                refFormHivAidViewModel.TxtBox_Epzicom_Quantity = refFormHivAid.TxtBox_Epzicom_Quantity;
                refFormHivAidViewModel.TxtBox_Epzicom_Refill = refFormHivAid.TxtBox_Epzicom_Refill;
                refFormHivAidViewModel.ChkBox_Genvoya = refFormHivAid.ChkBox_Genvoya;
                refFormHivAidViewModel.TxtBox_Genvoya1 = refFormHivAid.TxtBox_Genvoya1;
                refFormHivAidViewModel.TxtBox_Genvoya2 = refFormHivAid.TxtBox_Genvoya2;
                refFormHivAidViewModel.TxtBox_Genvoya_Quantity = refFormHivAid.TxtBox_Genvoya_Quantity;
                refFormHivAidViewModel.TxtBox_Genvoya_Refill = refFormHivAid.TxtBox_Genvoya_Refill;
                refFormHivAidViewModel.ChkBox_Odefsey = refFormHivAid.ChkBox_Odefsey;
                refFormHivAidViewModel.TxtBox_Odefsey1 = refFormHivAid.TxtBox_Odefsey1;
                refFormHivAidViewModel.TxtBox_Odefsey2 = refFormHivAid.TxtBox_Odefsey2;
                refFormHivAidViewModel.TxtBox_Odefsey_Quantity = refFormHivAid.TxtBox_Odefsey_Quantity;
                refFormHivAidViewModel.TxtBox_Odefsey_Refill = refFormHivAid.TxtBox_Odefsey_Refill;
                refFormHivAidViewModel.ChkBox_Stribild = refFormHivAid.ChkBox_Stribild;
                refFormHivAidViewModel.TxtBox_Stribild1 = refFormHivAid.TxtBox_Stribild1;
                refFormHivAidViewModel.TxtBox_Stribild2 = refFormHivAid.TxtBox_Stribild2;
                refFormHivAidViewModel.TxtBox_Stribild_Quantity = refFormHivAid.TxtBox_Stribild_Quantity;
                refFormHivAidViewModel.TxtBox_Stribild_Refill = refFormHivAid.TxtBox_Stribild_Refill;
                refFormHivAidViewModel.ChkBox_Trizivir = refFormHivAid.ChkBox_Trizivir;
                refFormHivAidViewModel.TxtBox_Trizivir1 = refFormHivAid.TxtBox_Trizivir1;
                refFormHivAidViewModel.TxtBox_Trizivir2 = refFormHivAid.TxtBox_Trizivir2;
                refFormHivAidViewModel.TxtBox_Trizivir_Quantity = refFormHivAid.TxtBox_Trizivir_Quantity;
                refFormHivAidViewModel.TxtBox_Trizivir_Refill = refFormHivAid.TxtBox_Trizivir_Refill;
                refFormHivAidViewModel.ChkBox_Truvada = refFormHivAid.ChkBox_Truvada;
                refFormHivAidViewModel.TxtBox_Truvada1 = refFormHivAid.TxtBox_Truvada1;
                refFormHivAidViewModel.TxtBox_Truvada2 = refFormHivAid.TxtBox_Truvada2;
                refFormHivAidViewModel.TxtBox_Truvada_Quantity = refFormHivAid.TxtBox_Truvada_Quantity;
                refFormHivAidViewModel.TxtBox_Truvada_Refill = refFormHivAid.TxtBox_Truvada_Refill;

                //Integrase Inhibitor/CCR5 Inhibitor
                refFormHivAidViewModel.ChkBox_Isentress = refFormHivAid.ChkBox_Isentress;
                refFormHivAidViewModel.TxtBox_Isentress1 = refFormHivAid.TxtBox_Isentress1;
                refFormHivAidViewModel.TxtBox_Isentress2 = refFormHivAid.TxtBox_Isentress2;
                refFormHivAidViewModel.TxtBox_Isentress_Quantity = refFormHivAid.TxtBox_Isentress_Quantity;
                refFormHivAidViewModel.TxtBox_Isentress_Refill = refFormHivAid.TxtBox_Isentress_Refill;
                refFormHivAidViewModel.ChkBox_Selzentry = refFormHivAid.ChkBox_Selzentry;
                refFormHivAidViewModel.TxtBox_Selzentry1 = refFormHivAid.TxtBox_Selzentry1;
                refFormHivAidViewModel.TxtBox_Selzentry2 = refFormHivAid.TxtBox_Selzentry2;
                refFormHivAidViewModel.TxtBox_Selzentry_Quantity = refFormHivAid.TxtBox_Selzentry_Quantity;
                refFormHivAidViewModel.TxtBox_Selzentry_Refill = refFormHivAid.TxtBox_Selzentry_Refill;
                refFormHivAidViewModel.ChkBox_Tivicay = refFormHivAid.ChkBox_Tivicay;
                refFormHivAidViewModel.TxtBox_Tivicay1 = refFormHivAid.TxtBox_Tivicay1;
                refFormHivAidViewModel.TxtBox_Tivicay2 = refFormHivAid.TxtBox_Tivicay2;
                refFormHivAidViewModel.TxtBox_Tivicay_Quantity = refFormHivAid.TxtBox_Tivicay_Quantity;
                refFormHivAidViewModel.TxtBox_Tivicay_Refill = refFormHivAid.TxtBox_Tivicay_Refill;

                //Other Meds
                refFormHivAidViewModel.ChkBox_Egrifta = refFormHivAid.ChkBox_Egrifta;
                refFormHivAidViewModel.TxtBox_Egrifta1 = refFormHivAid.TxtBox_Egrifta1;
                refFormHivAidViewModel.TxtBox_Egrifta2 = refFormHivAid.TxtBox_Egrifta2;
                refFormHivAidViewModel.TxtBox_Egrifta_Quantity = refFormHivAid.TxtBox_Egrifta_Quantity;
                refFormHivAidViewModel.TxtBox_Egrifta_Refill = refFormHivAid.TxtBox_Egrifta_Refill;
                refFormHivAidViewModel.ChkBox_Serostim = refFormHivAid.ChkBox_Serostim;
                refFormHivAidViewModel.TxtBox_Serostim1 = refFormHivAid.TxtBox_Serostim1;
                refFormHivAidViewModel.TxtBox_Serostim2 = refFormHivAid.TxtBox_Serostim2;
                refFormHivAidViewModel.TxtBox_Serostim_Quantity = refFormHivAid.TxtBox_Serostim_Quantity;
                refFormHivAidViewModel.TxtBox_Serostim_Refill = refFormHivAid.TxtBox_Serostim_Refill;

                //form
                refFormHivAidViewModel.Date1 = refFormHivAid.Date1;
                refFormHivAidViewModel.Date2 = refFormHivAid.Date2;

                refFormHivAidViewModel.IsSignatured = refFormHivAid.IsSignatured ?? false;

                return View(refFormHivAidViewModel);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method HivAidsReferralForm PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormHivAidViewModel());
        }

        [HttpPost]
        public JsonResult HivAidsReferralForm(RefFormHivAidViewModel refFormHivAidViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Hiv Aids Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 8;

                int referralFormId = refFormHivAidViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormHivAid refFormHivAid = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormHivAidViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormHivAid = _unitOfWork.RefFormHivAidsRepository.GetSingle(t => t.RefFormHivAidsId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormHivAid == null)
                {
                    refFormHivAid = new RefFormHivAid();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }


                refFormHivAid.RefFormHivAidsId = refFormHivAidViewModel.RefFormHivAidsId;

                //Form
                refFormHivAid.FormDate = refFormHivAidViewModel.FormDate;
                refFormHivAid.FormNeedsByDate = refFormHivAidViewModel.FormNeedsByDate;
                refFormHivAid.ChkBox_ShipToPatient = refFormHivAidViewModel.ChkBox_ShipToPatient;
                refFormHivAid.ChkBox_ShipToOffice = refFormHivAidViewModel.ChkBox_ShipToOffice;
                refFormHivAid.ChkBox_ShipToOther = refFormHivAidViewModel.ChkBox_ShipToOther;
                refFormHivAid.TxtBox_ShipToOther = refFormHivAidViewModel.TxtBox_ShipToOther;

                //Diagnosis:
                refFormHivAid.B20_HIV_AIDS = refFormHivAidViewModel.B20_HIV_AIDS;
                refFormHivAid.B18_1_Chronic_Hepatitis_B = refFormHivAidViewModel.B18_1_Chronic_Hepatitis_B;
                refFormHivAid.B18_2_Chronic_Hepatitis_C = refFormHivAidViewModel.B18_2_Chronic_Hepatitis_C;
                refFormHivAid.ChkBox_DiagnosisOther = refFormHivAidViewModel.ChkBox_DiagnosisOther;
                refFormHivAid.TxtBox_DiagnosisOther = refFormHivAidViewModel.TxtBox_DiagnosisOther;

                //Drug Allergies:
                refFormHivAid.DrugAllergiesTxt = refFormHivAidViewModel.DrugAllergiesTxt;
                refFormHivAid.CD_4_T_cell = refFormHivAidViewModel.CD_4_T_cell;
                refFormHivAid.HIV_RNA = refFormHivAidViewModel.HIV_RNA;
                refFormHivAid.HCV_genotype = refFormHivAidViewModel.HCV_genotype;
                refFormHivAid.Viral_Load = refFormHivAidViewModel.Viral_Load;
                refFormHivAid.ALT = refFormHivAidViewModel.ALT;
                refFormHivAid.Liver_Biopsy_Results = refFormHivAidViewModel.Liver_Biopsy_Results;
                refFormHivAid.Weight = refFormHivAidViewModel.Weight;
                refFormHivAid.BLOOD_RESULTS_Date_Drawn = refFormHivAidViewModel.BLOOD_RESULTS_Date_Drawn;
                refFormHivAid.Hgb_Hct = refFormHivAidViewModel.Hgb_Hct;
                refFormHivAid.WBC = refFormHivAidViewModel.WBC;

                //PRESCRIPTION INFORMATION
                //NRTIs/NNRTIs
                refFormHivAid.ChkBox_Edurant = refFormHivAidViewModel.ChkBox_Edurant;
                refFormHivAid.TxtBox_Edurant1 = refFormHivAidViewModel.TxtBox_Edurant1;
                refFormHivAid.TxtBox_Edurant2 = refFormHivAidViewModel.TxtBox_Edurant2;
                refFormHivAid.TxtBox_Edurant_Quantity = refFormHivAidViewModel.TxtBox_Edurant_Quantity;
                refFormHivAid.TxtBox_Edurant_Refill = refFormHivAidViewModel.TxtBox_Edurant_Refill;
                refFormHivAid.ChkBox_Emtriva = refFormHivAidViewModel.ChkBox_Emtriva;
                refFormHivAid.TxtBox_Emtriva1 = refFormHivAidViewModel.TxtBox_Emtriva1;
                refFormHivAid.TxtBox_Emtriva2 = refFormHivAidViewModel.TxtBox_Emtriva2;
                refFormHivAid.TxtBox_Emtriva_Quantity = refFormHivAidViewModel.TxtBox_Emtriva_Quantity;
                refFormHivAid.TxtBox_Emtriva_Refill = refFormHivAidViewModel.TxtBox_Emtriva_Refill;
                refFormHivAid.ChkBox_Epivir = refFormHivAidViewModel.ChkBox_Epivir;
                refFormHivAid.TxtBox_Epivir1 = refFormHivAidViewModel.TxtBox_Epivir1;
                refFormHivAid.TxtBox_Epivir2 = refFormHivAidViewModel.TxtBox_Epivir2;
                refFormHivAid.TxtBox_Epivir_Quantity = refFormHivAidViewModel.TxtBox_Epivir_Quantity;
                refFormHivAid.TxtBox_Epivir_Refill = refFormHivAidViewModel.TxtBox_Epivir_Refill;
                refFormHivAid.ChkBox_Intelence = refFormHivAidViewModel.ChkBox_Intelence;
                refFormHivAid.TxtBox_Intelence1 = refFormHivAidViewModel.TxtBox_Intelence1;
                refFormHivAid.TxtBox_Intelence2 = refFormHivAidViewModel.TxtBox_Intelence2;
                refFormHivAid.TxtBox_Intelence_Quantity = refFormHivAidViewModel.TxtBox_Intelence_Quantity;
                refFormHivAid.TxtBox_Intelence_Refill = refFormHivAidViewModel.TxtBox_Intelence_Refill;
                refFormHivAid.ChkBox_Resciptor = refFormHivAidViewModel.ChkBox_Resciptor;
                refFormHivAid.TxtBox_Resciptor1 = refFormHivAidViewModel.TxtBox_Resciptor1;
                refFormHivAid.TxtBox_Resciptor2 = refFormHivAidViewModel.TxtBox_Resciptor2;
                refFormHivAid.TxtBox_Resciptor_Quantity = refFormHivAidViewModel.TxtBox_Resciptor_Quantity;
                refFormHivAid.TxtBox_Resciptor_Refill = refFormHivAidViewModel.TxtBox_Resciptor_Refill;
                refFormHivAid.ChkBox_Retrovir = refFormHivAidViewModel.ChkBox_Retrovir;
                refFormHivAid.TxtBox_Retrovir1 = refFormHivAidViewModel.TxtBox_Retrovir1;
                refFormHivAid.TxtBox_Retrovir2 = refFormHivAidViewModel.TxtBox_Retrovir2;
                refFormHivAid.TxtBox_Retrovir_Quantity = refFormHivAidViewModel.TxtBox_Retrovir_Quantity;
                refFormHivAid.TxtBox_Retrovir_Refill = refFormHivAidViewModel.TxtBox_Retrovir_Refill;
                refFormHivAid.ChkBox_Sustiva = refFormHivAidViewModel.ChkBox_Sustiva;
                refFormHivAid.TxtBox_Sustiva1 = refFormHivAidViewModel.TxtBox_Sustiva1;
                refFormHivAid.TxtBox_Sustiva2 = refFormHivAidViewModel.TxtBox_Sustiva2;
                refFormHivAid.TxtBox_Sustiva_Quantity = refFormHivAidViewModel.TxtBox_Sustiva_Quantity;
                refFormHivAid.TxtBox_Sustiva_Refill = refFormHivAidViewModel.TxtBox_Sustiva_Refill;
                refFormHivAid.ChkBox_Videx = refFormHivAidViewModel.ChkBox_Videx;
                refFormHivAid.TxtBox_Videx1 = refFormHivAidViewModel.TxtBox_Videx1;
                refFormHivAid.TxtBox_Videx2 = refFormHivAidViewModel.TxtBox_Videx2;
                refFormHivAid.TxtBox_Videx_Quantity = refFormHivAidViewModel.TxtBox_Videx_Quantity;
                refFormHivAid.TxtBox_Videx_Refill = refFormHivAidViewModel.TxtBox_Videx_Refill;
                refFormHivAid.ChkBox_Viramune = refFormHivAidViewModel.ChkBox_Viramune;
                refFormHivAid.TxtBox_Viramune1 = refFormHivAidViewModel.TxtBox_Viramune1;
                refFormHivAid.TxtBox_Viramune2 = refFormHivAidViewModel.TxtBox_Viramune2;
                refFormHivAid.TxtBox_Viramune_Quantity = refFormHivAidViewModel.TxtBox_Viramune_Quantity;
                refFormHivAid.TxtBox_Viramune_Refill = refFormHivAidViewModel.TxtBox_Viramune_Refill;
                refFormHivAid.ChkBox_Viread = refFormHivAidViewModel.ChkBox_Viread;
                refFormHivAid.TxtBox_Viread1 = refFormHivAidViewModel.TxtBox_Viread1;
                refFormHivAid.TxtBox_Viread2 = refFormHivAidViewModel.TxtBox_Viread2;
                refFormHivAid.TxtBox_Viread_Quantity = refFormHivAidViewModel.TxtBox_Viread_Quantity;
                refFormHivAid.TxtBox_Viread_Refill = refFormHivAidViewModel.TxtBox_Viread_Refill;
                refFormHivAid.ChkBox_Zerit = refFormHivAidViewModel.ChkBox_Zerit;
                refFormHivAid.TxtBox_Zerit1 = refFormHivAidViewModel.TxtBox_Zerit1;
                refFormHivAid.TxtBox_Zerit2 = refFormHivAidViewModel.TxtBox_Zerit2;
                refFormHivAid.TxtBox_Zerit_Quantity = refFormHivAidViewModel.TxtBox_Zerit_Quantity;
                refFormHivAid.TxtBox_Zerit_Refill = refFormHivAidViewModel.TxtBox_Zerit_Refill;
                refFormHivAid.ChkBox_Ziagen = refFormHivAidViewModel.ChkBox_Ziagen;
                refFormHivAid.TxtBox_Ziagen1 = refFormHivAidViewModel.TxtBox_Ziagen1;
                refFormHivAid.TxtBox_Ziagen2 = refFormHivAidViewModel.TxtBox_Ziagen2;
                refFormHivAid.TxtBox_Ziagen_Quantity = refFormHivAidViewModel.TxtBox_Ziagen_Quantity;
                refFormHivAid.TxtBox_Ziagen_Refill = refFormHivAidViewModel.TxtBox_Ziagen_Refill;

                //Protease Inhibitors
                refFormHivAid.ChkBox_Aptivus = refFormHivAidViewModel.ChkBox_Aptivus;
                refFormHivAid.TxtBox_Aptivus1 = refFormHivAidViewModel.TxtBox_Aptivus1;
                refFormHivAid.TxtBox_Aptivus2 = refFormHivAidViewModel.TxtBox_Aptivus2;
                refFormHivAid.TxtBox_Aptivus_Quantity = refFormHivAidViewModel.TxtBox_Aptivus_Quantity;
                refFormHivAid.TxtBox_Aptivus_Refill = refFormHivAidViewModel.TxtBox_Aptivus_Refill;
                refFormHivAid.ChkBox_Invirase = refFormHivAidViewModel.ChkBox_Invirase;
                refFormHivAid.TxtBox_Invirase1 = refFormHivAidViewModel.TxtBox_Invirase1;
                refFormHivAid.TxtBox_Invirase2 = refFormHivAidViewModel.TxtBox_Invirase2;
                refFormHivAid.TxtBox_Invirase_Quantity = refFormHivAidViewModel.TxtBox_Invirase_Quantity;
                refFormHivAid.TxtBox_Invirase_Refill = refFormHivAidViewModel.TxtBox_Invirase_Refill;
                refFormHivAid.ChkBox_Kaletra = refFormHivAidViewModel.ChkBox_Kaletra;
                refFormHivAid.TxtBox_Kaletra1 = refFormHivAidViewModel.TxtBox_Kaletra1;
                refFormHivAid.TxtBox_Kaletra2 = refFormHivAidViewModel.TxtBox_Kaletra2;
                refFormHivAid.TxtBox_Kaletra_Quantity = refFormHivAidViewModel.TxtBox_Kaletra_Quantity;
                refFormHivAid.TxtBox_Kaletra_Refill = refFormHivAidViewModel.TxtBox_Kaletra_Refill;
                refFormHivAid.ChkBox_Lexiva = refFormHivAidViewModel.ChkBox_Lexiva;
                refFormHivAid.TxtBox_Lexiva1 = refFormHivAidViewModel.TxtBox_Lexiva1;
                refFormHivAid.TxtBox_Lexiva2 = refFormHivAidViewModel.TxtBox_Lexiva2;
                refFormHivAid.TxtBox_Lexiva_Quantity = refFormHivAidViewModel.TxtBox_Lexiva_Quantity;
                refFormHivAid.TxtBox_Lexiva_Refill = refFormHivAidViewModel.TxtBox_Lexiva_Refill;
                refFormHivAid.ChkBox_Norvir = refFormHivAidViewModel.ChkBox_Norvir;
                refFormHivAid.TxtBox_Norvir1 = refFormHivAidViewModel.TxtBox_Norvir1;
                refFormHivAid.TxtBox_Norvir2 = refFormHivAidViewModel.TxtBox_Norvir2;
                refFormHivAid.TxtBox_Norvir_Quantity = refFormHivAidViewModel.TxtBox_Norvir_Quantity;
                refFormHivAid.TxtBox_Norvir_Refill = refFormHivAidViewModel.TxtBox_Norvir_Refill;
                refFormHivAid.ChkBox_Prezista = refFormHivAidViewModel.ChkBox_Prezista;
                refFormHivAid.TxtBox_Prezista1 = refFormHivAidViewModel.TxtBox_Prezista1;
                refFormHivAid.TxtBox_Prezista2 = refFormHivAidViewModel.TxtBox_Prezista2;
                refFormHivAid.TxtBox_Prezista_Quantity = refFormHivAidViewModel.TxtBox_Prezista_Quantity;
                refFormHivAid.TxtBox_Prezista_Refill = refFormHivAidViewModel.TxtBox_Prezista_Refill;
                refFormHivAid.ChkBox_Reyataz = refFormHivAidViewModel.ChkBox_Reyataz;
                refFormHivAid.TxtBox_Reyataz1 = refFormHivAidViewModel.TxtBox_Reyataz1;
                refFormHivAid.TxtBox_Reyataz2 = refFormHivAidViewModel.TxtBox_Reyataz2;
                refFormHivAid.TxtBox_Reyataz_Quantity = refFormHivAidViewModel.TxtBox_Reyataz_Quantity;
                refFormHivAid.TxtBox_Reyataz_Refill = refFormHivAidViewModel.TxtBox_Reyataz_Refill;
                refFormHivAid.ChkBox_Viracept = refFormHivAidViewModel.ChkBox_Viracept;
                refFormHivAid.TxtBox_Viracept1 = refFormHivAidViewModel.TxtBox_Viracept1;
                refFormHivAid.TxtBox_Viracept2 = refFormHivAidViewModel.TxtBox_Viracept2;
                refFormHivAid.TxtBox_Viracept_Quantity = refFormHivAidViewModel.TxtBox_Viracept_Quantity;
                refFormHivAid.TxtBox_Viracept_Refill = refFormHivAidViewModel.TxtBox_Viracept_Refill;

                //Combinations
                refFormHivAid.ChkBox_Atripla = refFormHivAidViewModel.ChkBox_Atripla;
                refFormHivAid.TxtBox_Atripla1 = refFormHivAidViewModel.TxtBox_Atripla1;
                refFormHivAid.TxtBox_Atripla2 = refFormHivAidViewModel.TxtBox_Atripla2;
                refFormHivAid.TxtBox_Atripla_Quantity = refFormHivAidViewModel.TxtBox_Atripla_Quantity;
                refFormHivAid.TxtBox_Atripla_Refill = refFormHivAidViewModel.TxtBox_Atripla_Refill;
                refFormHivAid.ChkBox_Combivir = refFormHivAidViewModel.ChkBox_Combivir;
                refFormHivAid.TxtBox_Combivir1 = refFormHivAidViewModel.TxtBox_Combivir1;
                refFormHivAid.TxtBox_Combivir2 = refFormHivAidViewModel.TxtBox_Combivir2;
                refFormHivAid.TxtBox_Combivir_Quantity = refFormHivAidViewModel.TxtBox_Combivir_Quantity;
                refFormHivAid.TxtBox_Combivir_Refill = refFormHivAidViewModel.TxtBox_Combivir_Refill;
                refFormHivAid.ChkBox_Complera = refFormHivAidViewModel.ChkBox_Complera;
                refFormHivAid.TxtBox_Complera1 = refFormHivAidViewModel.TxtBox_Complera1;
                refFormHivAid.TxtBox_Complera2 = refFormHivAidViewModel.TxtBox_Complera2;
                refFormHivAid.TxtBox_Complera_Quantity = refFormHivAidViewModel.TxtBox_Complera_Quantity;
                refFormHivAid.TxtBox_Complera_Refill = refFormHivAidViewModel.TxtBox_Complera_Refill;
                refFormHivAid.ChkBox_Epzicom = refFormHivAidViewModel.ChkBox_Epzicom;
                refFormHivAid.TxtBox_Epzicom1 = refFormHivAidViewModel.TxtBox_Epzicom1;
                refFormHivAid.TxtBox_Epzicom2 = refFormHivAidViewModel.TxtBox_Epzicom2;
                refFormHivAid.TxtBox_Epzicom_Quantity = refFormHivAidViewModel.TxtBox_Epzicom_Quantity;
                refFormHivAid.TxtBox_Epzicom_Refill = refFormHivAidViewModel.TxtBox_Epzicom_Refill;
                refFormHivAid.ChkBox_Genvoya = refFormHivAidViewModel.ChkBox_Genvoya;
                refFormHivAid.TxtBox_Genvoya1 = refFormHivAidViewModel.TxtBox_Genvoya1;
                refFormHivAid.TxtBox_Genvoya2 = refFormHivAidViewModel.TxtBox_Genvoya2;
                refFormHivAid.TxtBox_Genvoya_Quantity = refFormHivAidViewModel.TxtBox_Genvoya_Quantity;
                refFormHivAid.TxtBox_Genvoya_Refill = refFormHivAidViewModel.TxtBox_Genvoya_Refill;
                refFormHivAid.ChkBox_Odefsey = refFormHivAidViewModel.ChkBox_Odefsey;
                refFormHivAid.TxtBox_Odefsey1 = refFormHivAidViewModel.TxtBox_Odefsey1;
                refFormHivAid.TxtBox_Odefsey2 = refFormHivAidViewModel.TxtBox_Odefsey2;
                refFormHivAid.TxtBox_Odefsey_Quantity = refFormHivAidViewModel.TxtBox_Odefsey_Quantity;
                refFormHivAid.TxtBox_Odefsey_Refill = refFormHivAidViewModel.TxtBox_Odefsey_Refill;
                refFormHivAid.ChkBox_Stribild = refFormHivAidViewModel.ChkBox_Stribild;
                refFormHivAid.TxtBox_Stribild1 = refFormHivAidViewModel.TxtBox_Stribild1;
                refFormHivAid.TxtBox_Stribild2 = refFormHivAidViewModel.TxtBox_Stribild2;
                refFormHivAid.TxtBox_Stribild_Quantity = refFormHivAidViewModel.TxtBox_Stribild_Quantity;
                refFormHivAid.TxtBox_Stribild_Refill = refFormHivAidViewModel.TxtBox_Stribild_Refill;
                refFormHivAid.ChkBox_Trizivir = refFormHivAidViewModel.ChkBox_Trizivir;
                refFormHivAid.TxtBox_Trizivir1 = refFormHivAidViewModel.TxtBox_Trizivir1;
                refFormHivAid.TxtBox_Trizivir2 = refFormHivAidViewModel.TxtBox_Trizivir2;
                refFormHivAid.TxtBox_Trizivir_Quantity = refFormHivAidViewModel.TxtBox_Trizivir_Quantity;
                refFormHivAid.TxtBox_Trizivir_Refill = refFormHivAidViewModel.TxtBox_Trizivir_Refill;
                refFormHivAid.ChkBox_Truvada = refFormHivAidViewModel.ChkBox_Truvada;
                refFormHivAid.TxtBox_Truvada1 = refFormHivAidViewModel.TxtBox_Truvada1;
                refFormHivAid.TxtBox_Truvada2 = refFormHivAidViewModel.TxtBox_Truvada2;
                refFormHivAid.TxtBox_Truvada_Quantity = refFormHivAidViewModel.TxtBox_Truvada_Quantity;
                refFormHivAid.TxtBox_Truvada_Refill = refFormHivAidViewModel.TxtBox_Truvada_Refill;

                //Integrase Inhibitor/CCR5 Inhibitor
                refFormHivAid.ChkBox_Isentress = refFormHivAidViewModel.ChkBox_Isentress;
                refFormHivAid.TxtBox_Isentress1 = refFormHivAidViewModel.TxtBox_Isentress1;
                refFormHivAid.TxtBox_Isentress2 = refFormHivAidViewModel.TxtBox_Isentress2;
                refFormHivAid.TxtBox_Isentress_Quantity = refFormHivAidViewModel.TxtBox_Isentress_Quantity;
                refFormHivAid.TxtBox_Isentress_Refill = refFormHivAidViewModel.TxtBox_Isentress_Refill;
                refFormHivAid.ChkBox_Selzentry = refFormHivAidViewModel.ChkBox_Selzentry;
                refFormHivAid.TxtBox_Selzentry1 = refFormHivAidViewModel.TxtBox_Selzentry1;
                refFormHivAid.TxtBox_Selzentry2 = refFormHivAidViewModel.TxtBox_Selzentry2;
                refFormHivAid.TxtBox_Selzentry_Quantity = refFormHivAidViewModel.TxtBox_Selzentry_Quantity;
                refFormHivAid.TxtBox_Selzentry_Refill = refFormHivAidViewModel.TxtBox_Selzentry_Refill;
                refFormHivAid.ChkBox_Tivicay = refFormHivAidViewModel.ChkBox_Tivicay;
                refFormHivAid.TxtBox_Tivicay1 = refFormHivAidViewModel.TxtBox_Tivicay1;
                refFormHivAid.TxtBox_Tivicay2 = refFormHivAidViewModel.TxtBox_Tivicay2;
                refFormHivAid.TxtBox_Tivicay_Quantity = refFormHivAidViewModel.TxtBox_Tivicay_Quantity;
                refFormHivAid.TxtBox_Tivicay_Refill = refFormHivAidViewModel.TxtBox_Tivicay_Refill;

                //Other Meds
                refFormHivAid.ChkBox_Egrifta = refFormHivAidViewModel.ChkBox_Egrifta;
                refFormHivAid.TxtBox_Egrifta1 = refFormHivAidViewModel.TxtBox_Egrifta1;
                refFormHivAid.TxtBox_Egrifta2 = refFormHivAidViewModel.TxtBox_Egrifta2;
                refFormHivAid.TxtBox_Egrifta_Quantity = refFormHivAidViewModel.TxtBox_Egrifta_Quantity;
                refFormHivAid.TxtBox_Egrifta_Refill = refFormHivAidViewModel.TxtBox_Egrifta_Refill;
                refFormHivAid.ChkBox_Serostim = refFormHivAidViewModel.ChkBox_Serostim;
                refFormHivAid.TxtBox_Serostim1 = refFormHivAidViewModel.TxtBox_Serostim1;
                refFormHivAid.TxtBox_Serostim2 = refFormHivAidViewModel.TxtBox_Serostim2;
                refFormHivAid.TxtBox_Serostim_Quantity = refFormHivAidViewModel.TxtBox_Serostim_Quantity;
                refFormHivAid.TxtBox_Serostim_Refill = refFormHivAidViewModel.TxtBox_Serostim_Refill;

                //form
                refFormHivAid.Date1 = refFormHivAidViewModel.Date1;
                refFormHivAid.Date2 = refFormHivAidViewModel.Date2;

                refFormHivAid.IsSignatured = refFormHivAidViewModel.IsSignatured;

                refFormHivAid.ModifiedBy = CurrentUser.UserId;
                refFormHivAid.ModifiedOn = DateTime.UtcNow;

                if (IsEdit)
                {
                    _unitOfWork.RefFormHivAidsRepository.Update(refFormHivAid);
                    AuditLogger.AuditTracker("Edit HivAidsReferralForm", "HivAidsReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormHivAid.CreatedBy = CurrentUser.UserId;
                    refFormHivAid.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormHivAidsRepository.Insert(refFormHivAid);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New HivAidsReferralForm", "A new HivAidsReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormHivAidViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormHivAid.RefFormHivAidsId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();

                return Json(new { message = "Save Hiv Aids Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method HivAidsReferralForm PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save Hiv Aids Referral Form Unsuccessfully.", success = false });
        }


        public ActionResult HivAidsReferralForm_1(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Hiv Aids Referral Form (1)"));
            return RedirectToAction("HivAidsReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 9 });
        }

        public ActionResult HivAidsReferralForm_2(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Hiv Aids Referral Form (2)"));
            return RedirectToAction("HivAidsReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 10 });
        }

        public ActionResult nola_infectious_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola Infectious Referral Form"));
            return RedirectToAction("HivAidsReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 32 });
        }
        //ggca_gastro_referral_form

        public ActionResult ggca_gastro_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca gastro referral form"));
            return RedirectToAction("GastroenterologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 42 });
        }
        //laca_gastro_referral_form......................
        public ActionResult laca_gastro_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Laca gastro referral form"));
            return RedirectToAction("GastroenterologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 43 });
        }
        //lmfl_gastro_referral_form
        public ActionResult lmfl_gastro_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl gastro referral form"));
            return RedirectToAction("GastroenterologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 44 });
        }
        //nola_gastro_referral_form
        public ActionResult nola_gastro_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola gastro referral form"));
            return RedirectToAction("GastroenterologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 45 });
        }
        //ofl_gastro_referral_form
        public ActionResult ofl_gastro_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl gastro referral form"));
            return RedirectToAction("GastroenterologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 46 });
        }
        //Gastroenterology...............................
        public ActionResult GastroenterologyReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Gastroenterology Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 5;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormGastroenterologyViewModel refFormGastroenterologyViewModel = new RefFormGastroenterologyViewModel();

                //Set ReferralFormId
                refFormGastroenterologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormGastroenterologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormGastroenterologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormGastroenterologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormGastroenterologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormGastroenterologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormGastroenterologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormGastroenterologyViewModel.PhysicianFullName = physician.FullName;
                        refFormGastroenterologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormGastroenterologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormGastroenterologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormGastroenterologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormGastroenterologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormGastroenterologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormGastroenterologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormGastroenterology refFormGastroenterology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormGastroenterology = _unitOfWork.RefFormGastroenterologyRepository.GetSingle(t => t.RefFormGastroenterologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormGastroenterology == null) refFormGastroenterology = new RefFormGastroenterology();


                    refFormGastroenterologyViewModel.RefFormGastroenterologyId = refFormGastroenterology.RefFormGastroenterologyId;

                    //Form
                    //Add your code here.

                    refFormGastroenterologyViewModel.RefFormGastroenterologyId = refFormGastroenterology.RefFormGastroenterologyId;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_K50_90 = refFormGastroenterology.ChkBox_CLINICAL_K50_90 ?? false;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_K51_90 = refFormGastroenterology.ChkBox_CLINICAL_K51_90 ?? false;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_Other1 = refFormGastroenterology.ChkBox_CLINICAL_Other1 ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_Other1_TxtBox = refFormGastroenterology.CLINICAL_Other1_TxtBox;
                    refFormGastroenterologyViewModel.CLINICAL_Other_Drug_Allergies_TxtBox = refFormGastroenterology.CLINICAL_Other_Drug_Allergies_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_History = refFormGastroenterology.ChkBox_CLINICAL_History ?? false;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_NSAIDS = refFormGastroenterology.ChkBox_CLINICAL_NSAIDS ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_NSAIDS_Duration_TxtBox = refFormGastroenterology.CLINICAL_NSAIDS_Duration_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_Sulfasalazine = refFormGastroenterology.ChkBox_CLINICAL_Sulfasalazine ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_Sulfasalazine_Duration_TxtBox = refFormGastroenterology.CLINICAL_Sulfasalazine_Duration_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_Corticosteroid = refFormGastroenterology.ChkBox_CLINICAL_Corticosteroid ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_Corticosteroid_Duration_TxtBox = refFormGastroenterology.CLINICAL_Corticosteroid_Duration_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_MTX = refFormGastroenterology.ChkBox_CLINICAL_MTX ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_MTX_Duration_TxtBox = refFormGastroenterology.CLINICAL_MTX_Duration_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_5_ASA = refFormGastroenterology.ChkBox_CLINICAL_5_ASA ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_5_ASA_Duration_TxtBox = refFormGastroenterology.CLINICAL_5_ASA_Duration_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_6_MP = refFormGastroenterology.ChkBox_CLINICAL_6_MP ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_6_MP_Duration_TxtBox = refFormGastroenterology.CLINICAL_6_MP_Duration_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_Biologics = refFormGastroenterology.ChkBox_CLINICAL_Biologics ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_Biologics_Duration_TxtBox = refFormGastroenterology.CLINICAL_Biologics_Duration_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_Azathioprine = refFormGastroenterology.ChkBox_CLINICAL_Azathioprine ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_Azathioprine_Duration = refFormGastroenterology.CLINICAL_Azathioprine_Duration;
                    refFormGastroenterologyViewModel.ChkBox_CLINICAL_Other2 = refFormGastroenterology.ChkBox_CLINICAL_Other2 ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_Other2_Duration_TxtBox = refFormGastroenterology.CLINICAL_Other2_Duration_TxtBox;
                    refFormGastroenterologyViewModel.Radio_CLINICAL_patientcurrentlyonanytherapy = refFormGastroenterology.Radio_CLINICAL_patientcurrentlyonanytherapy ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_ListMeds_TxtBox = refFormGastroenterology.CLINICAL_ListMeds_TxtBox;
                    refFormGastroenterologyViewModel.Radio_CLINICAL_patientstoptakingMedsbeforestarting = refFormGastroenterology.Radio_CLINICAL_patientstoptakingMedsbeforestarting ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_Howlongwillthepatientwaitbeforestarting_TxtBox = refFormGastroenterology.CLINICAL_Howlongwillthepatientwaitbeforestarting_TxtBox;
                    refFormGastroenterologyViewModel.CLINICAL_Othermedspatientison_TxtBox = refFormGastroenterology.CLINICAL_Othermedspatientison_TxtBox;
                    refFormGastroenterologyViewModel.Radio_CLINICAL_HaspatientreceivedPPD = refFormGastroenterology.Radio_CLINICAL_HaspatientreceivedPPD ?? false;
                    refFormGastroenterologyViewModel.CLINICAL_Results_TxtBox = refFormGastroenterology.CLINICAL_Results_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Cimzia = refFormGastroenterology.ChkBox_PRESCRIPTION_Cimzia ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_200_2PrefilledSyringe = refFormGastroenterology.ChkBox_PRESCRIPTION_200_2PrefilledSyringe ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_200_2LYOPowder = refFormGastroenterology.ChkBox_PRESCRIPTION_200_2LYOPowder ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_StarterKit_Inject400mgsubcutaneously = refFormGastroenterology.ChkBox_PRESCRIPTION_StarterKit_Inject400mgsubcutaneously ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Inject400mgsubcutaneouslyonce = refFormGastroenterology.ChkBox_PRESCRIPTION_Inject400mgsubcutaneouslyonce ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox1 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox1;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Creon = refFormGastroenterology.ChkBox_PRESCRIPTION_Creon ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_3000 = refFormGastroenterology.ChkBox_PRESCRIPTION_3000 ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_6000 = refFormGastroenterology.ChkBox_PRESCRIPTION_6000 ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_12000 = refFormGastroenterology.ChkBox_PRESCRIPTION_12000 ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_24000 = refFormGastroenterology.ChkBox_PRESCRIPTION_24000 ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_36000 = refFormGastroenterology.ChkBox_PRESCRIPTION_36000 ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_capsulesthreetimes_TxtBox = refFormGastroenterology.PRESCRIPTION_capsulesthreetimes_TxtBox;
                    refFormGastroenterologyViewModel.PRESCRIPTION_capsuleswith_TxtBox = refFormGastroenterology.PRESCRIPTION_capsuleswith_TxtBox;
                    refFormGastroenterologyViewModel.PRESCRIPTION_snacksdaily_TxtBox = refFormGastroenterology.PRESCRIPTION_snacksdaily_TxtBox;
                    refFormGastroenterologyViewModel.PRESCRIPTION_capsulesaday_TxtBox = refFormGastroenterology.PRESCRIPTION_capsulesaday_TxtBox;
                    refFormGastroenterologyViewModel.PRESCRIPTION_Quantity_TxtBox1 = refFormGastroenterology.PRESCRIPTION_Quantity_TxtBox1;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox2 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox2;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Dificid = refFormGastroenterology.ChkBox_PRESCRIPTION_Dificid ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox3 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox3;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Entyvio = refFormGastroenterology.ChkBox_PRESCRIPTION_Entyvio ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadingDose = refFormGastroenterology.ChkBox_PRESCRIPTION_LoadingDose ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenance = refFormGastroenterology.ChkBox_PRESCRIPTION_Maintenance ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_Quantity_TxtBox2 = refFormGastroenterology.PRESCRIPTION_Quantity_TxtBox2;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox4 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox4;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Humira = refFormGastroenterology.ChkBox_PRESCRIPTION_Humira ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Crohns_UCStarter = refFormGastroenterology.ChkBox_PRESCRIPTION_Crohns_UCStarter ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_40mgPrefilledPen = refFormGastroenterology.ChkBox_PRESCRIPTION_40mgPrefilledPen ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_40mgPrefilledSyringe = refFormGastroenterology.ChkBox_PRESCRIPTION_40mgPrefilledSyringe ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Four40mgSubQday1OR = refFormGastroenterology.ChkBox_PRESCRIPTION_Four40mgSubQday1OR ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Two40mgSubQdays = refFormGastroenterology.ChkBox_PRESCRIPTION_Two40mgSubQdays ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Week4plusnject40mg = refFormGastroenterology.ChkBox_PRESCRIPTION_Week4plusnject40mg ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION__Week4plusnject40mg_TextBox = refFormGastroenterology.PRESCRIPTION__Week4plusnject40mg_TextBox;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox5 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox5;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Remicade = refFormGastroenterology.ChkBox_PRESCRIPTION_Remicade ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_Wt_TxtBox = refFormGastroenterology.PRESCRIPTION_Wt_TxtBox;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Infuse1 = refFormGastroenterology.ChkBox_PRESCRIPTION_Infuse1 ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Infuse2 = refFormGastroenterology.ChkBox_PRESCRIPTION_Infuse2 ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_mgIVonweek0week2week6then = refFormGastroenterology.PRESCRIPTION_mgIVonweek0week2week6then;
                    refFormGastroenterologyViewModel.PRESCRIPTION_mgIVevery = refFormGastroenterology.PRESCRIPTION_mgIVevery;
                    refFormGastroenterologyViewModel.PRESCRIPTION_weeksfor = refFormGastroenterology.PRESCRIPTION_weeksfor;
                    refFormGastroenterologyViewModel.PRESCRIPTION_infusions = refFormGastroenterology.PRESCRIPTION_infusions;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox6 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox6;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Simponi = refFormGastroenterology.ChkBox_PRESCRIPTION_Simponi ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_100mgSmartJect = refFormGastroenterology.ChkBox_PRESCRIPTION_100mgSmartJect ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_100mgPrefilledSyringe = refFormGastroenterology.ChkBox_PRESCRIPTION_100mgPrefilledSyringe ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Inject200mgsubcutaneouslyatweek0 = refFormGastroenterology.ChkBox_PRESCRIPTION_Inject200mgsubcutaneouslyatweek0 ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Inject100mgsubcutaneouslyonceevery4weeks = refFormGastroenterology.ChkBox_PRESCRIPTION_Inject100mgsubcutaneouslyonceevery4weeks ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox7 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox7;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Epipen = refFormGastroenterology.ChkBox_PRESCRIPTION_Epipen ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_0_3mg = refFormGastroenterology.ChkBox_PRESCRIPTION_0_3mg ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox8 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox8;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Xifaxan = refFormGastroenterology.ChkBox_PRESCRIPTION_Xifaxan ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_1tabletbymouthtwiceaday = refFormGastroenterology.ChkBox_PRESCRIPTION_1tabletbymouthtwiceaday ?? false;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_1tabletbymouththreetimesaday = refFormGastroenterology.ChkBox_PRESCRIPTION_1tabletbymouththreetimesaday ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox9 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox9;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox10 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox10;
                    refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_1Other = refFormGastroenterology.ChkBox_PRESCRIPTION_1Other ?? false;
                    refFormGastroenterologyViewModel.PRESCRIPTION_TxtBox1 = refFormGastroenterology.PRESCRIPTION_TxtBox1;
                    refFormGastroenterologyViewModel.PRESCRIPTION_TxtBox2 = refFormGastroenterology.PRESCRIPTION_TxtBox2;
                    refFormGastroenterologyViewModel.PRESCRIPTION_Quantity_TxtBox3 = refFormGastroenterology.PRESCRIPTION_Quantity_TxtBox3;
                    refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox11 = refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox11;
                    refFormGastroenterologyViewModel.ChkBox_Stelara = refFormGastroenterology.ChkBox_Stelara ?? false;
                    refFormGastroenterologyViewModel.Stelara_Refills_TxtBox = refFormGastroenterology.Stelara_Refills_TxtBox;

                    //refFormGastroenterologyViewModel.Date1 = refFormGastroenterology.Date1;
                    //refFormGastroenterologyViewModel.Date2 = refFormGastroenterology.Date2;

                    refFormGastroenterologyViewModel.IsSignatured = refFormGastroenterology.IsSignatured ?? false;

                    return View(refFormGastroenterologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GastroenterologyReferralForm PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormGastroenterologyViewModel());
        }

        [HttpPost]

        public JsonResult GastroenterologyReferralForm(RefFormGastroenterologyViewModel refFormGastroenterologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormGastroenterologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormGastroenterology refFormGastroenterology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormGastroenterologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormGastroenterology = _unitOfWork.RefFormGastroenterologyRepository.GetSingle(t => t.RefFormGastroenterologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormGastroenterology == null)
                {
                    refFormGastroenterology = new RefFormGastroenterology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form

                refFormGastroenterology.RefFormGastroenterologyId = refFormGastroenterologyViewModel.RefFormGastroenterologyId;
                refFormGastroenterology.ChkBox_CLINICAL_K50_90 = refFormGastroenterologyViewModel.ChkBox_CLINICAL_K50_90;
                refFormGastroenterology.ChkBox_CLINICAL_K51_90 = refFormGastroenterologyViewModel.ChkBox_CLINICAL_K51_90;
                refFormGastroenterology.ChkBox_CLINICAL_Other1 = refFormGastroenterologyViewModel.ChkBox_CLINICAL_Other1;
                refFormGastroenterology.CLINICAL_Other1_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Other1_TxtBox;
                refFormGastroenterology.CLINICAL_Other_Drug_Allergies_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Other_Drug_Allergies_TxtBox;
                refFormGastroenterology.ChkBox_CLINICAL_History = refFormGastroenterologyViewModel.ChkBox_CLINICAL_History;
                refFormGastroenterology.ChkBox_CLINICAL_NSAIDS = refFormGastroenterologyViewModel.ChkBox_CLINICAL_NSAIDS;
                refFormGastroenterology.CLINICAL_NSAIDS_Duration_TxtBox = refFormGastroenterologyViewModel.CLINICAL_NSAIDS_Duration_TxtBox;
                refFormGastroenterology.ChkBox_CLINICAL_Sulfasalazine = refFormGastroenterologyViewModel.ChkBox_CLINICAL_Sulfasalazine;
                refFormGastroenterology.CLINICAL_Sulfasalazine_Duration_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Sulfasalazine_Duration_TxtBox;
                refFormGastroenterology.ChkBox_CLINICAL_Corticosteroid = refFormGastroenterologyViewModel.ChkBox_CLINICAL_Corticosteroid;
                refFormGastroenterology.CLINICAL_Corticosteroid_Duration_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Corticosteroid_Duration_TxtBox;
                refFormGastroenterology.ChkBox_CLINICAL_MTX = refFormGastroenterologyViewModel.ChkBox_CLINICAL_MTX;
                refFormGastroenterology.CLINICAL_MTX_Duration_TxtBox = refFormGastroenterologyViewModel.CLINICAL_MTX_Duration_TxtBox;
                refFormGastroenterology.ChkBox_CLINICAL_5_ASA = refFormGastroenterologyViewModel.ChkBox_CLINICAL_5_ASA;
                refFormGastroenterology.CLINICAL_5_ASA_Duration_TxtBox = refFormGastroenterologyViewModel.CLINICAL_5_ASA_Duration_TxtBox;
                refFormGastroenterology.ChkBox_CLINICAL_6_MP = refFormGastroenterologyViewModel.ChkBox_CLINICAL_6_MP;
                refFormGastroenterology.CLINICAL_6_MP_Duration_TxtBox = refFormGastroenterologyViewModel.CLINICAL_6_MP_Duration_TxtBox;
                refFormGastroenterology.ChkBox_CLINICAL_Biologics = refFormGastroenterologyViewModel.ChkBox_CLINICAL_Biologics;
                refFormGastroenterology.CLINICAL_Biologics_Duration_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Biologics_Duration_TxtBox;
                refFormGastroenterology.ChkBox_CLINICAL_Azathioprine = refFormGastroenterologyViewModel.ChkBox_CLINICAL_Azathioprine;
                refFormGastroenterology.CLINICAL_Azathioprine_Duration = refFormGastroenterologyViewModel.CLINICAL_Azathioprine_Duration;
                refFormGastroenterology.ChkBox_CLINICAL_Other2 = refFormGastroenterologyViewModel.ChkBox_CLINICAL_Other2;
                refFormGastroenterology.CLINICAL_Other2_Duration_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Other2_Duration_TxtBox;
                refFormGastroenterology.Radio_CLINICAL_patientcurrentlyonanytherapy = refFormGastroenterologyViewModel.Radio_CLINICAL_patientcurrentlyonanytherapy;
                refFormGastroenterology.CLINICAL_ListMeds_TxtBox = refFormGastroenterologyViewModel.CLINICAL_ListMeds_TxtBox;
                refFormGastroenterology.Radio_CLINICAL_patientstoptakingMedsbeforestarting = refFormGastroenterologyViewModel.Radio_CLINICAL_patientstoptakingMedsbeforestarting;
                refFormGastroenterology.CLINICAL_Howlongwillthepatientwaitbeforestarting_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Howlongwillthepatientwaitbeforestarting_TxtBox;
                refFormGastroenterology.CLINICAL_Othermedspatientison_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Othermedspatientison_TxtBox;
                refFormGastroenterology.Radio_CLINICAL_HaspatientreceivedPPD = refFormGastroenterologyViewModel.Radio_CLINICAL_HaspatientreceivedPPD;
                refFormGastroenterology.CLINICAL_Results_TxtBox = refFormGastroenterologyViewModel.CLINICAL_Results_TxtBox;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Cimzia = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Cimzia;
                refFormGastroenterology.ChkBox_PRESCRIPTION_200_2PrefilledSyringe = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_200_2PrefilledSyringe;
                refFormGastroenterology.ChkBox_PRESCRIPTION_200_2LYOPowder = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_200_2LYOPowder;
                refFormGastroenterology.ChkBox_PRESCRIPTION_StarterKit_Inject400mgsubcutaneously = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_StarterKit_Inject400mgsubcutaneously;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Inject400mgsubcutaneouslyonce = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Inject400mgsubcutaneouslyonce;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox1 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox1;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Creon = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Creon;
                refFormGastroenterology.ChkBox_PRESCRIPTION_3000 = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_3000;
                refFormGastroenterology.ChkBox_PRESCRIPTION_6000 = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_6000;
                refFormGastroenterology.ChkBox_PRESCRIPTION_12000 = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_12000;
                refFormGastroenterology.ChkBox_PRESCRIPTION_24000 = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_24000;
                refFormGastroenterology.ChkBox_PRESCRIPTION_36000 = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_36000;
                refFormGastroenterology.PRESCRIPTION_capsulesthreetimes_TxtBox = refFormGastroenterologyViewModel.PRESCRIPTION_capsulesthreetimes_TxtBox;
                refFormGastroenterology.PRESCRIPTION_capsuleswith_TxtBox = refFormGastroenterologyViewModel.PRESCRIPTION_capsuleswith_TxtBox;
                refFormGastroenterology.PRESCRIPTION_snacksdaily_TxtBox = refFormGastroenterologyViewModel.PRESCRIPTION_snacksdaily_TxtBox;
                refFormGastroenterology.PRESCRIPTION_capsulesaday_TxtBox = refFormGastroenterologyViewModel.PRESCRIPTION_capsulesaday_TxtBox;
                refFormGastroenterology.PRESCRIPTION_Quantity_TxtBox1 = refFormGastroenterologyViewModel.PRESCRIPTION_Quantity_TxtBox1;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox2 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox2;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Dificid = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Dificid;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox3 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox3;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Entyvio = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Entyvio;
                refFormGastroenterology.ChkBox_PRESCRIPTION_LoadingDose = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadingDose;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Maintenance = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenance;
                refFormGastroenterology.PRESCRIPTION_Quantity_TxtBox2 = refFormGastroenterologyViewModel.PRESCRIPTION_Quantity_TxtBox2;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox4 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox4;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Humira = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Humira;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Crohns_UCStarter = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Crohns_UCStarter;
                refFormGastroenterology.ChkBox_PRESCRIPTION_40mgPrefilledPen = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_40mgPrefilledPen;
                refFormGastroenterology.ChkBox_PRESCRIPTION_40mgPrefilledSyringe = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_40mgPrefilledSyringe;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Four40mgSubQday1OR = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Four40mgSubQday1OR;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Two40mgSubQdays = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Two40mgSubQdays;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Week4plusnject40mg = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Week4plusnject40mg;
                refFormGastroenterology.PRESCRIPTION__Week4plusnject40mg_TextBox = refFormGastroenterologyViewModel.PRESCRIPTION__Week4plusnject40mg_TextBox;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox5 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox5;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Remicade = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Remicade;
                refFormGastroenterology.PRESCRIPTION_Wt_TxtBox = refFormGastroenterologyViewModel.PRESCRIPTION_Wt_TxtBox;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Infuse1 = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Infuse1;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Infuse2 = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Infuse2;
                refFormGastroenterology.PRESCRIPTION_mgIVonweek0week2week6then = refFormGastroenterologyViewModel.PRESCRIPTION_mgIVonweek0week2week6then;
                refFormGastroenterology.PRESCRIPTION_mgIVevery = refFormGastroenterologyViewModel.PRESCRIPTION_mgIVevery;
                refFormGastroenterology.PRESCRIPTION_weeksfor = refFormGastroenterologyViewModel.PRESCRIPTION_weeksfor;
                refFormGastroenterology.PRESCRIPTION_infusions = refFormGastroenterologyViewModel.PRESCRIPTION_infusions;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox6 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox6;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Simponi = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Simponi;
                refFormGastroenterology.ChkBox_PRESCRIPTION_100mgSmartJect = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_100mgSmartJect;
                refFormGastroenterology.ChkBox_PRESCRIPTION_100mgPrefilledSyringe = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_100mgPrefilledSyringe;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Inject200mgsubcutaneouslyatweek0 = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Inject200mgsubcutaneouslyatweek0;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Inject100mgsubcutaneouslyonceevery4weeks = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Inject100mgsubcutaneouslyonceevery4weeks;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox7 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox7;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Epipen = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Epipen;
                refFormGastroenterology.ChkBox_PRESCRIPTION_0_3mg = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_0_3mg;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox8 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox8;
                refFormGastroenterology.ChkBox_PRESCRIPTION_Xifaxan = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_Xifaxan;
                refFormGastroenterology.ChkBox_PRESCRIPTION_1tabletbymouthtwiceaday = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_1tabletbymouthtwiceaday;
                refFormGastroenterology.ChkBox_PRESCRIPTION_1tabletbymouththreetimesaday = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_1tabletbymouththreetimesaday;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox9 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox9;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox10 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox10;
                refFormGastroenterology.ChkBox_PRESCRIPTION_1Other = refFormGastroenterologyViewModel.ChkBox_PRESCRIPTION_1Other;
                refFormGastroenterology.PRESCRIPTION_TxtBox1 = refFormGastroenterologyViewModel.PRESCRIPTION_TxtBox1;
                refFormGastroenterology.PRESCRIPTION_TxtBox2 = refFormGastroenterologyViewModel.PRESCRIPTION_TxtBox2;
                refFormGastroenterology.PRESCRIPTION_Quantity_TxtBox3 = refFormGastroenterologyViewModel.PRESCRIPTION_Quantity_TxtBox3;
                refFormGastroenterology.PRESCRIPTION_REFILLS_None_TxtBox11 = refFormGastroenterologyViewModel.PRESCRIPTION_REFILLS_None_TxtBox11;
                refFormGastroenterology.ChkBox_Stelara = refFormGastroenterologyViewModel.ChkBox_Stelara;
                refFormGastroenterology.Stelara_Refills_TxtBox = refFormGastroenterologyViewModel.Stelara_Refills_TxtBox;

                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormGastroenterology.ModifiedBy = CurrentUser.UserId;
                refFormGastroenterology.ModifiedOn = DateTime.UtcNow;

                refFormGastroenterology.IsSignatured = refFormGastroenterologyViewModel.IsSignatured;
                if (IsEdit)
                {
                    _unitOfWork.RefFormGastroenterologyRepository.Update(refFormGastroenterology);
                    AuditLogger.AuditTracker("Edit GastroenterologyReferralForm", "A GastroenterologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormGastroenterology.CreatedBy = CurrentUser.UserId;
                    refFormGastroenterology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormGastroenterologyRepository.Insert(refFormGastroenterology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New GastroenterologyReferralForm", "A GastroenterologyReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormGastroenterologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormGastroenterology.RefFormGastroenterologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save Gastroenterology Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method GastroenterologyReferralForm PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save Gastroenterology Referral Form Unsuccessfully.", success = false });
        }
        //ggca hepatology referral form
        public ActionResult ggca_hepatology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca hepatology referral form"));
            return RedirectToAction("HepatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 48 });
        }
        //laca hepatology referral form
        public ActionResult laca_hepatology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Laca hepatology referral form"));
            return RedirectToAction("HepatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 49 });
        }
        //lmfl hepatology referral form
        public ActionResult lmfl_hepatology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl hepatology referral form"));
            return RedirectToAction("HepatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 50 });
        }
        //ofl hepatology referral form
        public ActionResult ofl_hepatology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl hepatology referral form"));
            return RedirectToAction("HepatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 51 });
        }
        //nola Hepatology................................
        public ActionResult nola_hepatology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola Hepatology Referral Form"));
            return RedirectToAction("HepatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 30 });
        }

        //Hepatology.....................................
        public ActionResult HepatologyReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Hepatology Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 7;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormHepatologyViewModel refFormHepatologyViewModel = new RefFormHepatologyViewModel();

                //Set ReferralFormId
                refFormHepatologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormHepatologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormHepatologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormHepatologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormHepatologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormHepatologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormHepatologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormHepatologyViewModel.PhysicianFullName = physician.FullName;
                        refFormHepatologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormHepatologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormHepatologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormHepatologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormHepatologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormHepatologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormHepatologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormHepatology refFormHepatology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormHepatology = _unitOfWork.RefFormHepatologyRepository.GetSingle(t => t.RefFormHeptalogyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormHepatology == null) refFormHepatology = new RefFormHepatology();


                    refFormHepatologyViewModel.RefFormHeptalogyId = refFormHepatology.RefFormHeptalogyId;

                    //Form
                    //Add your code here.



                    refFormHepatologyViewModel.RefFormHeptalogyId = refFormHepatology.RefFormHeptalogyId;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_B18_2Chronic = refFormHepatology.ChkBox_CLINICAL_B18_2Chronic ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_K72_90 = refFormHepatology.ChkBox_CLINICAL_K72_90 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_K72_91 = refFormHepatology.ChkBox_CLINICAL_K72_91 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_C22_0 = refFormHepatology.ChkBox_CLINICAL_C22_0 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_C22_2 = refFormHepatology.ChkBox_CLINICAL_C22_2 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_C22_7 = refFormHepatology.ChkBox_CLINICAL_C22_7 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_C22_8 = refFormHepatology.ChkBox_CLINICAL_C22_8 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Other = refFormHepatology.ChkBox_CLINICAL_Other ?? false;
                    refFormHepatologyViewModel.Clinical_Other_TxtBox = refFormHepatology.Clinical_Other_TxtBox;
                    refFormHepatologyViewModel.Clinical_Drug_Allergies_TxtBox = refFormHepatology.Clinical_Drug_Allergies_TxtBox;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Genotype_1 = refFormHepatology.ChkBox_CLINICAL_Genotype_1 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Genotype_1a = refFormHepatology.ChkBox_CLINICAL_Genotype_1a ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_NSSA_Yes = refFormHepatology.ChkBox_CLINICAL_NSSA_Yes ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_NSSA_No = refFormHepatology.ChkBox_CLINICAL_NSSA_No ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_1b = refFormHepatology.ChkBox_CLINICAL_1b ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_2 = refFormHepatology.ChkBox_CLINICAL_2 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_3 = refFormHepatology.ChkBox_CLINICAL_3 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_4 = refFormHepatology.ChkBox_CLINICAL_4 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_5 = refFormHepatology.ChkBox_CLINICAL_5 ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_6 = refFormHepatology.ChkBox_CLINICAL_6 ?? false;
                    refFormHepatologyViewModel.CLINICAL_Viral_Load_TxtBox = refFormHepatology.CLINICAL_Viral_Load_TxtBox;
                    refFormHepatologyViewModel.CLINICAL_Viral_Load_TxtBox_Date = refFormHepatology.CLINICAL_Viral_Load_TxtBox_Date.HasValue ? refFormHepatology.CLINICAL_Viral_Load_TxtBox_Date.Value : DateTime.UtcNow;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Treatment_Naive = refFormHepatology.ChkBox_CLINICAL_Treatment_Naive ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Previously_Treated = refFormHepatology.ChkBox_CLINICAL_Previously_Treated ?? false;
                    refFormHepatologyViewModel.CLINICAL_Prior_treatment_TxtBox = refFormHepatology.CLINICAL_Prior_treatment_TxtBox;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Non_Responder = refFormHepatology.ChkBox_CLINICAL_Non_Responder ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Responder_Relapser = refFormHepatology.ChkBox_CLINICAL_Responder_Relapser ?? false;
                    refFormHepatologyViewModel.CLINICAL_previous_therapy_from_TxtBox_Date = refFormHepatology.CLINICAL_previous_therapy_from_TxtBox_Date.HasValue ? refFormHepatology.CLINICAL_previous_therapy_from_TxtBox_Date.Value : DateTime.UtcNow;
                    refFormHepatologyViewModel.CLINICAL_previous_therapy_to_TxtBox_Date1 = refFormHepatology.CLINICAL_previous_therapy_to_TxtBox_Date1.HasValue ? refFormHepatology.CLINICAL_previous_therapy_to_TxtBox_Date1.Value : DateTime.UtcNow;
                    refFormHepatologyViewModel.CLINICAL_Total_of_months_TxtBox = refFormHepatology.CLINICAL_Total_of_months_TxtBox != null ? refFormHepatology.CLINICAL_Total_of_months_TxtBox.Value : 0;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_HIV_Coinfected_Yes = refFormHepatology.ChkBox_CLINICAL_HIV_Coinfected_Yes ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_HIV_Coinfected_No = refFormHepatology.ChkBox_CLINICAL_HIV_Coinfected_No ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_HBV_Coinfected_Yes = refFormHepatology.ChkBox_CLINICAL_HBV_Coinfected_Yes ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_HBV_Coinfected_No = refFormHepatology.ChkBox_CLINICAL_HBV_Coinfected_No ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Compensated_Liver_Disease_Yes = refFormHepatology.ChkBox_CLINICAL_Compensated_Liver_Disease_Yes ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Compensated_Liver_Disease_No = refFormHepatology.ChkBox_CLINICAL_Compensated_Liver_Disease_No ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Cirrhosis_Yes = refFormHepatology.ChkBox_CLINICAL_Cirrhosis_Yes ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Cirrhosis_No = refFormHepatology.ChkBox_CLINICAL_Cirrhosis_No ?? false;
                    refFormHepatologyViewModel.CLINICAL_Metavir_Score_TxtBox = refFormHepatology.CLINICAL_Metavir_Score_TxtBox;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Solid_Organ_Yes = refFormHepatology.ChkBox_CLINICAL_Solid_Organ_Yes ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Solid_Organ_No = refFormHepatology.ChkBox_CLINICAL_Solid_Organ_No ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Awaiting_Liver_Transplant_Yes = refFormHepatology.ChkBox_CLINICAL_Awaiting_Liver_Transplant_Yes ?? false;
                    refFormHepatologyViewModel.ChkBox_CLINICAL_Awaiting_Liver_Transplant_No = refFormHepatology.ChkBox_CLINICAL_Awaiting_Liver_Transplant_No ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Daklinza = refFormHepatology.ChkBox_PRESCRIPTION_Daklinza ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_60mg = refFormHepatology.ChkBox_PRESCRIPTION_60mg ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_30mg = refFormHepatology.ChkBox_PRESCRIPTION_30mg ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_90mg = refFormHepatology.ChkBox_PRESCRIPTION_90mg ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox1 = refFormHepatology.PRESCRIPTION_Refills_TxtBox1;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Epclusa = refFormHepatology.ChkBox_PRESCRIPTION_Epclusa ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox2 = refFormHepatology.PRESCRIPTION_Refills_TxtBox2;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Harvoni = refFormHepatology.ChkBox_PRESCRIPTION_Harvoni ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox3 = refFormHepatology.PRESCRIPTION_Refills_TxtBox3;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Olysio = refFormHepatology.ChkBox_PRESCRIPTION_Olysio ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox4 = refFormHepatology.PRESCRIPTION_Refills_TxtBox4;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Sovaldi = refFormHepatology.ChkBox_PRESCRIPTION_Sovaldi ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox5 = refFormHepatology.PRESCRIPTION_Refills_TxtBox5;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Technivie = refFormHepatology.ChkBox_PRESCRIPTION_Technivie ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox6 = refFormHepatology.PRESCRIPTION_Refills_TxtBox6;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Viekira_Pak = refFormHepatology.ChkBox_PRESCRIPTION_Viekira_Pak ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox7 = refFormHepatology.PRESCRIPTION_Refills_TxtBox7;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Viekira_XR = refFormHepatology.ChkBox_PRESCRIPTION_Viekira_XR ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox8 = refFormHepatology.PRESCRIPTION_Refills_TxtBox8;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Zepatier = refFormHepatology.ChkBox_PRESCRIPTION_Zepatier ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox9 = refFormHepatology.PRESCRIPTION_Refills_TxtBox9;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Moderiba = refFormHepatology.ChkBox_PRESCRIPTION_Moderiba ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_600mgAMand600mgPM1 = refFormHepatology.ChkBox_PRESCRIPTION_600mgAMand600mgPM1 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_600mgAMand400mgPM1 = refFormHepatology.ChkBox_PRESCRIPTION_600mgAMand400mgPM1 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Ribavirin = refFormHepatology.ChkBox_PRESCRIPTION_Ribavirin ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_200mg_Tabs1 = refFormHepatology.ChkBox_PRESCRIPTION_200mg_Tabs1 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_200mg_Caps1 = refFormHepatology.ChkBox_PRESCRIPTION_200mg_Caps1 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_400mgAMand400mgPM1 = refFormHepatology.ChkBox_PRESCRIPTION_400mgAMand400mgPM1 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_400mgAMand200mgPM1 = refFormHepatology.ChkBox_PRESCRIPTION_400mgAMand200mgPM1 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Ribasphere = refFormHepatology.ChkBox_PRESCRIPTION_Ribasphere ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_200mg_Tabs2 = refFormHepatology.ChkBox_PRESCRIPTION_200mg_Tabs2 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_200mg_Caps2 = refFormHepatology.ChkBox_PRESCRIPTION_200mg_Caps2 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Other = refFormHepatology.ChkBox_PRESCRIPTION_Other ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Take_mg_AM = refFormHepatology.PRESCRIPTION_Take_mg_AM;
                    refFormHepatologyViewModel.PRESCRIPTION_Take_mg_PM = refFormHepatology.PRESCRIPTION_Take_mg_PM;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox10 = refFormHepatology.PRESCRIPTION_Refills_TxtBox10;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Riba_Pak = refFormHepatology.ChkBox_PRESCRIPTION_Riba_Pak ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_600mgAMand600mgPM2 = refFormHepatology.ChkBox_PRESCRIPTION_600mgAMand600mgPM2 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_600mgAMand400mgPM2 = refFormHepatology.ChkBox_PRESCRIPTION_600mgAMand400mgPM2 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Moderiba_Pak = refFormHepatology.ChkBox_PRESCRIPTION_Moderiba_Pak ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_400mgAMand400mgPM2 = refFormHepatology.ChkBox_PRESCRIPTION_400mgAMand400mgPM2 ?? false;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_400mgAMand200mgPM2 = refFormHepatology.ChkBox_PRESCRIPTION_400mgAMand200mgPM2 ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox11 = refFormHepatology.PRESCRIPTION_Refills_TxtBox11;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Xifaxan = refFormHepatology.ChkBox_PRESCRIPTION_Xifaxan ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Lactulose_TxtBox = refFormHepatology.PRESCRIPTION_Lactulose_TxtBox;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox12 = refFormHepatology.PRESCRIPTION_Refills_TxtBox12;
                    refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Other_Last = refFormHepatology.ChkBox_PRESCRIPTION_Other_Last ?? false;
                    refFormHepatologyViewModel.PRESCRIPTION_Other_Last_TxtBox1 = refFormHepatology.PRESCRIPTION_Other_Last_TxtBox1;
                    refFormHepatologyViewModel.PRESCRIPTION_Other_Last_TxtBox2 = refFormHepatology.PRESCRIPTION_Other_Last_TxtBox2;
                    refFormHepatologyViewModel.PRESCRIPTION_Other_Quantity_TxtBox = refFormHepatology.PRESCRIPTION_Other_Quantity_TxtBox;
                    refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox13 = refFormHepatology.PRESCRIPTION_Refills_TxtBox13;

                    refFormHepatologyViewModel.FormDate = refFormHepatology.FormDate;
                    refFormHepatologyViewModel.FormNeedsByDate = refFormHepatology.FormNeedsByDate;
                    refFormHepatologyViewModel.ChkBox_ShipToPatient = refFormHepatology.ChkBox_ShipToPatient ?? false;
                    refFormHepatologyViewModel.ChkBox_ShipToOffice = refFormHepatology.ChkBox_ShipToOffice ?? false;
                    refFormHepatologyViewModel.ChkBox_ShipToOther = refFormHepatology.ChkBox_ShipToOther ?? false;
                    refFormHepatologyViewModel.TxtBox_ShipToOther = refFormHepatology.TxtBox_ShipToOther;




                    //refFormHepatologyViewModel.Date1 = refFormHepatology.Date1;
                    //refFormHepatologyViewModel.Date2 = refFormHepatology.Date2;

                    refFormHepatologyViewModel.IsSignatured = refFormHepatology.IsSignatured ?? false;

                    return View(refFormHepatologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method HepatologyReferralForm PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormHepatologyViewModel());
        }

        [HttpPost]
        public JsonResult HepatologyReferralForm(RefFormHepatologyViewModel refFormHepatologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormHepatologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormHepatology refFormHepatology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormHepatologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormHepatology = _unitOfWork.RefFormHepatologyRepository.GetSingle(t => t.RefFormHeptalogyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormHepatology == null)
                {
                    refFormHepatology = new RefFormHepatology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form



                refFormHepatology.RefFormHeptalogyId = refFormHepatologyViewModel.RefFormHeptalogyId;
                refFormHepatology.ChkBox_CLINICAL_B18_2Chronic = refFormHepatologyViewModel.ChkBox_CLINICAL_B18_2Chronic;
                refFormHepatology.ChkBox_CLINICAL_K72_90 = refFormHepatologyViewModel.ChkBox_CLINICAL_K72_90;
                refFormHepatology.ChkBox_CLINICAL_K72_91 = refFormHepatologyViewModel.ChkBox_CLINICAL_K72_91;
                refFormHepatology.ChkBox_CLINICAL_C22_0 = refFormHepatologyViewModel.ChkBox_CLINICAL_C22_0;
                refFormHepatology.ChkBox_CLINICAL_C22_2 = refFormHepatologyViewModel.ChkBox_CLINICAL_C22_2;
                refFormHepatology.ChkBox_CLINICAL_C22_7 = refFormHepatologyViewModel.ChkBox_CLINICAL_C22_7;
                refFormHepatology.ChkBox_CLINICAL_C22_8 = refFormHepatologyViewModel.ChkBox_CLINICAL_C22_8;
                refFormHepatology.ChkBox_CLINICAL_Other = refFormHepatologyViewModel.ChkBox_CLINICAL_Other;
                refFormHepatology.Clinical_Other_TxtBox = refFormHepatologyViewModel.Clinical_Other_TxtBox;
                refFormHepatology.Clinical_Drug_Allergies_TxtBox = refFormHepatologyViewModel.Clinical_Drug_Allergies_TxtBox;
                refFormHepatology.ChkBox_CLINICAL_Genotype_1 = refFormHepatologyViewModel.ChkBox_CLINICAL_Genotype_1;
                refFormHepatology.ChkBox_CLINICAL_Genotype_1a = refFormHepatologyViewModel.ChkBox_CLINICAL_Genotype_1a;
                refFormHepatology.ChkBox_CLINICAL_NSSA_Yes = refFormHepatologyViewModel.ChkBox_CLINICAL_NSSA_Yes;
                refFormHepatology.ChkBox_CLINICAL_NSSA_No = refFormHepatologyViewModel.ChkBox_CLINICAL_NSSA_No;
                refFormHepatology.ChkBox_CLINICAL_1b = refFormHepatologyViewModel.ChkBox_CLINICAL_1b;
                refFormHepatology.ChkBox_CLINICAL_2 = refFormHepatologyViewModel.ChkBox_CLINICAL_2;
                refFormHepatology.ChkBox_CLINICAL_3 = refFormHepatologyViewModel.ChkBox_CLINICAL_3;
                refFormHepatology.ChkBox_CLINICAL_4 = refFormHepatologyViewModel.ChkBox_CLINICAL_4;
                refFormHepatology.ChkBox_CLINICAL_5 = refFormHepatologyViewModel.ChkBox_CLINICAL_5;
                refFormHepatology.ChkBox_CLINICAL_6 = refFormHepatologyViewModel.ChkBox_CLINICAL_6;
                refFormHepatology.CLINICAL_Viral_Load_TxtBox = refFormHepatologyViewModel.CLINICAL_Viral_Load_TxtBox;
                refFormHepatology.CLINICAL_Viral_Load_TxtBox_Date = refFormHepatologyViewModel.CLINICAL_Viral_Load_TxtBox_Date;
                refFormHepatology.ChkBox_CLINICAL_Treatment_Naive = refFormHepatologyViewModel.ChkBox_CLINICAL_Treatment_Naive;
                refFormHepatology.ChkBox_CLINICAL_Previously_Treated = refFormHepatologyViewModel.ChkBox_CLINICAL_Previously_Treated;
                refFormHepatology.CLINICAL_Prior_treatment_TxtBox = refFormHepatologyViewModel.CLINICAL_Prior_treatment_TxtBox;
                refFormHepatology.ChkBox_CLINICAL_Non_Responder = refFormHepatologyViewModel.ChkBox_CLINICAL_Non_Responder;
                refFormHepatology.ChkBox_CLINICAL_Responder_Relapser = refFormHepatologyViewModel.ChkBox_CLINICAL_Responder_Relapser;
                refFormHepatology.CLINICAL_previous_therapy_from_TxtBox_Date = refFormHepatologyViewModel.CLINICAL_previous_therapy_from_TxtBox_Date;
                refFormHepatology.CLINICAL_previous_therapy_to_TxtBox_Date1 = refFormHepatologyViewModel.CLINICAL_previous_therapy_to_TxtBox_Date1;
                refFormHepatology.CLINICAL_Total_of_months_TxtBox = refFormHepatologyViewModel.CLINICAL_Total_of_months_TxtBox;
                refFormHepatology.ChkBox_CLINICAL_HIV_Coinfected_Yes = refFormHepatologyViewModel.ChkBox_CLINICAL_HIV_Coinfected_Yes;
                refFormHepatology.ChkBox_CLINICAL_HIV_Coinfected_No = refFormHepatologyViewModel.ChkBox_CLINICAL_HIV_Coinfected_No;
                refFormHepatology.ChkBox_CLINICAL_HBV_Coinfected_Yes = refFormHepatologyViewModel.ChkBox_CLINICAL_HBV_Coinfected_Yes;
                refFormHepatology.ChkBox_CLINICAL_HBV_Coinfected_No = refFormHepatologyViewModel.ChkBox_CLINICAL_HBV_Coinfected_No;
                refFormHepatology.ChkBox_CLINICAL_Compensated_Liver_Disease_Yes = refFormHepatologyViewModel.ChkBox_CLINICAL_Compensated_Liver_Disease_Yes;
                refFormHepatology.ChkBox_CLINICAL_Compensated_Liver_Disease_No = refFormHepatologyViewModel.ChkBox_CLINICAL_Compensated_Liver_Disease_No;
                refFormHepatology.ChkBox_CLINICAL_Cirrhosis_Yes = refFormHepatologyViewModel.ChkBox_CLINICAL_Cirrhosis_Yes;
                refFormHepatology.ChkBox_CLINICAL_Cirrhosis_No = refFormHepatologyViewModel.ChkBox_CLINICAL_Cirrhosis_No;
                refFormHepatology.CLINICAL_Metavir_Score_TxtBox = refFormHepatologyViewModel.CLINICAL_Metavir_Score_TxtBox;
                refFormHepatology.ChkBox_CLINICAL_Solid_Organ_Yes = refFormHepatologyViewModel.ChkBox_CLINICAL_Solid_Organ_Yes;
                refFormHepatology.ChkBox_CLINICAL_Solid_Organ_No = refFormHepatologyViewModel.ChkBox_CLINICAL_Solid_Organ_No;
                refFormHepatology.ChkBox_CLINICAL_Awaiting_Liver_Transplant_Yes = refFormHepatologyViewModel.ChkBox_CLINICAL_Awaiting_Liver_Transplant_Yes;
                refFormHepatology.ChkBox_CLINICAL_Awaiting_Liver_Transplant_No = refFormHepatologyViewModel.ChkBox_CLINICAL_Awaiting_Liver_Transplant_No;
                refFormHepatology.ChkBox_PRESCRIPTION_Daklinza = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Daklinza;
                refFormHepatology.ChkBox_PRESCRIPTION_60mg = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_60mg;
                refFormHepatology.ChkBox_PRESCRIPTION_30mg = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_30mg;
                refFormHepatology.ChkBox_PRESCRIPTION_90mg = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_90mg;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox1 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox1;
                refFormHepatology.ChkBox_PRESCRIPTION_Epclusa = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Epclusa;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox2 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox2;
                refFormHepatology.ChkBox_PRESCRIPTION_Harvoni = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Harvoni;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox3 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox3;
                refFormHepatology.ChkBox_PRESCRIPTION_Olysio = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Olysio;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox4 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox4;
                refFormHepatology.ChkBox_PRESCRIPTION_Sovaldi = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Sovaldi;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox5 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox5;
                refFormHepatology.ChkBox_PRESCRIPTION_Technivie = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Technivie;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox6 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox6;
                refFormHepatology.ChkBox_PRESCRIPTION_Viekira_Pak = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Viekira_Pak;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox7 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox7;
                refFormHepatology.ChkBox_PRESCRIPTION_Viekira_XR = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Viekira_XR;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox8 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox8;
                refFormHepatology.ChkBox_PRESCRIPTION_Zepatier = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Zepatier;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox9 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox9;
                refFormHepatology.ChkBox_PRESCRIPTION_Moderiba = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Moderiba;
                refFormHepatology.ChkBox_PRESCRIPTION_600mgAMand600mgPM1 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_600mgAMand600mgPM1;
                refFormHepatology.ChkBox_PRESCRIPTION_600mgAMand400mgPM1 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_600mgAMand400mgPM1;
                refFormHepatology.ChkBox_PRESCRIPTION_Ribavirin = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Ribavirin;
                refFormHepatology.ChkBox_PRESCRIPTION_200mg_Tabs1 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_200mg_Tabs1;
                refFormHepatology.ChkBox_PRESCRIPTION_200mg_Caps1 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_200mg_Caps1;
                refFormHepatology.ChkBox_PRESCRIPTION_400mgAMand400mgPM1 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_400mgAMand400mgPM1;
                refFormHepatology.ChkBox_PRESCRIPTION_400mgAMand200mgPM1 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_400mgAMand200mgPM1;
                refFormHepatology.ChkBox_PRESCRIPTION_Ribasphere = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Ribasphere;
                refFormHepatology.ChkBox_PRESCRIPTION_200mg_Tabs2 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_200mg_Tabs2;
                refFormHepatology.ChkBox_PRESCRIPTION_200mg_Caps2 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_200mg_Caps2;
                refFormHepatology.ChkBox_PRESCRIPTION_Other = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Other;
                refFormHepatology.PRESCRIPTION_Take_mg_AM = refFormHepatologyViewModel.PRESCRIPTION_Take_mg_AM;
                refFormHepatology.PRESCRIPTION_Take_mg_PM = refFormHepatologyViewModel.PRESCRIPTION_Take_mg_PM;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox10 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox10;
                refFormHepatology.ChkBox_PRESCRIPTION_Riba_Pak = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Riba_Pak;
                refFormHepatology.ChkBox_PRESCRIPTION_600mgAMand600mgPM2 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_600mgAMand600mgPM2;
                refFormHepatology.ChkBox_PRESCRIPTION_600mgAMand400mgPM2 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_600mgAMand400mgPM2;
                refFormHepatology.ChkBox_PRESCRIPTION_Moderiba_Pak = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Moderiba_Pak;
                refFormHepatology.ChkBox_PRESCRIPTION_400mgAMand400mgPM2 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_400mgAMand400mgPM2;
                refFormHepatology.ChkBox_PRESCRIPTION_400mgAMand200mgPM2 = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_400mgAMand200mgPM2;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox11 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox11;
                refFormHepatology.ChkBox_PRESCRIPTION_Xifaxan = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Xifaxan;
                refFormHepatology.PRESCRIPTION_Lactulose_TxtBox = refFormHepatologyViewModel.PRESCRIPTION_Lactulose_TxtBox;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox12 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox12;
                refFormHepatology.ChkBox_PRESCRIPTION_Other_Last = refFormHepatologyViewModel.ChkBox_PRESCRIPTION_Other_Last;
                refFormHepatology.PRESCRIPTION_Other_Last_TxtBox1 = refFormHepatologyViewModel.PRESCRIPTION_Other_Last_TxtBox1;
                refFormHepatology.PRESCRIPTION_Other_Last_TxtBox2 = refFormHepatologyViewModel.PRESCRIPTION_Other_Last_TxtBox2;
                refFormHepatology.PRESCRIPTION_Other_Quantity_TxtBox = refFormHepatologyViewModel.PRESCRIPTION_Other_Quantity_TxtBox;
                refFormHepatology.PRESCRIPTION_Refills_TxtBox13 = refFormHepatologyViewModel.PRESCRIPTION_Refills_TxtBox13;
                refFormHepatology.FormDate = refFormHepatologyViewModel.FormDate;
                refFormHepatology.FormNeedsByDate = refFormHepatologyViewModel.FormNeedsByDate;
                refFormHepatology.ChkBox_ShipToPatient = refFormHepatologyViewModel.ChkBox_ShipToPatient;
                refFormHepatology.ChkBox_ShipToOffice = refFormHepatologyViewModel.ChkBox_ShipToOffice;
                refFormHepatology.ChkBox_ShipToOther = refFormHepatologyViewModel.ChkBox_ShipToOther;
                refFormHepatology.TxtBox_ShipToOther = refFormHepatologyViewModel.TxtBox_ShipToOther;



                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormHepatology.ModifiedBy = CurrentUser.UserId;
                refFormHepatology.ModifiedOn = DateTime.UtcNow;

                refFormHepatology.IsSignatured = refFormHepatologyViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormHepatologyRepository.Update(refFormHepatology);
                    AuditLogger.AuditTracker("Edit HepatologyReferralForm", "A HepatologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormHepatology.CreatedBy = CurrentUser.UserId;
                    refFormHepatology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormHepatologyRepository.Insert(refFormHepatology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New HepatologyReferralForm", "A HepatologyReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormHepatologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormHepatology.RefFormHeptalogyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save Heptalogy Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method HeptalogyReferralForm PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save Heptalogy Referral Form Unsuccessfully.", success = false });
        }
        //lmfl_growthhormone_referral_form
        public ActionResult lmfl_growthhormone_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl growthhormone referral form"));
            return RedirectToAction("GrowthHormoneReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 47 });
        }
        //GrowthHormone..................................

        public ActionResult GrowthHormoneReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Growth Hormone Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 7;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormGrowthHormoneViewModel refFormGrowthHormoneViewModel = new RefFormGrowthHormoneViewModel();

                //Set ReferralFormId
                refFormGrowthHormoneViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormGrowthHormoneViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormGrowthHormoneViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormGrowthHormoneViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormGrowthHormoneViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormGrowthHormoneViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormGrowthHormoneViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormGrowthHormoneViewModel.PhysicianFullName = physician.FullName;
                        refFormGrowthHormoneViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormGrowthHormoneViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormGrowthHormoneViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormGrowthHormoneViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormGrowthHormoneViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormGrowthHormoneViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormGrowthHormoneViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormGrowthHormone refFormGrowthHormone = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormGrowthHormone = _unitOfWork.RefFormGrowthHormoneRepository.GetSingle(t => t.RefFormGrowthHormoneId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormGrowthHormone == null) refFormGrowthHormone = new RefFormGrowthHormone();


                    refFormGrowthHormoneViewModel.RefFormGrowthHormoneId = refFormGrowthHormone.RefFormGrowthHormoneId;

                    //Form
                    //Add your code here.



                    refFormGrowthHormoneViewModel.RefFormGrowthHormoneId = refFormGrowthHormone.RefFormGrowthHormoneId;
                    refFormGrowthHormoneViewModel.CLINICAL_Diagnosis_TxtBox = refFormGrowthHormone.CLINICAL_Diagnosis_TxtBox;
                    refFormGrowthHormoneViewModel.CLINICAL_ICD_10 = refFormGrowthHormone.CLINICAL_ICD_10;
                    refFormGrowthHormoneViewModel.CLINICAL_Drug_Allergies = refFormGrowthHormone.CLINICAL_Drug_Allergies;
                    refFormGrowthHormoneViewModel.ChkBox_Epiphysis_open_Yes = refFormGrowthHormone.ChkBox_Epiphysis_open_Yes ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_Epiphysis_open_No = refFormGrowthHormone.ChkBox_Epiphysis_open_No ?? false;
                    refFormGrowthHormoneViewModel.CLINICAL_Drug_BoneAge = refFormGrowthHormone.CLINICAL_Drug_BoneAge != null ? refFormGrowthHormone.CLINICAL_Drug_BoneAge.Value : 0;
                    refFormGrowthHormoneViewModel.CLINICAL_Drug_Growth_Velocity = refFormGrowthHormone.CLINICAL_Drug_Growth_Velocity;
                    refFormGrowthHormoneViewModel.CLINICAL_Strim1_TxtBox1 = refFormGrowthHormone.CLINICAL_Strim1_TxtBox1;
                    refFormGrowthHormoneViewModel.CLINICAL_Strim1_TxtBox2 = refFormGrowthHormone.CLINICAL_Strim1_TxtBox2;
                    refFormGrowthHormoneViewModel.CLINICAL_Strim1_TxtBox3 = refFormGrowthHormone.CLINICAL_Strim1_TxtBox3;
                    refFormGrowthHormoneViewModel.ChkBox_Pass1 = refFormGrowthHormone.ChkBox_Pass1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_Fail1 = refFormGrowthHormone.ChkBox_Fail1 ?? false;
                    refFormGrowthHormoneViewModel.CLINICAL_Patent_Weight_TxtBox = refFormGrowthHormone.CLINICAL_Patent_Weight_TxtBox != null ? refFormGrowthHormone.CLINICAL_Patent_Weight_TxtBox.Value : 0D;
                    refFormGrowthHormoneViewModel.CLINICAL_Patent_Height_TxtBox = refFormGrowthHormone.CLINICAL_Patent_Height_TxtBox != null ? refFormGrowthHormone.CLINICAL_Patent_Height_TxtBox.Value : 0D;
                    refFormGrowthHormoneViewModel.CLINICAL_Strim2_TxtBox1 = refFormGrowthHormone.CLINICAL_Strim2_TxtBox1;
                    refFormGrowthHormoneViewModel.CLINICAL_Strim2_TxtBox2 = refFormGrowthHormone.CLINICAL_Strim2_TxtBox2;
                    refFormGrowthHormoneViewModel.CLINICAL_Strim2_TxtBox3 = refFormGrowthHormone.CLINICAL_Strim2_TxtBox3;
                    refFormGrowthHormoneViewModel.ChkBox_Pass2 = refFormGrowthHormone.ChkBox_Pass2 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_Fail2 = refFormGrowthHormone.ChkBox_Fail2 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_Genotropin = refFormGrowthHormone.ChkBox_Genotropin ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_cartridge1 = refFormGrowthHormone.ChkBox_cartridge1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_5mg1 = refFormGrowthHormone.ChkBox_5mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_12mg1 = refFormGrowthHormone.ChkBox_12mg1 ?? false;
                    refFormGrowthHormoneViewModel.SIG_TxtBox1 = refFormGrowthHormone.SIG_TxtBox1;
                    refFormGrowthHormoneViewModel.ChkBox_mini_quick = refFormGrowthHormone.ChkBox_mini_quick ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_0_2mg1 = refFormGrowthHormone.ChkBox_0_2mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_0_4mg1 = refFormGrowthHormone.ChkBox_0_4mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_0_6mg1 = refFormGrowthHormone.ChkBox_0_6mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_0_8mg1 = refFormGrowthHormone.ChkBox_0_8mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_1_0mg1 = refFormGrowthHormone.ChkBox_1_0mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_1_2mg1 = refFormGrowthHormone.ChkBox_1_2mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_1_4mg1 = refFormGrowthHormone.ChkBox_1_4mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_1_6mg1 = refFormGrowthHormone.ChkBox_1_6mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_1_8mg1 = refFormGrowthHormone.ChkBox_1_8mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_2mg1 = refFormGrowthHormone.ChkBox_2mg1 ?? false;
                    refFormGrowthHormoneViewModel.RF_TxtBox1 = refFormGrowthHormone.RF_TxtBox1;
                    refFormGrowthHormoneViewModel.ChkBox_Humatrope = refFormGrowthHormone.ChkBox_Humatrope ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_cartridge2 = refFormGrowthHormone.ChkBox_cartridge2 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_6mg1 = refFormGrowthHormone.ChkBox_6mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_12mg2 = refFormGrowthHormone.ChkBox_12mg2 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_24mg1 = refFormGrowthHormone.ChkBox_24mg1 ?? false;
                    refFormGrowthHormoneViewModel.SIG_TxtBox2 = refFormGrowthHormone.SIG_TxtBox2;
                    refFormGrowthHormoneViewModel.ChkBox_vial1 = refFormGrowthHormone.ChkBox_vial1 ?? false;
                    refFormGrowthHormoneViewModel.RF_TxtBox2 = refFormGrowthHormone.RF_TxtBox2;
                    refFormGrowthHormoneViewModel.ChkBox_Norditropin = refFormGrowthHormone.ChkBox_Norditropin ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_FlexPro = refFormGrowthHormone.ChkBox_FlexPro ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_5mg2 = refFormGrowthHormone.ChkBox_5mg2 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_10mg1 = refFormGrowthHormone.ChkBox_10mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_15mg1 = refFormGrowthHormone.ChkBox_15mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_30mg1 = refFormGrowthHormone.ChkBox_30mg1 ?? false;
                    refFormGrowthHormoneViewModel.SIG_TxtBox3 = refFormGrowthHormone.SIG_TxtBox3;
                    refFormGrowthHormoneViewModel.RF_TxtBox3 = refFormGrowthHormone.RF_TxtBox3;
                    refFormGrowthHormoneViewModel.ChkBox_cartridge3 = refFormGrowthHormone.ChkBox_cartridge3 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_NutropinAQ = refFormGrowthHormone.ChkBox_NutropinAQ ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_NuSpinPen = refFormGrowthHormone.ChkBox_NuSpinPen ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_5mg3 = refFormGrowthHormone.ChkBox_5mg3 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_10mg2 = refFormGrowthHormone.ChkBox_10mg2 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_20mg1 = refFormGrowthHormone.ChkBox_20mg1 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_10mg3 = refFormGrowthHormone.ChkBox_10mg3 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_20mg2 = refFormGrowthHormone.ChkBox_20mg2 ?? false;
                    refFormGrowthHormoneViewModel.SIG_TxtBox4 = refFormGrowthHormone.SIG_TxtBox4;
                    refFormGrowthHormoneViewModel.RF_TxtBox4 = refFormGrowthHormone.RF_TxtBox4;
                    refFormGrowthHormoneViewModel.ChkBox_Omnitrope = refFormGrowthHormone.ChkBox_Omnitrope ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_vial2 = refFormGrowthHormone.ChkBox_vial2 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_cartridge4 = refFormGrowthHormone.ChkBox_cartridge4 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_5mg4 = refFormGrowthHormone.ChkBox_5mg4 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_10mg4 = refFormGrowthHormone.ChkBox_10mg4 ?? false;
                    refFormGrowthHormoneViewModel.SIG_TxtBox5 = refFormGrowthHormone.SIG_TxtBox5;
                    refFormGrowthHormoneViewModel.RF_TxtBox5 = refFormGrowthHormone.RF_TxtBox5;
                    refFormGrowthHormoneViewModel.ChkBox_Saizen = refFormGrowthHormone.ChkBox_Saizen ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_vial3 = refFormGrowthHormone.ChkBox_vial3 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_Click_Easy = refFormGrowthHormone.ChkBox_Click_Easy ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_5mg5 = refFormGrowthHormone.ChkBox_5mg5 ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_8_8mg1 = refFormGrowthHormone.ChkBox_8_8mg1 ?? false;
                    refFormGrowthHormoneViewModel.SIG_TxtBox6 = refFormGrowthHormone.SIG_TxtBox6;
                    refFormGrowthHormoneViewModel.RF_TxtBox6 = refFormGrowthHormone.RF_TxtBox6;
                    refFormGrowthHormoneViewModel.ChkBox_pen_needles = refFormGrowthHormone.ChkBox_pen_needles ?? false;
                    refFormGrowthHormoneViewModel.Size_TxtBox = refFormGrowthHormone.Size_TxtBox.HasValue ? refFormGrowthHormone.Size_TxtBox.Value : 0D;
                    refFormGrowthHormoneViewModel.Qty_TxtBox1 = refFormGrowthHormone.Qty_TxtBox1;
                    refFormGrowthHormoneViewModel.SyringeSize = refFormGrowthHormone.SyringeSize.HasValue ? refFormGrowthHormone.SyringeSize.Value : 0D;
                    refFormGrowthHormoneViewModel.Qty_TxtBox2 = refFormGrowthHormone.Qty_TxtBox2;

                    refFormGrowthHormoneViewModel.FormDate = refFormGrowthHormone.FormDate;
                    refFormGrowthHormoneViewModel.FormNeedsByDate = refFormGrowthHormone.FormNeedsByDate;
                    refFormGrowthHormoneViewModel.ChkBox_ShipToPatient = refFormGrowthHormone.ChkBox_ShipToPatient ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_ShipToOffice = refFormGrowthHormone.ChkBox_ShipToOffice ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_ShipToOther = refFormGrowthHormone.ChkBox_ShipToOther ?? false;
                    refFormGrowthHormoneViewModel.TxtBox_ShipToOther = refFormGrowthHormone.TxtBox_ShipToOther;

                    refFormGrowthHormoneViewModel.ChkBox_Epiphysis = refFormGrowthHormone.ChkBox_Epiphysis ?? false;
                    refFormGrowthHormoneViewModel.ChkBox_Syringe = refFormGrowthHormone.ChkBox_Syringe ?? false;









                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormGrowthHormoneViewModel.IsSignatured = refFormGrowthHormone.IsSignatured ?? false;

                    return View(refFormGrowthHormoneViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GrowthHormone Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormGrowthHormoneViewModel());
        }


        [HttpPost]
        public JsonResult GrowthHormoneReferralForm(RefFormGrowthHormoneViewModel refFormGrowthHormoneViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormGrowthHormoneViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormGrowthHormone refFormGrowthHormone = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormGrowthHormoneViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormGrowthHormone = _unitOfWork.RefFormGrowthHormoneRepository.GetSingle(t => t.RefFormGrowthHormoneId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormGrowthHormone == null)
                {
                    refFormGrowthHormone = new RefFormGrowthHormone();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form

                refFormGrowthHormone.RefFormGrowthHormoneId = refFormGrowthHormoneViewModel.RefFormGrowthHormoneId;
                refFormGrowthHormone.CLINICAL_Diagnosis_TxtBox = refFormGrowthHormoneViewModel.CLINICAL_Diagnosis_TxtBox;
                refFormGrowthHormone.CLINICAL_ICD_10 = refFormGrowthHormoneViewModel.CLINICAL_ICD_10;
                refFormGrowthHormone.CLINICAL_Drug_Allergies = refFormGrowthHormoneViewModel.CLINICAL_Drug_Allergies;
                refFormGrowthHormone.ChkBox_Epiphysis_open_Yes = refFormGrowthHormoneViewModel.ChkBox_Epiphysis_open_Yes;
                refFormGrowthHormone.ChkBox_Epiphysis_open_No = refFormGrowthHormoneViewModel.ChkBox_Epiphysis_open_No;
                refFormGrowthHormone.CLINICAL_Drug_BoneAge = refFormGrowthHormoneViewModel.CLINICAL_Drug_BoneAge;
                refFormGrowthHormone.CLINICAL_Drug_Growth_Velocity = refFormGrowthHormoneViewModel.CLINICAL_Drug_Growth_Velocity;
                refFormGrowthHormone.CLINICAL_Strim1_TxtBox1 = refFormGrowthHormoneViewModel.CLINICAL_Strim1_TxtBox1;
                refFormGrowthHormone.CLINICAL_Strim1_TxtBox2 = refFormGrowthHormoneViewModel.CLINICAL_Strim1_TxtBox2;
                refFormGrowthHormone.CLINICAL_Strim1_TxtBox3 = refFormGrowthHormoneViewModel.CLINICAL_Strim1_TxtBox3;
                refFormGrowthHormone.ChkBox_Pass1 = refFormGrowthHormoneViewModel.ChkBox_Pass1;
                refFormGrowthHormone.ChkBox_Fail1 = refFormGrowthHormoneViewModel.ChkBox_Fail1;
                refFormGrowthHormone.CLINICAL_Patent_Weight_TxtBox = refFormGrowthHormoneViewModel.CLINICAL_Patent_Weight_TxtBox;
                refFormGrowthHormone.CLINICAL_Patent_Height_TxtBox = refFormGrowthHormoneViewModel.CLINICAL_Patent_Height_TxtBox;
                refFormGrowthHormone.CLINICAL_Strim2_TxtBox1 = refFormGrowthHormoneViewModel.CLINICAL_Strim2_TxtBox1;
                refFormGrowthHormone.CLINICAL_Strim2_TxtBox2 = refFormGrowthHormoneViewModel.CLINICAL_Strim2_TxtBox2;
                refFormGrowthHormone.CLINICAL_Strim2_TxtBox3 = refFormGrowthHormoneViewModel.CLINICAL_Strim2_TxtBox3;
                refFormGrowthHormone.ChkBox_Pass2 = refFormGrowthHormoneViewModel.ChkBox_Pass2;
                refFormGrowthHormone.ChkBox_Fail2 = refFormGrowthHormoneViewModel.ChkBox_Fail2;
                refFormGrowthHormone.ChkBox_Genotropin = refFormGrowthHormoneViewModel.ChkBox_Genotropin;
                refFormGrowthHormone.ChkBox_cartridge1 = refFormGrowthHormoneViewModel.ChkBox_cartridge1;
                refFormGrowthHormone.ChkBox_5mg1 = refFormGrowthHormoneViewModel.ChkBox_5mg1;
                refFormGrowthHormone.ChkBox_12mg1 = refFormGrowthHormoneViewModel.ChkBox_12mg1;
                refFormGrowthHormone.SIG_TxtBox1 = refFormGrowthHormoneViewModel.SIG_TxtBox1;
                refFormGrowthHormone.ChkBox_mini_quick = refFormGrowthHormoneViewModel.ChkBox_mini_quick;
                refFormGrowthHormone.ChkBox_0_2mg1 = refFormGrowthHormoneViewModel.ChkBox_0_2mg1;
                refFormGrowthHormone.ChkBox_0_4mg1 = refFormGrowthHormoneViewModel.ChkBox_0_4mg1;
                refFormGrowthHormone.ChkBox_0_6mg1 = refFormGrowthHormoneViewModel.ChkBox_0_6mg1;
                refFormGrowthHormone.ChkBox_0_8mg1 = refFormGrowthHormoneViewModel.ChkBox_0_8mg1;
                refFormGrowthHormone.ChkBox_1_0mg1 = refFormGrowthHormoneViewModel.ChkBox_1_0mg1;
                refFormGrowthHormone.ChkBox_1_2mg1 = refFormGrowthHormoneViewModel.ChkBox_1_2mg1;
                refFormGrowthHormone.ChkBox_1_4mg1 = refFormGrowthHormoneViewModel.ChkBox_1_4mg1;
                refFormGrowthHormone.ChkBox_1_6mg1 = refFormGrowthHormoneViewModel.ChkBox_1_6mg1;
                refFormGrowthHormone.ChkBox_1_8mg1 = refFormGrowthHormoneViewModel.ChkBox_1_8mg1;
                refFormGrowthHormone.ChkBox_2mg1 = refFormGrowthHormoneViewModel.ChkBox_2mg1;
                refFormGrowthHormone.RF_TxtBox1 = refFormGrowthHormoneViewModel.RF_TxtBox1;
                refFormGrowthHormone.ChkBox_Humatrope = refFormGrowthHormoneViewModel.ChkBox_Humatrope;
                refFormGrowthHormone.ChkBox_cartridge2 = refFormGrowthHormoneViewModel.ChkBox_cartridge2;
                refFormGrowthHormone.ChkBox_6mg1 = refFormGrowthHormoneViewModel.ChkBox_6mg1;
                refFormGrowthHormone.ChkBox_12mg2 = refFormGrowthHormoneViewModel.ChkBox_12mg2;
                refFormGrowthHormone.ChkBox_24mg1 = refFormGrowthHormoneViewModel.ChkBox_24mg1;
                refFormGrowthHormone.SIG_TxtBox2 = refFormGrowthHormoneViewModel.SIG_TxtBox2;
                refFormGrowthHormone.ChkBox_vial1 = refFormGrowthHormoneViewModel.ChkBox_vial1;
                refFormGrowthHormone.RF_TxtBox2 = refFormGrowthHormoneViewModel.RF_TxtBox2;
                refFormGrowthHormone.ChkBox_Norditropin = refFormGrowthHormoneViewModel.ChkBox_Norditropin;
                refFormGrowthHormone.ChkBox_FlexPro = refFormGrowthHormoneViewModel.ChkBox_FlexPro;
                refFormGrowthHormone.ChkBox_5mg2 = refFormGrowthHormoneViewModel.ChkBox_5mg2;
                refFormGrowthHormone.ChkBox_10mg1 = refFormGrowthHormoneViewModel.ChkBox_10mg1;
                refFormGrowthHormone.ChkBox_15mg1 = refFormGrowthHormoneViewModel.ChkBox_15mg1;
                refFormGrowthHormone.ChkBox_30mg1 = refFormGrowthHormoneViewModel.ChkBox_30mg1;
                refFormGrowthHormone.SIG_TxtBox3 = refFormGrowthHormoneViewModel.SIG_TxtBox3;
                refFormGrowthHormone.RF_TxtBox3 = refFormGrowthHormoneViewModel.RF_TxtBox3;
                refFormGrowthHormone.ChkBox_cartridge3 = refFormGrowthHormoneViewModel.ChkBox_cartridge3;
                refFormGrowthHormone.ChkBox_NutropinAQ = refFormGrowthHormoneViewModel.ChkBox_NutropinAQ;
                refFormGrowthHormone.ChkBox_NuSpinPen = refFormGrowthHormoneViewModel.ChkBox_NuSpinPen;
                refFormGrowthHormone.ChkBox_5mg3 = refFormGrowthHormoneViewModel.ChkBox_5mg3;
                refFormGrowthHormone.ChkBox_10mg2 = refFormGrowthHormoneViewModel.ChkBox_10mg2;
                refFormGrowthHormone.ChkBox_20mg1 = refFormGrowthHormoneViewModel.ChkBox_20mg1;
                refFormGrowthHormone.ChkBox_10mg3 = refFormGrowthHormoneViewModel.ChkBox_10mg3;
                refFormGrowthHormone.ChkBox_20mg2 = refFormGrowthHormoneViewModel.ChkBox_20mg2;
                refFormGrowthHormone.SIG_TxtBox4 = refFormGrowthHormoneViewModel.SIG_TxtBox4;
                refFormGrowthHormone.RF_TxtBox4 = refFormGrowthHormoneViewModel.RF_TxtBox4;
                refFormGrowthHormone.ChkBox_Omnitrope = refFormGrowthHormoneViewModel.ChkBox_Omnitrope;
                refFormGrowthHormone.ChkBox_vial2 = refFormGrowthHormoneViewModel.ChkBox_vial2;
                refFormGrowthHormone.ChkBox_cartridge4 = refFormGrowthHormoneViewModel.ChkBox_cartridge4;
                refFormGrowthHormone.ChkBox_5mg4 = refFormGrowthHormoneViewModel.ChkBox_5mg4;
                refFormGrowthHormone.ChkBox_10mg4 = refFormGrowthHormoneViewModel.ChkBox_10mg4;
                refFormGrowthHormone.SIG_TxtBox5 = refFormGrowthHormoneViewModel.SIG_TxtBox5;
                refFormGrowthHormone.RF_TxtBox5 = refFormGrowthHormoneViewModel.RF_TxtBox5;
                refFormGrowthHormone.ChkBox_Saizen = refFormGrowthHormoneViewModel.ChkBox_Saizen;
                refFormGrowthHormone.ChkBox_vial3 = refFormGrowthHormoneViewModel.ChkBox_vial3;
                refFormGrowthHormone.ChkBox_Click_Easy = refFormGrowthHormoneViewModel.ChkBox_Click_Easy;
                refFormGrowthHormone.ChkBox_5mg5 = refFormGrowthHormoneViewModel.ChkBox_5mg5;
                refFormGrowthHormone.ChkBox_8_8mg1 = refFormGrowthHormoneViewModel.ChkBox_8_8mg1;
                refFormGrowthHormone.SIG_TxtBox6 = refFormGrowthHormoneViewModel.SIG_TxtBox6;
                refFormGrowthHormone.RF_TxtBox6 = refFormGrowthHormoneViewModel.RF_TxtBox6;
                refFormGrowthHormone.ChkBox_pen_needles = refFormGrowthHormoneViewModel.ChkBox_pen_needles;
                refFormGrowthHormone.Size_TxtBox = refFormGrowthHormoneViewModel.Size_TxtBox;
                refFormGrowthHormone.Qty_TxtBox1 = refFormGrowthHormoneViewModel.Qty_TxtBox1;
                refFormGrowthHormone.SyringeSize = refFormGrowthHormoneViewModel.SyringeSize;
                refFormGrowthHormone.Qty_TxtBox2 = refFormGrowthHormoneViewModel.Qty_TxtBox2;
                refFormGrowthHormone.FormDate = refFormGrowthHormoneViewModel.FormDate;
                refFormGrowthHormone.FormNeedsByDate = refFormGrowthHormoneViewModel.FormNeedsByDate;
                refFormGrowthHormone.ChkBox_ShipToPatient = refFormGrowthHormoneViewModel.ChkBox_ShipToPatient;
                refFormGrowthHormone.ChkBox_ShipToOffice = refFormGrowthHormoneViewModel.ChkBox_ShipToOffice;
                refFormGrowthHormone.ChkBox_ShipToOther = refFormGrowthHormoneViewModel.ChkBox_ShipToOther;
                refFormGrowthHormone.TxtBox_ShipToOther = refFormGrowthHormoneViewModel.TxtBox_ShipToOther;
                refFormGrowthHormone.ChkBox_Epiphysis = refFormGrowthHormoneViewModel.ChkBox_Epiphysis;
                refFormGrowthHormone.ChkBox_Syringe = refFormGrowthHormoneViewModel.ChkBox_Syringe;

                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormGrowthHormone.ModifiedBy = CurrentUser.UserId;
                refFormGrowthHormone.ModifiedOn = DateTime.UtcNow;

                refFormGrowthHormone.IsSignatured = refFormGrowthHormoneViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormGrowthHormoneRepository.Update(refFormGrowthHormone);
                    AuditLogger.AuditTracker("Edit GrowthHormoneReferralForm", "A GrowthHormoneReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormGrowthHormone.CreatedBy = CurrentUser.UserId;
                    refFormGrowthHormone.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormGrowthHormoneRepository.Insert(refFormGrowthHormone);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New GrowthHormoneReferralForm", "A new GrowthHormoneReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormGrowthHormoneViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormGrowthHormone.RefFormGrowthHormoneId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormGrowthHormone Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormGrowthHormone PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormGrowthHormone Referral Form Unsuccessfully.", success = false });
        }
        //Ggca osteoporosis referral form
        public ActionResult ggca_osteoporosis_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca osteoporosis referral form"));
            return RedirectToAction("OsteoporosisReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 59 });
        }
        //lmfl osteoporosis referral form
        public ActionResult lmfl_osteoporosis_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl osteoporosis referral form"));
            return RedirectToAction("OsteoporosisReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 60 });
        }
        //nola osteoporosis referral form
        public ActionResult nola_osteoporosis_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola osteoporosis referral form"));
            return RedirectToAction("OsteoporosisReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 61 });
        }
        //ofl osteoporosis referral form
        public ActionResult ofl_osteoporosis_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl osteoporosis referral form"));
            return RedirectToAction("OsteoporosisReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 62 });
        }
        //Osteoporosis...................................

        public ActionResult OsteoporosisReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Osteoporosis Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 16;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormOsteoporosisViewModel refFormOsteoporosisViewModel = new RefFormOsteoporosisViewModel();

                //Set ReferralFormId
                refFormOsteoporosisViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormOsteoporosisViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormOsteoporosisViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormOsteoporosisViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormOsteoporosisViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormOsteoporosisViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormOsteoporosisViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormOsteoporosisViewModel.PhysicianFullName = physician.FullName;
                        refFormOsteoporosisViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormOsteoporosisViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormOsteoporosisViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormOsteoporosisViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormOsteoporosisViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormOsteoporosisViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormOsteoporosisViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormOsteoporosi refFormOsteoporosi = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormOsteoporosi = _unitOfWork.RefFormOsteoporosiRepository.GetSingle(t => t.RefFormOsteoporosisId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormOsteoporosi == null) refFormOsteoporosi = new RefFormOsteoporosi();


                    refFormOsteoporosisViewModel.RefFormOsteoporosisId = refFormOsteoporosi.RefFormOsteoporosisId;

                    //Form
                    //Add your code here.



                    refFormOsteoporosisViewModel.RefFormOsteoporosisId = refFormOsteoporosi.RefFormOsteoporosisId;
                    refFormOsteoporosisViewModel.FormDate = refFormOsteoporosi.FormDate;
                    refFormOsteoporosisViewModel.FormNeedsByDate = refFormOsteoporosi.FormNeedsByDate;
                    refFormOsteoporosisViewModel.ChkBox_ShipToPatient = refFormOsteoporosi.ChkBox_ShipToPatient ?? false;
                    refFormOsteoporosisViewModel.ChkBox_ShipToOffice = refFormOsteoporosi.ChkBox_ShipToOffice ?? false;
                    refFormOsteoporosisViewModel.ChkBox_ShipToOther = refFormOsteoporosi.ChkBox_ShipToOther ?? false;
                    refFormOsteoporosisViewModel.TxtBox_ShipToOther = refFormOsteoporosi.TxtBox_ShipToOther;

                    refFormOsteoporosisViewModel.ChkBox_CLINICAL_M81_0 = refFormOsteoporosi.ChkBox_CLINICAL_M81_0 ?? false;
                    refFormOsteoporosisViewModel.ChkBox_CLINICAL_Other = refFormOsteoporosi.ChkBox_CLINICAL_Other ?? false;
                    refFormOsteoporosisViewModel.CLINICAL_DXCode = refFormOsteoporosi.CLINICAL_DXCode;
                    refFormOsteoporosisViewModel.CLINICAL_DrugAllergies = refFormOsteoporosi.CLINICAL_DrugAllergies;
                    refFormOsteoporosisViewModel.ChkBox_alendronate = refFormOsteoporosi.ChkBox_alendronate ?? false;
                    refFormOsteoporosisViewModel.LengthofTreatment_TxtBox1 = refFormOsteoporosi.LengthofTreatment_TxtBox1;
                    refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing1 = refFormOsteoporosi.ChkBox_ReasonforDiscontinuing1 ?? false;
                    refFormOsteoporosisViewModel.ReasonforDiscontinuing1_TxtBox1 = refFormOsteoporosi.ReasonforDiscontinuing1_TxtBox1;
                    refFormOsteoporosisViewModel.ChkBox_bandronate = refFormOsteoporosi.ChkBox_bandronate ?? false;
                    refFormOsteoporosisViewModel.LengthofTreatment_TxtBox2 = refFormOsteoporosi.LengthofTreatment_TxtBox2;
                    refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing2 = refFormOsteoporosi.ChkBox_ReasonforDiscontinuing2 ?? false;
                    refFormOsteoporosisViewModel.ReasonforDiscontinuing2_TxtBox2 = refFormOsteoporosi.ReasonforDiscontinuing2_TxtBox2;
                    refFormOsteoporosisViewModel.ChkBox_risedronate = refFormOsteoporosi.ChkBox_risedronate ?? false;
                    refFormOsteoporosisViewModel.LengthofTreatment_TxtBox3 = refFormOsteoporosi.LengthofTreatment_TxtBox3;
                    refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing3 = refFormOsteoporosi.ChkBox_ReasonforDiscontinuing3 ?? false;
                    refFormOsteoporosisViewModel.ReasonforDiscontinuing3_TxtBox3 = refFormOsteoporosi.ReasonforDiscontinuing3_TxtBox3;
                    refFormOsteoporosisViewModel.ChkBox_prednisone = refFormOsteoporosi.ChkBox_prednisone ?? false;
                    refFormOsteoporosisViewModel.LengthofTreatment_TxtBox4 = refFormOsteoporosi.LengthofTreatment_TxtBox4;
                    refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing4 = refFormOsteoporosi.ChkBox_ReasonforDiscontinuing4 ?? false;
                    refFormOsteoporosisViewModel.ReasonforDiscontinuing4_TxtBox4 = refFormOsteoporosi.ReasonforDiscontinuing4_TxtBox4;
                    refFormOsteoporosisViewModel.ChkBox_5 = refFormOsteoporosi.ChkBox_5 ?? false;
                    refFormOsteoporosisViewModel.LengthofTreatment_TxtBox5 = refFormOsteoporosi.LengthofTreatment_TxtBox5;
                    refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing5 = refFormOsteoporosi.ChkBox_ReasonforDiscontinuing5 ?? false;
                    refFormOsteoporosisViewModel.ReasonforDiscontinuing5_TxtBox5 = refFormOsteoporosi.ReasonforDiscontinuing5_TxtBox5;
                    refFormOsteoporosisViewModel.CLINICAL_BoneDensity_T_Score = refFormOsteoporosi.CLINICAL_BoneDensity_T_Score;
                    refFormOsteoporosisViewModel.CLINICAL_BoneDensity_Type = refFormOsteoporosi.CLINICAL_BoneDensity_Type;
                    refFormOsteoporosisViewModel.CLINICAL_BoneDensity_Date = refFormOsteoporosi.CLINICAL_BoneDensity_Date.HasValue ? refFormOsteoporosi.CLINICAL_BoneDensity_Date.Value : DateTime.UtcNow;
                    refFormOsteoporosisViewModel.CLINICAL_FractureHistorySite1 = refFormOsteoporosi.CLINICAL_FractureHistorySite1;
                    refFormOsteoporosisViewModel.CLINICAL_FractureHistorySite1Date = refFormOsteoporosi.CLINICAL_FractureHistorySite1Date.HasValue ? refFormOsteoporosi.CLINICAL_FractureHistorySite1Date.Value : DateTime.UtcNow;
                    refFormOsteoporosisViewModel.CLINICAL_FractureHistorySite2 = refFormOsteoporosi.CLINICAL_FractureHistorySite2;
                    refFormOsteoporosisViewModel.CLINICAL_FractureHistorySite2Date = refFormOsteoporosi.CLINICAL_FractureHistorySite2Date.HasValue ? refFormOsteoporosi.CLINICAL_FractureHistorySite2Date.Value : DateTime.UtcNow;
                    refFormOsteoporosisViewModel.ChkBox_CLINICAL_patientbeenonForteo_Yes = refFormOsteoporosi.ChkBox_CLINICAL_patientbeenonForteo_Yes ?? false;
                    refFormOsteoporosisViewModel.ChkBox_CLINICAL_patientbeenonForteo_No = refFormOsteoporosi.ChkBox_CLINICAL_patientbeenonForteo_No ?? false;
                    refFormOsteoporosisViewModel.CLINICAL_howlong_TxtBox = refFormOsteoporosi.CLINICAL_howlong_TxtBox;
                    refFormOsteoporosisViewModel.ChckBox_PatientAllergy_Yes = refFormOsteoporosi.ChckBox_PatientAllergy_Yes ?? false;
                    refFormOsteoporosisViewModel.ChckBox_PatientAllergy_No = refFormOsteoporosi.ChckBox_PatientAllergy_No ?? false;
                    refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Boniva = refFormOsteoporosi.ChkBox_PRESCRIPTION_Boniva ?? false;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox1 = refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox1;
                    refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Forteo = refFormOsteoporosi.ChkBox_PRESCRIPTION_Forteo ?? false;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox2 = refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox2;
                    refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Prolia = refFormOsteoporosi.ChkBox_PRESCRIPTION_Prolia ?? false;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox3 = refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox3;
                    refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Reclast = refFormOsteoporosi.ChkBox_PRESCRIPTION_Reclast ?? false;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox4 = refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox4;
                    refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Other = refFormOsteoporosi.ChkBox_PRESCRIPTION_Other ?? false;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Other_TxtBox1 = refFormOsteoporosi.PRESCRIPTION_Other_TxtBox1;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Other_TxtBox2 = refFormOsteoporosi.PRESCRIPTION_Other_TxtBox2;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Other_TxtBox3 = refFormOsteoporosi.PRESCRIPTION_Other_TxtBox3;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Other_Qty_TxtBox1 = refFormOsteoporosi.PRESCRIPTION_Other_Qty_TxtBox1;
                    refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox5 = refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox5;
                    refFormOsteoporosisViewModel.CLINICAL_Other_TxtBox01 = refFormOsteoporosi.CLINICAL_Other_TxtBox01;
                    refFormOsteoporosisViewModel.ChkBox_5_TxtBox = refFormOsteoporosi.ChkBox_5_TxtBox;





                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormOsteoporosisViewModel.IsSignatured = refFormOsteoporosi.IsSignatured ?? false;

                    return View(refFormOsteoporosisViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormOsteoporosis Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormOsteoporosisViewModel());
        }


        [HttpPost]
        public JsonResult OsteoporosisReferralForm(RefFormOsteoporosisViewModel refFormOsteoporosisViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormOsteoporosisViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormOsteoporosi refFormOsteoporosi = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormOsteoporosisViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormOsteoporosi = _unitOfWork.RefFormOsteoporosiRepository.GetSingle(t => t.RefFormOsteoporosisId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormOsteoporosi == null)
                {
                    refFormOsteoporosi = new RefFormOsteoporosi();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form


                refFormOsteoporosi.RefFormOsteoporosisId = refFormOsteoporosisViewModel.RefFormOsteoporosisId;
                refFormOsteoporosi.FormDate = refFormOsteoporosisViewModel.FormDate;
                refFormOsteoporosi.FormNeedsByDate = refFormOsteoporosisViewModel.FormNeedsByDate;
                refFormOsteoporosi.ChkBox_ShipToPatient = refFormOsteoporosisViewModel.ChkBox_ShipToPatient;
                refFormOsteoporosi.ChkBox_ShipToOffice = refFormOsteoporosisViewModel.ChkBox_ShipToOffice;
                refFormOsteoporosi.ChkBox_ShipToOther = refFormOsteoporosisViewModel.ChkBox_ShipToOther;
                refFormOsteoporosi.TxtBox_ShipToOther = refFormOsteoporosisViewModel.TxtBox_ShipToOther;
                refFormOsteoporosi.ChkBox_CLINICAL_M81_0 = refFormOsteoporosisViewModel.ChkBox_CLINICAL_M81_0;
                refFormOsteoporosi.ChkBox_CLINICAL_Other = refFormOsteoporosisViewModel.ChkBox_CLINICAL_Other;
                refFormOsteoporosi.CLINICAL_DXCode = refFormOsteoporosisViewModel.CLINICAL_DXCode;
                refFormOsteoporosi.CLINICAL_DrugAllergies = refFormOsteoporosisViewModel.CLINICAL_DrugAllergies;
                refFormOsteoporosi.ChkBox_alendronate = refFormOsteoporosisViewModel.ChkBox_alendronate;
                refFormOsteoporosi.LengthofTreatment_TxtBox1 = refFormOsteoporosisViewModel.LengthofTreatment_TxtBox1;
                refFormOsteoporosi.ChkBox_ReasonforDiscontinuing1 = refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing1;
                refFormOsteoporosi.ReasonforDiscontinuing1_TxtBox1 = refFormOsteoporosisViewModel.ReasonforDiscontinuing1_TxtBox1;
                refFormOsteoporosi.ChkBox_bandronate = refFormOsteoporosisViewModel.ChkBox_bandronate;
                refFormOsteoporosi.LengthofTreatment_TxtBox2 = refFormOsteoporosisViewModel.LengthofTreatment_TxtBox2;
                refFormOsteoporosi.ChkBox_ReasonforDiscontinuing2 = refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing2;
                refFormOsteoporosi.ReasonforDiscontinuing2_TxtBox2 = refFormOsteoporosisViewModel.ReasonforDiscontinuing2_TxtBox2;
                refFormOsteoporosi.ChkBox_risedronate = refFormOsteoporosisViewModel.ChkBox_risedronate;
                refFormOsteoporosi.LengthofTreatment_TxtBox3 = refFormOsteoporosisViewModel.LengthofTreatment_TxtBox3;
                refFormOsteoporosi.ChkBox_ReasonforDiscontinuing3 = refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing3;
                refFormOsteoporosi.ReasonforDiscontinuing3_TxtBox3 = refFormOsteoporosisViewModel.ReasonforDiscontinuing3_TxtBox3;
                refFormOsteoporosi.ChkBox_prednisone = refFormOsteoporosisViewModel.ChkBox_prednisone;
                refFormOsteoporosi.LengthofTreatment_TxtBox4 = refFormOsteoporosisViewModel.LengthofTreatment_TxtBox4;
                refFormOsteoporosi.ChkBox_ReasonforDiscontinuing4 = refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing4;
                refFormOsteoporosi.ReasonforDiscontinuing4_TxtBox4 = refFormOsteoporosisViewModel.ReasonforDiscontinuing4_TxtBox4;
                refFormOsteoporosi.ChkBox_5 = refFormOsteoporosisViewModel.ChkBox_5;
                refFormOsteoporosi.LengthofTreatment_TxtBox5 = refFormOsteoporosisViewModel.LengthofTreatment_TxtBox5;
                refFormOsteoporosi.ChkBox_ReasonforDiscontinuing5 = refFormOsteoporosisViewModel.ChkBox_ReasonforDiscontinuing5;
                refFormOsteoporosi.ReasonforDiscontinuing5_TxtBox5 = refFormOsteoporosisViewModel.ReasonforDiscontinuing5_TxtBox5;
                refFormOsteoporosi.CLINICAL_BoneDensity_T_Score = refFormOsteoporosisViewModel.CLINICAL_BoneDensity_T_Score;
                refFormOsteoporosi.CLINICAL_BoneDensity_Type = refFormOsteoporosisViewModel.CLINICAL_BoneDensity_Type;
                refFormOsteoporosi.CLINICAL_BoneDensity_Date = refFormOsteoporosisViewModel.CLINICAL_BoneDensity_Date;
                refFormOsteoporosi.CLINICAL_FractureHistorySite1 = refFormOsteoporosisViewModel.CLINICAL_FractureHistorySite1;
                refFormOsteoporosi.CLINICAL_FractureHistorySite1Date = refFormOsteoporosisViewModel.CLINICAL_FractureHistorySite1Date;
                refFormOsteoporosi.CLINICAL_FractureHistorySite2 = refFormOsteoporosisViewModel.CLINICAL_FractureHistorySite2;
                refFormOsteoporosi.CLINICAL_FractureHistorySite2Date = refFormOsteoporosisViewModel.CLINICAL_FractureHistorySite2Date;
                refFormOsteoporosi.ChkBox_CLINICAL_patientbeenonForteo_Yes = refFormOsteoporosisViewModel.ChkBox_CLINICAL_patientbeenonForteo_Yes;
                refFormOsteoporosi.ChkBox_CLINICAL_patientbeenonForteo_No = refFormOsteoporosisViewModel.ChkBox_CLINICAL_patientbeenonForteo_No;
                refFormOsteoporosi.CLINICAL_howlong_TxtBox = refFormOsteoporosisViewModel.CLINICAL_howlong_TxtBox;
                refFormOsteoporosi.ChckBox_PatientAllergy_Yes = refFormOsteoporosisViewModel.ChckBox_PatientAllergy_Yes;
                refFormOsteoporosi.ChckBox_PatientAllergy_No = refFormOsteoporosisViewModel.ChckBox_PatientAllergy_No;
                refFormOsteoporosi.ChkBox_PRESCRIPTION_Boniva = refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Boniva;
                refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox1 = refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox1;
                refFormOsteoporosi.ChkBox_PRESCRIPTION_Forteo = refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Forteo;
                refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox2 = refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox2;
                refFormOsteoporosi.ChkBox_PRESCRIPTION_Prolia = refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Prolia;
                refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox3 = refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox3;
                refFormOsteoporosi.ChkBox_PRESCRIPTION_Reclast = refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Reclast;
                refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox4 = refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox4;
                refFormOsteoporosi.ChkBox_PRESCRIPTION_Other = refFormOsteoporosisViewModel.ChkBox_PRESCRIPTION_Other;
                refFormOsteoporosi.PRESCRIPTION_Other_TxtBox1 = refFormOsteoporosisViewModel.PRESCRIPTION_Other_TxtBox1;
                refFormOsteoporosi.PRESCRIPTION_Other_TxtBox2 = refFormOsteoporosisViewModel.PRESCRIPTION_Other_TxtBox2;
                refFormOsteoporosi.PRESCRIPTION_Other_TxtBox3 = refFormOsteoporosisViewModel.PRESCRIPTION_Other_TxtBox3;
                refFormOsteoporosi.PRESCRIPTION_Other_Qty_TxtBox1 = refFormOsteoporosisViewModel.PRESCRIPTION_Other_Qty_TxtBox1;
                refFormOsteoporosi.PRESCRIPTION_Refills_TxtBox5 = refFormOsteoporosisViewModel.PRESCRIPTION_Refills_TxtBox5;
                refFormOsteoporosi.CLINICAL_Other_TxtBox01 = refFormOsteoporosisViewModel.CLINICAL_Other_TxtBox01;
                refFormOsteoporosi.ChkBox_5_TxtBox = refFormOsteoporosisViewModel.ChkBox_5_TxtBox;








                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormOsteoporosi.ModifiedBy = CurrentUser.UserId;
                refFormOsteoporosi.ModifiedOn = DateTime.UtcNow;

                refFormOsteoporosi.IsSignatured = refFormOsteoporosisViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormOsteoporosiRepository.Update(refFormOsteoporosi);
                    AuditLogger.AuditTracker("Edit OsteoporosisReferralForm", "A OsteoporosisReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormOsteoporosi.CreatedBy = CurrentUser.UserId;
                    refFormOsteoporosi.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormOsteoporosiRepository.Insert(refFormOsteoporosi);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New OsteoporosisReferralForm", "A new OsteoporosisReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormOsteoporosisViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormOsteoporosi.RefFormOsteoporosisId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormOsteoporosis Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormOsteoporosis PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormOsteoporosis Referral Form Unsuccessfully.", success = false });
        }


        public ActionResult nola_pediatric_gastro_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola Pediatric Gastro Referral Form"));
            return RedirectToAction("PediatricGastroenterologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 31 });
        }
        //ofl pediatric gastro referral form
        public ActionResult ofl_pediatric_gastro_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl pediatric gastro referral form"));
            return RedirectToAction("PediatricGastroenterologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 63 });
        }
        //Pediatric Gastroenterology.....................
        public ActionResult PediatricGastroenterologyReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Pediatric Gastroenterology Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 17;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormPediatricGastroenterologyViewModel refFormPediatricGastroenterologyViewModel = new RefFormPediatricGastroenterologyViewModel();

                //Set ReferralFormId
                refFormPediatricGastroenterologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormPediatricGastroenterologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormPediatricGastroenterologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormPediatricGastroenterologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormPediatricGastroenterologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormPediatricGastroenterologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormPediatricGastroenterologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormPediatricGastroenterologyViewModel.PhysicianFullName = physician.FullName;
                        refFormPediatricGastroenterologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormPediatricGastroenterologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormPediatricGastroenterologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormPediatricGastroenterologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormPediatricGastroenterologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormPediatricGastroenterologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormPediatricGastroenterologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormPediatricGastoenterology refFormPediatricGastoenterology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormPediatricGastoenterology = _unitOfWork.RefFormPediatricGastoenterology.GetSingle(t => t.RefFormPediatricgatroenterologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormPediatricGastoenterology == null) refFormPediatricGastoenterology = new RefFormPediatricGastoenterology();


                    refFormPediatricGastroenterologyViewModel.RefFormPediatricgatroenterologyId = refFormPediatricGastoenterology.RefFormPediatricgatroenterologyId;

                    //Form
                    //Add your code here.



                    refFormPediatricGastroenterologyViewModel.RefFormPediatricgatroenterologyId = refFormPediatricGastoenterology.RefFormPediatricgatroenterologyId;

                    refFormPediatricGastroenterologyViewModel.FormDate = refFormPediatricGastoenterology.FormDate;
                    refFormPediatricGastroenterologyViewModel.FormNeedsByDate = refFormPediatricGastoenterology.FormNeedsByDate;
                    refFormPediatricGastroenterologyViewModel.ChkBox_ShipToPatient = refFormPediatricGastoenterology.ChkBox_ShipToPatient ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_ShipToOffice = refFormPediatricGastoenterology.ChkBox_ShipToOffice ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_ShipToOther = refFormPediatricGastoenterology.ChkBox_ShipToOther ?? false;
                    refFormPediatricGastroenterologyViewModel.TxtBox_ShipToOther = refFormPediatricGastoenterology.TxtBox_ShipToOther;

                    refFormPediatricGastroenterologyViewModel.ChkBox_CLINICAL_Pediatric555_9 = refFormPediatricGastoenterology.ChkBox_CLINICAL_Pediatric555_9 ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_CLINICAL_Pediatric556_0 = refFormPediatricGastoenterology.ChkBox_CLINICAL_Pediatric556_0 ?? false;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_DrugAllergies_TxtBox = refFormPediatricGastoenterology.CLINICAL_DrugAllergies_TxtBox;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_Prior_TxtBox1 = refFormPediatricGastoenterology.CLINICAL_Prior_TxtBox1;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_LengthofTreatment_TxtBox1 = refFormPediatricGastoenterology.CLINICAL_LengthofTreatment_TxtBox1;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_ReasonforDiscontinuing_TxtBox1 = refFormPediatricGastoenterology.CLINICAL_ReasonforDiscontinuing_TxtBox1;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_Prior_TxtBox2 = refFormPediatricGastoenterology.CLINICAL_Prior_TxtBox2;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_LengthofTreatment_TxtBox2 = refFormPediatricGastoenterology.CLINICAL_LengthofTreatment_TxtBox2;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_ReasonforDiscontinuing_TxtBox2 = refFormPediatricGastoenterology.CLINICAL_ReasonforDiscontinuing_TxtBox2;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_Prior_TxtBox3 = refFormPediatricGastoenterology.CLINICAL_Prior_TxtBox3;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_LengthofTreatment_TxtBox3 = refFormPediatricGastoenterology.CLINICAL_LengthofTreatment_TxtBox3;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_ReasonforDiscontinuing_TxtBox3 = refFormPediatricGastoenterology.CLINICAL_ReasonforDiscontinuing_TxtBox3;
                    refFormPediatricGastroenterologyViewModel.CLINICAL_Patient_Weight_TxtBox = refFormPediatricGastoenterology.CLINICAL_Patient_Weight_TxtBox != null ? refFormPediatricGastoenterology.CLINICAL_Patient_Weight_TxtBox.Value : 0D;
                    refFormPediatricGastroenterologyViewModel.ChkBox_latexallergy_Yes = refFormPediatricGastoenterology.ChkBox_latexallergy_Yes ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_latexallergy_No = refFormPediatricGastoenterology.ChkBox_latexallergy_No ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_beforestart_Yes = refFormPediatricGastoenterology.ChkBox_beforestart_Yes ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_beforestart_No = refFormPediatricGastoenterology.ChkBox_beforestart_No ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Humira = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Humira ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_PediatricCrohnsDisease1 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_PediatricCrohnsDisease1 ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadDay1 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_LoadDay1 ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenancebegins1 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Maintenancebegins1 ?? false;
                    refFormPediatricGastroenterologyViewModel.PRESCRIPTION_REFILLS_TxtBox1 = refFormPediatricGastoenterology.PRESCRIPTION_REFILLS_TxtBox1;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_PediatricCrohnsDisease2 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_PediatricCrohnsDisease2 ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadDay2 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_LoadDay2 ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_four40mginjections = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_four40mginjections ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_two40mg = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_two40mg ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenancebegins2 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Maintenancebegins2 ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_CrohnsStarterPackage = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_CrohnsStarterPackage ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_20mgPreFilledSyringe = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_20mgPreFilledSyringe ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_40mgPreFilledSyringe = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_40mgPreFilledSyringe ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_40mgPreFilledPen = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_40mgPreFilledPen ?? false;
                    refFormPediatricGastroenterologyViewModel.PRESCRIPTION_REFILLS_TxtBox2 = refFormPediatricGastoenterology.PRESCRIPTION_REFILLS_TxtBox2;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Remicade = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Remicade ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_100mgoflyophilized = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_100mgoflyophilized ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadDay3 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_LoadDay3 ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenancebegins3 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Maintenancebegins3 ?? false;
                    refFormPediatricGastroenterologyViewModel.PRESCRIPTION_REFILLS_TxtBox3 = refFormPediatricGastoenterology.PRESCRIPTION_REFILLS_TxtBox3;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadDay4 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_LoadDay4 ?? false;
                    refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenancebegins4 = refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Maintenancebegins4 ?? false;
                    refFormPediatricGastroenterologyViewModel.PRESCRIPTION_REFILLS_TxtBox4 = refFormPediatricGastoenterology.PRESCRIPTION_REFILLS_TxtBox4;





                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormPediatricGastroenterologyViewModel.IsSignatured = refFormPediatricGastoenterology.IsSignatured ?? false;

                    return View(refFormPediatricGastroenterologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormPediatricGastroenterologyViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormPediatricGastroenterologyViewModel());
        }

        [HttpPost]
        public JsonResult PediatricGastroenterologyReferralForm(RefFormPediatricGastroenterologyViewModel refFormPediatricGastroenterologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormPediatricGastroenterologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormPediatricGastoenterology refFormPediatricGastoenterology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormPediatricGastroenterologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormPediatricGastoenterology = _unitOfWork.RefFormPediatricGastoenterology.GetSingle(t => t.RefFormPediatricgatroenterologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormPediatricGastoenterology == null)
                {
                    refFormPediatricGastoenterology = new RefFormPediatricGastoenterology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form




                refFormPediatricGastoenterology.RefFormPediatricgatroenterologyId = refFormPediatricGastroenterologyViewModel.RefFormPediatricgatroenterologyId;
                refFormPediatricGastoenterology.FormDate = refFormPediatricGastroenterologyViewModel.FormDate;
                refFormPediatricGastoenterology.FormNeedsByDate = refFormPediatricGastroenterologyViewModel.FormNeedsByDate;
                refFormPediatricGastoenterology.ChkBox_ShipToPatient = refFormPediatricGastroenterologyViewModel.ChkBox_ShipToPatient;
                refFormPediatricGastoenterology.ChkBox_ShipToOffice = refFormPediatricGastroenterologyViewModel.ChkBox_ShipToOffice;
                refFormPediatricGastoenterology.ChkBox_ShipToOther = refFormPediatricGastroenterologyViewModel.ChkBox_ShipToOther;
                refFormPediatricGastoenterology.TxtBox_ShipToOther = refFormPediatricGastroenterologyViewModel.TxtBox_ShipToOther;
                refFormPediatricGastoenterology.ChkBox_CLINICAL_Pediatric555_9 = refFormPediatricGastroenterologyViewModel.ChkBox_CLINICAL_Pediatric555_9;
                refFormPediatricGastoenterology.ChkBox_CLINICAL_Pediatric556_0 = refFormPediatricGastroenterologyViewModel.ChkBox_CLINICAL_Pediatric556_0;
                refFormPediatricGastoenterology.CLINICAL_DrugAllergies_TxtBox = refFormPediatricGastroenterologyViewModel.CLINICAL_DrugAllergies_TxtBox;
                refFormPediatricGastoenterology.CLINICAL_Prior_TxtBox1 = refFormPediatricGastroenterologyViewModel.CLINICAL_Prior_TxtBox1;
                refFormPediatricGastoenterology.CLINICAL_LengthofTreatment_TxtBox1 = refFormPediatricGastroenterologyViewModel.CLINICAL_LengthofTreatment_TxtBox1;
                refFormPediatricGastoenterology.CLINICAL_ReasonforDiscontinuing_TxtBox1 = refFormPediatricGastroenterologyViewModel.CLINICAL_ReasonforDiscontinuing_TxtBox1;
                refFormPediatricGastoenterology.CLINICAL_Prior_TxtBox2 = refFormPediatricGastroenterologyViewModel.CLINICAL_Prior_TxtBox2;
                refFormPediatricGastoenterology.CLINICAL_LengthofTreatment_TxtBox2 = refFormPediatricGastroenterologyViewModel.CLINICAL_LengthofTreatment_TxtBox2;
                refFormPediatricGastoenterology.CLINICAL_ReasonforDiscontinuing_TxtBox2 = refFormPediatricGastroenterologyViewModel.CLINICAL_ReasonforDiscontinuing_TxtBox2;
                refFormPediatricGastoenterology.CLINICAL_Prior_TxtBox3 = refFormPediatricGastroenterologyViewModel.CLINICAL_Prior_TxtBox3;
                refFormPediatricGastoenterology.CLINICAL_LengthofTreatment_TxtBox3 = refFormPediatricGastroenterologyViewModel.CLINICAL_LengthofTreatment_TxtBox3;
                refFormPediatricGastoenterology.CLINICAL_ReasonforDiscontinuing_TxtBox3 = refFormPediatricGastroenterologyViewModel.CLINICAL_ReasonforDiscontinuing_TxtBox3;
                refFormPediatricGastoenterology.CLINICAL_Patient_Weight_TxtBox = refFormPediatricGastroenterologyViewModel.CLINICAL_Patient_Weight_TxtBox;
                refFormPediatricGastoenterology.ChkBox_latexallergy_Yes = refFormPediatricGastroenterologyViewModel.ChkBox_latexallergy_Yes;
                refFormPediatricGastoenterology.ChkBox_latexallergy_No = refFormPediatricGastroenterologyViewModel.ChkBox_latexallergy_No;
                refFormPediatricGastoenterology.ChkBox_beforestart_Yes = refFormPediatricGastroenterologyViewModel.ChkBox_beforestart_Yes;
                refFormPediatricGastoenterology.ChkBox_beforestart_No = refFormPediatricGastroenterologyViewModel.ChkBox_beforestart_No;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Humira = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Humira;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_PediatricCrohnsDisease1 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_PediatricCrohnsDisease1;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_LoadDay1 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadDay1;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Maintenancebegins1 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenancebegins1;
                refFormPediatricGastoenterology.PRESCRIPTION_REFILLS_TxtBox1 = refFormPediatricGastroenterologyViewModel.PRESCRIPTION_REFILLS_TxtBox1;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_PediatricCrohnsDisease2 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_PediatricCrohnsDisease2;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_LoadDay2 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadDay2;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_four40mginjections = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_four40mginjections;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_two40mg = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_two40mg;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Maintenancebegins2 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenancebegins2;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_CrohnsStarterPackage = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_CrohnsStarterPackage;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_20mgPreFilledSyringe = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_20mgPreFilledSyringe;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_40mgPreFilledSyringe = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_40mgPreFilledSyringe;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_40mgPreFilledPen = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_40mgPreFilledPen;
                refFormPediatricGastoenterology.PRESCRIPTION_REFILLS_TxtBox2 = refFormPediatricGastroenterologyViewModel.PRESCRIPTION_REFILLS_TxtBox2;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Remicade = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Remicade;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_100mgoflyophilized = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_100mgoflyophilized;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_LoadDay3 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadDay3;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Maintenancebegins3 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenancebegins3;
                refFormPediatricGastoenterology.PRESCRIPTION_REFILLS_TxtBox3 = refFormPediatricGastroenterologyViewModel.PRESCRIPTION_REFILLS_TxtBox3;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_LoadDay4 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_LoadDay4;
                refFormPediatricGastoenterology.ChkBox_PRESCRIPTION_Maintenancebegins4 = refFormPediatricGastroenterologyViewModel.ChkBox_PRESCRIPTION_Maintenancebegins4;
                refFormPediatricGastoenterology.PRESCRIPTION_REFILLS_TxtBox4 = refFormPediatricGastroenterologyViewModel.PRESCRIPTION_REFILLS_TxtBox4;






                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormPediatricGastoenterology.ModifiedBy = CurrentUser.UserId;
                refFormPediatricGastoenterology.ModifiedOn = DateTime.UtcNow;

                refFormPediatricGastoenterology.IsSignatured = refFormPediatricGastroenterologyViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormPediatricGastoenterology.Update(refFormPediatricGastoenterology);
                    AuditLogger.AuditTracker("Edit PediatricGastroenterologyReferralForm", "A PediatricGastroenterologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormPediatricGastoenterology.CreatedBy = CurrentUser.UserId;
                    refFormPediatricGastoenterology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormPediatricGastoenterology.Insert(refFormPediatricGastoenterology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New PediatricGastroenterologyReferralForm", "A new PediatricGastroenterologyReferralForm  has been added.", (int)AuditOperationType.Addition);

                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormPediatricGastroenterologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormPediatricGastoenterology.RefFormPediatricgatroenterologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormPediatricGastroenterology Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormPediatricGastroenterology PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormPediatricGastroenterology Referral Form Unsuccessfully.", success = false });
        }
        //ggca immunology referral form
        public ActionResult ggca_immunology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca immunology referral form"));
            return RedirectToAction("ImmunologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 54 });
        }
        //lmfl immunology referral form
        public ActionResult lmfl_immunology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl immunology referral form"));
            return RedirectToAction("ImmunologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 55 });
        }
        //Immunolgy.....................................
        public ActionResult ImmunologyReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Immunology Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 11;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormImmunologyViewModel refFormImmunologyViewModel = new RefFormImmunologyViewModel();

                //Set ReferralFormId
                refFormImmunologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormImmunologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormImmunologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormImmunologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormImmunologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormImmunologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormImmunologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormImmunologyViewModel.PhysicianFullName = physician.FullName;
                        refFormImmunologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormImmunologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormImmunologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormImmunologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormImmunologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormImmunologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormImmunologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormImmunology refFormImmunology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormImmunology = _unitOfWork.RefFormImmunology.GetSingle(t => t.RefFormImmunologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormImmunology == null) refFormImmunology = new RefFormImmunology();


                    refFormImmunologyViewModel.RefFormImmunologyId = refFormImmunology.RefFormImmunologyId;

                    //Form
                    //Add your code here.



                    refFormImmunologyViewModel.RefFormImmunologyId = refFormImmunology.RefFormImmunologyId;

                    refFormImmunologyViewModel.FormDate = refFormImmunology.FormDate;
                    refFormImmunologyViewModel.FormNeedsByDate = refFormImmunology.FormNeedsByDate;
                    refFormImmunologyViewModel.ChkBox_ShipToPatient = refFormImmunology.ChkBox_ShipToPatient ?? false;
                    refFormImmunologyViewModel.ChkBox_ShipToOffice = refFormImmunology.ChkBox_ShipToOffice ?? false;
                    refFormImmunologyViewModel.ChkBox_ShipToOther = refFormImmunology.ChkBox_ShipToOther ?? false;
                    refFormImmunologyViewModel.TxtBox_ShipToOther = refFormImmunology.TxtBox_ShipToOther;

                    refFormImmunologyViewModel.ChkBox_CLINICAL_J45_40Moderate = refFormImmunology.ChkBox_CLINICAL_J45_40Moderate ?? false;
                    refFormImmunologyViewModel.ChkBox_CLINICAL_J45_50Severe = refFormImmunology.ChkBox_CLINICAL_J45_50Severe ?? false;
                    refFormImmunologyViewModel.ChkBox_CLINICAL_L50_1Chronic = refFormImmunology.ChkBox_CLINICAL_L50_1Chronic ?? false;
                    refFormImmunologyViewModel.ChkBox_CLINICAL_Other = refFormImmunology.ChkBox_CLINICAL_Other ?? false;
                    refFormImmunologyViewModel.CLINICAL_Dxcode_TxtBox = refFormImmunology.CLINICAL_Dxcode_TxtBox;
                    refFormImmunologyViewModel.CLINICAL_Condition_TxtBox = refFormImmunology.CLINICAL_Condition_TxtBox;
                    refFormImmunologyViewModel.CLINICAL_DrugAllergies_TxtBox = refFormImmunology.CLINICAL_DrugAllergies_TxtBox;
                    refFormImmunologyViewModel.ChkBox_Short_actingbeta = refFormImmunology.ChkBox_Short_actingbeta ?? false;
                    refFormImmunologyViewModel.ChkBox_Long_actingbeta = refFormImmunology.ChkBox_Long_actingbeta ?? false;
                    refFormImmunologyViewModel.ChkBox_Antihistamines = refFormImmunology.ChkBox_Antihistamines ?? false;
                    refFormImmunologyViewModel.ChkBox_Decongestants = refFormImmunology.ChkBox_Decongestants ?? false;
                    refFormImmunologyViewModel.ChkBox_Immunotherapy = refFormImmunology.ChkBox_Immunotherapy ?? false;
                    refFormImmunologyViewModel.ChkBox_Inhaledcorticosteroid = refFormImmunology.ChkBox_Inhaledcorticosteroid ?? false;
                    refFormImmunologyViewModel.ChkBox_Leukotrienemodifiers = refFormImmunology.ChkBox_Leukotrienemodifiers ?? false;
                    refFormImmunologyViewModel.ChkBox_Oralsteroids = refFormImmunology.ChkBox_Oralsteroids ?? false;
                    refFormImmunologyViewModel.ChkBox_Nasalsteroids = refFormImmunology.ChkBox_Nasalsteroids ?? false;
                    refFormImmunologyViewModel.ChkBox_Other = refFormImmunology.ChkBox_Other ?? false;
                    refFormImmunologyViewModel.CLINICAL_Other_TxtBox = refFormImmunology.CLINICAL_Other_TxtBox;
                    refFormImmunologyViewModel.CLINICAL_Pleaselisttherapies = refFormImmunology.CLINICAL_Pleaselisttherapies;
                    refFormImmunologyViewModel.ChkBox_Historyofpositiveskin = refFormImmunology.ChkBox_Historyofpositiveskin ?? false;
                    refFormImmunologyViewModel.CLINICAL_PretreatmentserumlgE_TxtBox = refFormImmunology.CLINICAL_PretreatmentserumlgE_TxtBox;
                    refFormImmunologyViewModel.CLINICAL_Test_Date = refFormImmunology.CLINICAL_Test_Date.HasValue ? refFormImmunology.CLINICAL_Test_Date.Value : DateTime.UtcNow;
                    refFormImmunologyViewModel.CLINICAL_Patientweight_TxtBox = refFormImmunology.CLINICAL_Patientweight_TxtBox != null ? refFormImmunology.CLINICAL_Patientweight_TxtBox.Value : 0D;
                    refFormImmunologyViewModel.CLINICAL_Dateweight_TxtBox = refFormImmunology.CLINICAL_Dateweight_TxtBox.HasValue ? refFormImmunology.CLINICAL_Dateweight_TxtBox.Value : DateTime.UtcNow;
                    refFormImmunologyViewModel.ChkBox_Allergist = refFormImmunology.ChkBox_Allergist ?? false;
                    refFormImmunologyViewModel.ChkBox_Pulmonologist = refFormImmunology.ChkBox_Pulmonologist ?? false;
                    refFormImmunologyViewModel.ChkBox_ENT = refFormImmunology.ChkBox_ENT ?? false;
                    refFormImmunologyViewModel.ChkBox_Primarycare = refFormImmunology.ChkBox_Primarycare ?? false;
                    refFormImmunologyViewModel.ChkBox_Pediatrician = refFormImmunology.ChkBox_Pediatrician ?? false;
                    refFormImmunologyViewModel.ChkBox_MDSpecialty_Other = refFormImmunology.ChkBox_MDSpecialty_Other ?? false;
                    refFormImmunologyViewModel.CLINICAL_MDSpecialty_Other_TxtBox = refFormImmunology.CLINICAL_MDSpecialty_Other_TxtBox;
                    refFormImmunologyViewModel.ChkBox_Naivenewstart = refFormImmunology.ChkBox_Naivenewstart ?? false;
                    refFormImmunologyViewModel.ChkBox_Restrat = refFormImmunology.ChkBox_Restrat ?? false;
                    refFormImmunologyViewModel.ChkBox_ContinuedTherapy = refFormImmunology.ChkBox_ContinuedTherapy ?? false;
                    refFormImmunologyViewModel.CLINICAL_Lastinjectiondate_TxtBox = refFormImmunology.CLINICAL_Lastinjectiondate_TxtBox.HasValue ? refFormImmunology.CLINICAL_Lastinjectiondate_TxtBox.Value : DateTime.UtcNow;
                    refFormImmunologyViewModel.ChkBox_Xolair = refFormImmunology.ChkBox_Xolair ?? false;
                    refFormImmunologyViewModel.ChkBox_75mgsubcutaneouslyevery4weeks = refFormImmunology.ChkBox_75mgsubcutaneouslyevery4weeks ?? false;
                    refFormImmunologyViewModel.ChkBox_28daysupply = refFormImmunology.ChkBox_28daysupply ?? false;
                    refFormImmunologyViewModel.PRESCRIPTION_REFILLS_TxtBox1 = refFormImmunology.PRESCRIPTION_REFILLS_TxtBox1;
                    refFormImmunologyViewModel.ChkBox_150mgsubcutaneouslyevery4weeks = refFormImmunology.ChkBox_150mgsubcutaneouslyevery4weeks ?? false;
                    refFormImmunologyViewModel.ChkBox_84daysupply = refFormImmunology.ChkBox_84daysupply ?? false;
                    refFormImmunologyViewModel.PRESCRIPTION_REFILLS_TxtBox2 = refFormImmunology.PRESCRIPTION_REFILLS_TxtBox2;
                    refFormImmunologyViewModel.ChkBox_225mgsubcutaneouslyevery2weeks = refFormImmunology.ChkBox_225mgsubcutaneouslyevery2weeks ?? false;
                    refFormImmunologyViewModel.ChkBox_225mgsubcutaneouslyevery4weeks = refFormImmunology.ChkBox_225mgsubcutaneouslyevery4weeks ?? false;
                    refFormImmunologyViewModel.ChkBox_300mgsubcutaneouslyevery2weeks = refFormImmunology.ChkBox_300mgsubcutaneouslyevery2weeks ?? false;
                    refFormImmunologyViewModel.ChkBox_300mgsubcutaneouslyevery4weeks = refFormImmunology.ChkBox_300mgsubcutaneouslyevery4weeks ?? false;
                    refFormImmunologyViewModel.ChkBox_375mgsubcutaneouslyevery2weeks = refFormImmunology.ChkBox_375mgsubcutaneouslyevery2weeks ?? false;
                    refFormImmunologyViewModel.ChkBox_XolairPatientswithCIU = refFormImmunology.ChkBox_XolairPatientswithCIU ?? false;
                    refFormImmunologyViewModel.ChkBox_150mgsubcutaneouslyevery4weeks_2 = refFormImmunology.ChkBox_150mgsubcutaneouslyevery4weeks_2 ?? false;
                    refFormImmunologyViewModel.ChkBox_28daysupply2 = refFormImmunology.ChkBox_28daysupply2 ?? false;
                    refFormImmunologyViewModel.PRESCRIPTION_REFILLS_TxtBox3 = refFormImmunology.PRESCRIPTION_REFILLS_TxtBox3;
                    refFormImmunologyViewModel.ChkBox_300mgsubcutaneouslyevery4weeks_2 = refFormImmunology.ChkBox_300mgsubcutaneouslyevery4weeks_2 ?? false;
                    refFormImmunologyViewModel.ChkBox_84daysupply2 = refFormImmunology.ChkBox_84daysupply2 ?? false;
                    refFormImmunologyViewModel.PRESCRIPTION_REFILLS_TxtBox4 = refFormImmunology.PRESCRIPTION_REFILLS_TxtBox4;
                    refFormImmunologyViewModel.ChkBox_EpiPen = refFormImmunology.ChkBox_EpiPen ?? false;
                    refFormImmunologyViewModel.ChkBox_Injection0_3mg = refFormImmunology.ChkBox_Injection0_3mg ?? false;
                    refFormImmunologyViewModel.ChkBox_EpiPen0_3mg = refFormImmunology.ChkBox_EpiPen0_3mg ?? false;
                    refFormImmunologyViewModel.ChkBox_Injection0_15mg = refFormImmunology.ChkBox_Injection0_15mg ?? false;
                    refFormImmunologyViewModel.ChkBox_EpiPenJr0_15mg = refFormImmunology.ChkBox_EpiPenJr0_15mg ?? false;
                    refFormImmunologyViewModel.ChkBoxOther = refFormImmunology.ChkBoxOther ?? false;
                    refFormImmunologyViewModel.Other_TxtBox_1 = refFormImmunology.Other_TxtBox_1;
                    refFormImmunologyViewModel.Other_TxtBox_2 = refFormImmunology.Other_TxtBox_2;
                    refFormImmunologyViewModel.Other_Quantity_TxtBox = refFormImmunology.Other_Quantity_TxtBox;
                    refFormImmunologyViewModel.Other_REFILLS_TxtBox = refFormImmunology.Other_REFILLS_TxtBox;
                    refFormImmunologyViewModel.ChkBox_nola_L20_9AtopicDermatitis = refFormImmunology.ChkBox_nola_L20_9AtopicDermatitis ?? false;
                    refFormImmunologyViewModel.ChkBox_nola_Dermatologist = refFormImmunology.ChkBox_nola_Dermatologist ?? false;
                    refFormImmunologyViewModel.ChkBox_nola_Dupixent = refFormImmunology.ChkBox_nola_Dupixent ?? false;
                    refFormImmunologyViewModel.ChkBox_nola_Dupixent_300mg1 = refFormImmunology.ChkBox_nola_Dupixent_300mg1 ?? false;
                    refFormImmunologyViewModel.ChkBox_nola_Dupixent_300mg2 = refFormImmunology.ChkBox_nola_Dupixent_300mg2 ?? false;
                    refFormImmunologyViewModel.ChkBox_nola_Dupixent_Load = refFormImmunology.ChkBox_nola_Dupixent_Load ?? false;
                    refFormImmunologyViewModel.ChkBox_nola_Dupixent_Mantainance = refFormImmunology.ChkBox_nola_Dupixent_Mantainance ?? false;
                    refFormImmunologyViewModel.nola_Dupixent_Refills_TxtBox = refFormImmunology.nola_Dupixent_Refills_TxtBox;






                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormImmunologyViewModel.IsSignatured = refFormImmunology.IsSignatured ?? false;

                    return View(refFormImmunologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormImmunologyViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormImmunologyViewModel());
        }
        [HttpPost]
        public JsonResult ImmunologyReferralForm(RefFormImmunologyViewModel refFormImmunologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormImmunologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormImmunology refFormImmunology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormImmunologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormImmunology = _unitOfWork.RefFormImmunology.GetSingle(t => t.RefFormImmunologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormImmunology == null)
                {
                    refFormImmunology = new RefFormImmunology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form



                refFormImmunology.RefFormImmunologyId = refFormImmunologyViewModel.RefFormImmunologyId;
                refFormImmunology.FormDate = refFormImmunologyViewModel.FormDate;
                refFormImmunology.FormNeedsByDate = refFormImmunologyViewModel.FormNeedsByDate;
                refFormImmunology.ChkBox_ShipToPatient = refFormImmunologyViewModel.ChkBox_ShipToPatient;
                refFormImmunology.ChkBox_ShipToOffice = refFormImmunologyViewModel.ChkBox_ShipToOffice;
                refFormImmunology.ChkBox_ShipToOther = refFormImmunologyViewModel.ChkBox_ShipToOther;
                refFormImmunology.TxtBox_ShipToOther = refFormImmunologyViewModel.TxtBox_ShipToOther;
                refFormImmunology.ChkBox_CLINICAL_J45_40Moderate = refFormImmunologyViewModel.ChkBox_CLINICAL_J45_40Moderate;
                refFormImmunology.ChkBox_CLINICAL_J45_50Severe = refFormImmunologyViewModel.ChkBox_CLINICAL_J45_50Severe;
                refFormImmunology.ChkBox_CLINICAL_L50_1Chronic = refFormImmunologyViewModel.ChkBox_CLINICAL_L50_1Chronic;
                refFormImmunology.ChkBox_CLINICAL_Other = refFormImmunologyViewModel.ChkBox_CLINICAL_Other;
                refFormImmunology.CLINICAL_Dxcode_TxtBox = refFormImmunologyViewModel.CLINICAL_Dxcode_TxtBox;
                refFormImmunology.CLINICAL_Condition_TxtBox = refFormImmunologyViewModel.CLINICAL_Condition_TxtBox;
                refFormImmunology.CLINICAL_DrugAllergies_TxtBox = refFormImmunologyViewModel.CLINICAL_DrugAllergies_TxtBox;
                refFormImmunology.ChkBox_Short_actingbeta = refFormImmunologyViewModel.ChkBox_Short_actingbeta;
                refFormImmunology.ChkBox_Long_actingbeta = refFormImmunologyViewModel.ChkBox_Long_actingbeta;
                refFormImmunology.ChkBox_Antihistamines = refFormImmunologyViewModel.ChkBox_Antihistamines;
                refFormImmunology.ChkBox_Decongestants = refFormImmunologyViewModel.ChkBox_Decongestants;
                refFormImmunology.ChkBox_Immunotherapy = refFormImmunologyViewModel.ChkBox_Immunotherapy;
                refFormImmunology.ChkBox_Inhaledcorticosteroid = refFormImmunologyViewModel.ChkBox_Inhaledcorticosteroid;
                refFormImmunology.ChkBox_Leukotrienemodifiers = refFormImmunologyViewModel.ChkBox_Leukotrienemodifiers;
                refFormImmunology.ChkBox_Oralsteroids = refFormImmunologyViewModel.ChkBox_Oralsteroids;
                refFormImmunology.ChkBox_Nasalsteroids = refFormImmunologyViewModel.ChkBox_Nasalsteroids;
                refFormImmunology.ChkBox_Other = refFormImmunologyViewModel.ChkBox_Other;
                refFormImmunology.CLINICAL_Other_TxtBox = refFormImmunologyViewModel.CLINICAL_Other_TxtBox;
                refFormImmunology.CLINICAL_Pleaselisttherapies = refFormImmunologyViewModel.CLINICAL_Pleaselisttherapies;
                refFormImmunology.ChkBox_Historyofpositiveskin = refFormImmunologyViewModel.ChkBox_Historyofpositiveskin;
                refFormImmunology.CLINICAL_PretreatmentserumlgE_TxtBox = refFormImmunologyViewModel.CLINICAL_PretreatmentserumlgE_TxtBox;
                refFormImmunology.CLINICAL_Test_Date = refFormImmunologyViewModel.CLINICAL_Test_Date;
                refFormImmunology.CLINICAL_Patientweight_TxtBox = refFormImmunologyViewModel.CLINICAL_Patientweight_TxtBox;
                refFormImmunology.CLINICAL_Dateweight_TxtBox = refFormImmunologyViewModel.CLINICAL_Dateweight_TxtBox;
                refFormImmunology.ChkBox_Allergist = refFormImmunologyViewModel.ChkBox_Allergist;
                refFormImmunology.ChkBox_Pulmonologist = refFormImmunologyViewModel.ChkBox_Pulmonologist;
                refFormImmunology.ChkBox_ENT = refFormImmunologyViewModel.ChkBox_ENT;
                refFormImmunology.ChkBox_Primarycare = refFormImmunologyViewModel.ChkBox_Primarycare;
                refFormImmunology.ChkBox_Pediatrician = refFormImmunologyViewModel.ChkBox_Pediatrician;
                refFormImmunology.ChkBox_MDSpecialty_Other = refFormImmunologyViewModel.ChkBox_MDSpecialty_Other;
                refFormImmunology.CLINICAL_MDSpecialty_Other_TxtBox = refFormImmunologyViewModel.CLINICAL_MDSpecialty_Other_TxtBox;
                refFormImmunology.ChkBox_Naivenewstart = refFormImmunologyViewModel.ChkBox_Naivenewstart;
                refFormImmunology.ChkBox_Restrat = refFormImmunologyViewModel.ChkBox_Restrat;
                refFormImmunology.ChkBox_ContinuedTherapy = refFormImmunologyViewModel.ChkBox_ContinuedTherapy;
                refFormImmunology.CLINICAL_Lastinjectiondate_TxtBox = refFormImmunologyViewModel.CLINICAL_Lastinjectiondate_TxtBox;
                refFormImmunology.ChkBox_Xolair = refFormImmunologyViewModel.ChkBox_Xolair;
                refFormImmunology.ChkBox_75mgsubcutaneouslyevery4weeks = refFormImmunologyViewModel.ChkBox_75mgsubcutaneouslyevery4weeks;
                refFormImmunology.ChkBox_28daysupply = refFormImmunologyViewModel.ChkBox_28daysupply;
                refFormImmunology.PRESCRIPTION_REFILLS_TxtBox1 = refFormImmunologyViewModel.PRESCRIPTION_REFILLS_TxtBox1;
                refFormImmunology.ChkBox_150mgsubcutaneouslyevery4weeks = refFormImmunologyViewModel.ChkBox_150mgsubcutaneouslyevery4weeks;
                refFormImmunology.ChkBox_84daysupply = refFormImmunologyViewModel.ChkBox_84daysupply;
                refFormImmunology.PRESCRIPTION_REFILLS_TxtBox2 = refFormImmunologyViewModel.PRESCRIPTION_REFILLS_TxtBox2;
                refFormImmunology.ChkBox_225mgsubcutaneouslyevery2weeks = refFormImmunologyViewModel.ChkBox_225mgsubcutaneouslyevery2weeks;
                refFormImmunology.ChkBox_225mgsubcutaneouslyevery4weeks = refFormImmunologyViewModel.ChkBox_225mgsubcutaneouslyevery4weeks;
                refFormImmunology.ChkBox_300mgsubcutaneouslyevery2weeks = refFormImmunologyViewModel.ChkBox_300mgsubcutaneouslyevery2weeks;
                refFormImmunology.ChkBox_300mgsubcutaneouslyevery4weeks = refFormImmunologyViewModel.ChkBox_300mgsubcutaneouslyevery4weeks;
                refFormImmunology.ChkBox_375mgsubcutaneouslyevery2weeks = refFormImmunologyViewModel.ChkBox_375mgsubcutaneouslyevery2weeks;
                refFormImmunology.ChkBox_XolairPatientswithCIU = refFormImmunologyViewModel.ChkBox_XolairPatientswithCIU;
                refFormImmunology.ChkBox_150mgsubcutaneouslyevery4weeks_2 = refFormImmunologyViewModel.ChkBox_150mgsubcutaneouslyevery4weeks_2;
                refFormImmunology.ChkBox_28daysupply2 = refFormImmunologyViewModel.ChkBox_28daysupply2;
                refFormImmunology.PRESCRIPTION_REFILLS_TxtBox3 = refFormImmunologyViewModel.PRESCRIPTION_REFILLS_TxtBox3;
                refFormImmunology.ChkBox_300mgsubcutaneouslyevery4weeks_2 = refFormImmunologyViewModel.ChkBox_300mgsubcutaneouslyevery4weeks_2;
                refFormImmunology.ChkBox_84daysupply2 = refFormImmunologyViewModel.ChkBox_84daysupply2;
                refFormImmunology.PRESCRIPTION_REFILLS_TxtBox4 = refFormImmunologyViewModel.PRESCRIPTION_REFILLS_TxtBox4;
                refFormImmunology.ChkBox_EpiPen = refFormImmunologyViewModel.ChkBox_EpiPen;
                refFormImmunology.ChkBox_Injection0_3mg = refFormImmunologyViewModel.ChkBox_Injection0_3mg;
                refFormImmunology.ChkBox_EpiPen0_3mg = refFormImmunologyViewModel.ChkBox_EpiPen0_3mg;
                refFormImmunology.ChkBox_Injection0_15mg = refFormImmunologyViewModel.ChkBox_Injection0_15mg;
                refFormImmunology.ChkBox_EpiPenJr0_15mg = refFormImmunologyViewModel.ChkBox_EpiPenJr0_15mg;
                refFormImmunology.ChkBoxOther = refFormImmunologyViewModel.ChkBoxOther;
                refFormImmunology.Other_TxtBox_1 = refFormImmunologyViewModel.Other_TxtBox_1;
                refFormImmunology.Other_TxtBox_2 = refFormImmunologyViewModel.Other_TxtBox_2;
                refFormImmunology.Other_Quantity_TxtBox = refFormImmunologyViewModel.Other_Quantity_TxtBox;
                refFormImmunology.Other_REFILLS_TxtBox = refFormImmunologyViewModel.Other_REFILLS_TxtBox;
                refFormImmunology.ChkBox_nola_L20_9AtopicDermatitis = refFormImmunologyViewModel.ChkBox_nola_L20_9AtopicDermatitis;
                refFormImmunology.ChkBox_nola_Dermatologist = refFormImmunologyViewModel.ChkBox_nola_Dermatologist;
                refFormImmunology.ChkBox_nola_Dupixent = refFormImmunologyViewModel.ChkBox_nola_Dupixent;
                refFormImmunology.ChkBox_nola_Dupixent_300mg1 = refFormImmunologyViewModel.ChkBox_nola_Dupixent_300mg1;
                refFormImmunology.ChkBox_nola_Dupixent_300mg2 = refFormImmunologyViewModel.ChkBox_nola_Dupixent_300mg2;
                refFormImmunology.ChkBox_nola_Dupixent_Load = refFormImmunologyViewModel.ChkBox_nola_Dupixent_Load;
                refFormImmunology.ChkBox_nola_Dupixent_Mantainance = refFormImmunologyViewModel.ChkBox_nola_Dupixent_Mantainance;
                refFormImmunology.nola_Dupixent_Refills_TxtBox = refFormImmunologyViewModel.nola_Dupixent_Refills_TxtBox;







                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormImmunology.ModifiedBy = CurrentUser.UserId;
                refFormImmunology.ModifiedOn = DateTime.UtcNow;

                refFormImmunology.IsSignatured = refFormImmunologyViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormImmunology.Update(refFormImmunology);
                    AuditLogger.AuditTracker("Edit ImmunologyReferralForm", "A ImmunologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormImmunology.CreatedBy = CurrentUser.UserId;
                    refFormImmunology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormImmunology.Insert(refFormImmunology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New ImmunologyReferralForm", "A new ImmunologyReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormImmunologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormImmunology.RefFormImmunologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormImmunolgy Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormImmunolgy PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormImmunolgy Referral Form Unsuccessfully.", success = false });
        }


        public ActionResult nola_immunology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola Immunology Referral Form"));
            return RedirectToAction("ImmunologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 28 });
        }
        public ActionResult ofl_immunology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl Immunology Referral Form"));
            return RedirectToAction("ImmunologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 29 });
        }
        //lmfl remicade referral form
        public ActionResult lmfl_remicade_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl remicade referral form"));
            return RedirectToAction("RemicadeReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 64 });
        }
        //Remicade.....................................
        public ActionResult RemicadeReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Remicade Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 18;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormRemicadeViewModel refFormRemicadeViewModel = new RefFormRemicadeViewModel();

                //Set ReferralFormId
                refFormRemicadeViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormRemicadeViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormRemicadeViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormRemicadeViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormRemicadeViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormRemicadeViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormRemicadeViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormRemicadeViewModel.PhysicianFullName = physician.FullName;
                        refFormRemicadeViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormRemicadeViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormRemicadeViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormRemicadeViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormRemicadeViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormRemicadeViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormRemicadeViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormRemicade refFormRemicade = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormRemicade = _unitOfWork.RefFormRemicade.GetSingle(t => t.RefFormRemicadeId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormRemicade == null) refFormRemicade = new RefFormRemicade();


                    refFormRemicadeViewModel.RefFormRemicadeId = refFormRemicade.RefFormRemicadeId;

                    //Form
                    //Add your code here.



                    refFormRemicadeViewModel.RefFormRemicadeId = refFormRemicade.RefFormRemicadeId;

                    refFormRemicadeViewModel.FormDate = refFormRemicade.FormDate;
                    refFormRemicadeViewModel.FormNeedsByDate = refFormRemicade.FormNeedsByDate;
                    refFormRemicadeViewModel.ChkBox_ShipToPatient = refFormRemicade.ChkBox_ShipToPatient ?? false;
                    refFormRemicadeViewModel.ChkBox_ShipToOffice = refFormRemicade.ChkBox_ShipToOffice ?? false;
                    refFormRemicadeViewModel.ChkBox_ShipToOther = refFormRemicade.ChkBox_ShipToOther ?? false;
                    refFormRemicadeViewModel.TxtBox_ShipToOther = refFormRemicade.TxtBox_ShipToOther;

                    refFormRemicadeViewModel.CLINICAL_Diagnosis_TxtBox = refFormRemicade.CLINICAL_Diagnosis_TxtBox;
                    refFormRemicadeViewModel.CLINICAL_ICD_10_TxtBox = refFormRemicade.CLINICAL_ICD_10_TxtBox;
                    refFormRemicadeViewModel.CLINICAL_DrugAllergies_TxtBox = refFormRemicade.CLINICAL_DrugAllergies_TxtBox;
                    refFormRemicadeViewModel.DATEOFNEXTINFUSION_TxtBox = refFormRemicade.DATEOFNEXTINFUSION_TxtBox.HasValue ? refFormRemicade.DATEOFNEXTINFUSION_TxtBox.Value : DateTime.UtcNow;
                    refFormRemicadeViewModel.CURRENTWEIGHT_TxtBox = refFormRemicade.CURRENTWEIGHT_TxtBox != null ? refFormRemicade.CURRENTWEIGHT_TxtBox.Value : 0D;
                    refFormRemicadeViewModel.ChkBox_5MG_KG = refFormRemicade.ChkBox_5MG_KG ?? false;
                    refFormRemicadeViewModel.ChkBox_3MG_KG = refFormRemicade.ChkBox_3MG_KG ?? false;
                    refFormRemicadeViewModel.ChkBox_MG_KG = refFormRemicade.ChkBox_MG_KG ?? false;
                    refFormRemicadeViewModel.MG_KG_TxtBox = refFormRemicade.MG_KG_TxtBox;
                    refFormRemicadeViewModel.ChkBox_LOADINGDOSE = refFormRemicade.ChkBox_LOADINGDOSE ?? false;
                    refFormRemicadeViewModel.ADMINISTER_TxtBox1 = refFormRemicade.ADMINISTER_TxtBox1;
                    refFormRemicadeViewModel.ChkBox_MAINTENANCEDOSE = refFormRemicade.ChkBox_MAINTENANCEDOSE ?? false;
                    refFormRemicadeViewModel.ADMINISTER_TxtBox2 = refFormRemicade.ADMINISTER_TxtBox2;
                    refFormRemicadeViewModel.MGIVEVERYWEEKS_TxtBox = refFormRemicade.MGIVEVERYWEEKS_TxtBox;
                    refFormRemicadeViewModel.REFILLS_TxtBox = refFormRemicade.REFILLS_TxtBox;
                    refFormRemicadeViewModel.ChkBox_MDOFFICE = refFormRemicade.ChkBox_MDOFFICE ?? false;
                    refFormRemicadeViewModel.ChkBox_INFUSIONCLINIC = refFormRemicade.ChkBox_INFUSIONCLINIC ?? false;
                    refFormRemicadeViewModel.Name_TxtBox = refFormRemicade.Name_TxtBox;
                    refFormRemicadeViewModel.Phone_TxtBox = refFormRemicade.Phone_TxtBox;
                    refFormRemicadeViewModel.ChkBox_HOMEINFUSION = refFormRemicade.ChkBox_HOMEINFUSION ?? false;
                    refFormRemicadeViewModel.HOMEHEALTHAGENCY_TxtBox = refFormRemicade.HOMEHEALTHAGENCY_TxtBox;
                    refFormRemicadeViewModel.Phone_TxtBox2 = refFormRemicade.Phone_TxtBox2;
                    refFormRemicadeViewModel.ChkBox_KROGERSPECIALTY = refFormRemicade.ChkBox_KROGERSPECIALTY ?? false;
                    refFormRemicadeViewModel.ChkBox_INFUSIONSUPPLIES = refFormRemicade.ChkBox_INFUSIONSUPPLIES ?? false;
                    refFormRemicadeViewModel.ChkBox_ACETAMINOPHEN = refFormRemicade.ChkBox_ACETAMINOPHEN ?? false;
                    refFormRemicadeViewModel.ChkBox_DIPHENHYDRAMINE = refFormRemicade.ChkBox_DIPHENHYDRAMINE ?? false;
                    refFormRemicadeViewModel.ChkBox_DIPHENHYDRAMINE2 = refFormRemicade.ChkBox_DIPHENHYDRAMINE2 ?? false;
                    refFormRemicadeViewModel.ChkBox_PREDNISONE = refFormRemicade.ChkBox_PREDNISONE ?? false;
                    refFormRemicadeViewModel.ChkBox_SOLUMEDROL = refFormRemicade.ChkBox_SOLUMEDROL ?? false;
                    refFormRemicadeViewModel.CheckBox_1 = refFormRemicade.CheckBox_1 ?? false;
                    refFormRemicadeViewModel.TextBox1 = refFormRemicade.TextBox1;
                    refFormRemicadeViewModel.Qty_TxtBox1 = refFormRemicade.Qty_TxtBox1;
                    refFormRemicadeViewModel.Qty_TxtBox2 = refFormRemicade.Qty_TxtBox2;
                    refFormRemicadeViewModel.ChkBox_SOLUMEDROL2 = refFormRemicade.ChkBox_SOLUMEDROL2 ?? false;
                    refFormRemicadeViewModel.Qty_TxtBox3 = refFormRemicade.Qty_TxtBox3;
                    refFormRemicadeViewModel.ChkBox_PHENERGAN = refFormRemicade.ChkBox_PHENERGAN ?? false;
                    refFormRemicadeViewModel.ChkBox_25MG = refFormRemicade.ChkBox_25MG ?? false;
                    refFormRemicadeViewModel.ChkBox_PO = refFormRemicade.ChkBox_PO ?? false;
                    refFormRemicadeViewModel.ChkBox_IVP = refFormRemicade.ChkBox_IVP ?? false;
                    refFormRemicadeViewModel.Qty_TxtBox4 = refFormRemicade.Qty_TxtBox4;
                    refFormRemicadeViewModel.CheckBox_2 = refFormRemicade.CheckBox_2 ?? false;
                    refFormRemicadeViewModel.TextBox2 = refFormRemicade.TextBox2;
                    refFormRemicadeViewModel.Qty_TxtBox5 = refFormRemicade.Qty_TxtBox5;
                    refFormRemicadeViewModel.ChkBox_PERIPHERALACCESS = refFormRemicade.ChkBox_PERIPHERALACCESS ?? false;
                    refFormRemicadeViewModel.ChkBox_CENTRALVENOUSACCESS = refFormRemicade.ChkBox_CENTRALVENOUSACCESS ?? false;
                    refFormRemicadeViewModel.ChkBox_HEPARINFLUSH = refFormRemicade.ChkBox_HEPARINFLUSH ?? false;
                    refFormRemicadeViewModel.HEPARINFLUSH_Qty_TxtBox = refFormRemicade.HEPARINFLUSH_Qty_TxtBox;
                    refFormRemicadeViewModel.ChkBox_HEPARINFLUSH2 = refFormRemicade.ChkBox_HEPARINFLUSH2 ?? false;
                    refFormRemicadeViewModel.HEPARINFLUSH_Qty_TxtBox2 = refFormRemicade.HEPARINFLUSH_Qty_TxtBox2;
                    refFormRemicadeViewModel.ChkBox_SALINEFLUSH = refFormRemicade.ChkBox_SALINEFLUSH ?? false;
                    refFormRemicadeViewModel.SALINEFLUSH_Qty_TxtBox = refFormRemicade.SALINEFLUSH_Qty_TxtBox;
                    refFormRemicadeViewModel.ChkBox_Empty = refFormRemicade.ChkBox_Empty ?? false;
                    refFormRemicadeViewModel.TxtBox_Empty = refFormRemicade.TxtBox_Empty;
                    refFormRemicadeViewModel.TxtBox_Empty_Qty = refFormRemicade.TxtBox_Empty_Qty;
                    refFormRemicadeViewModel.ChkBox_EPINEPHRINE = refFormRemicade.ChkBox_EPINEPHRINE ?? false;
                    refFormRemicadeViewModel.EPINEPHRINE_TxtBox = refFormRemicade.EPINEPHRINE_TxtBox;
                    refFormRemicadeViewModel.ChkBox1_SIG = refFormRemicade.ChkBox1_SIG ?? false;
                    refFormRemicadeViewModel.SIG_TxtBox1 = refFormRemicade.SIG_TxtBox1;
                    refFormRemicadeViewModel.SIG_Qty_TxtBox1 = refFormRemicade.SIG_Qty_TxtBox1;
                    refFormRemicadeViewModel.ChkBox2_SIG = refFormRemicade.ChkBox2_SIG ?? false;
                    refFormRemicadeViewModel.SIG_TxtBox2 = refFormRemicade.SIG_TxtBox2;
                    refFormRemicadeViewModel.SIG_Qty_TxtBox2 = refFormRemicade.SIG_Qty_TxtBox2;
                    refFormRemicadeViewModel.ChkBox3_SIG = refFormRemicade.ChkBox3_SIG ?? false;
                    refFormRemicadeViewModel.SIG_TxtBox3 = refFormRemicade.SIG_TxtBox3;
                    refFormRemicadeViewModel.SIG_Qty_TxtBox3 = refFormRemicade.SIG_Qty_TxtBox3;
                    refFormRemicadeViewModel.ChkBox_SIG = refFormRemicade.ChkBox_SIG ?? false;
                    refFormRemicadeViewModel.ChkBox_MAINTENANCEDOSE2 = refFormRemicade.ChkBox_MAINTENANCEDOSE2 ?? false;
                    refFormRemicadeViewModel.REF_PRN_TxtBox = refFormRemicade.REF_PRN_TxtBox;
                    refFormRemicadeViewModel.ChkBox_Others = refFormRemicade.ChkBox_Others ?? false;
                    refFormRemicadeViewModel.Others_TxtBox = refFormRemicade.Others_TxtBox;







                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormRemicadeViewModel.IsSignatured = refFormRemicade.IsSignatured ?? false;

                    return View(refFormRemicadeViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormRemicadeViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormRemicadeViewModel());
        }
        [HttpPost]
        public JsonResult RemicadeReferralForm(RefFormRemicadeViewModel refFormRemicadeViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormRemicadeViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormRemicade refFormRemicade = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormRemicadeViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormRemicade = _unitOfWork.RefFormRemicade.GetSingle(t => t.RefFormRemicadeId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormRemicade == null)
                {
                    refFormRemicade = new RefFormRemicade();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form



                refFormRemicade.RefFormRemicadeId = refFormRemicadeViewModel.RefFormRemicadeId;
                refFormRemicade.FormDate = refFormRemicadeViewModel.FormDate;
                refFormRemicade.FormNeedsByDate = refFormRemicadeViewModel.FormNeedsByDate;
                refFormRemicade.ChkBox_ShipToPatient = refFormRemicadeViewModel.ChkBox_ShipToPatient;
                refFormRemicade.ChkBox_ShipToOffice = refFormRemicadeViewModel.ChkBox_ShipToOffice;
                refFormRemicade.ChkBox_ShipToOther = refFormRemicadeViewModel.ChkBox_ShipToOther;
                refFormRemicade.TxtBox_ShipToOther = refFormRemicadeViewModel.TxtBox_ShipToOther;
                refFormRemicade.CLINICAL_Diagnosis_TxtBox = refFormRemicadeViewModel.CLINICAL_Diagnosis_TxtBox;
                refFormRemicade.CLINICAL_ICD_10_TxtBox = refFormRemicadeViewModel.CLINICAL_ICD_10_TxtBox;
                refFormRemicade.CLINICAL_DrugAllergies_TxtBox = refFormRemicadeViewModel.CLINICAL_DrugAllergies_TxtBox;
                refFormRemicade.DATEOFNEXTINFUSION_TxtBox = refFormRemicadeViewModel.DATEOFNEXTINFUSION_TxtBox;
                refFormRemicade.CURRENTWEIGHT_TxtBox = refFormRemicadeViewModel.CURRENTWEIGHT_TxtBox;
                refFormRemicade.ChkBox_5MG_KG = refFormRemicadeViewModel.ChkBox_5MG_KG;
                refFormRemicade.ChkBox_3MG_KG = refFormRemicadeViewModel.ChkBox_3MG_KG;
                refFormRemicade.ChkBox_MG_KG = refFormRemicadeViewModel.ChkBox_MG_KG;
                refFormRemicade.MG_KG_TxtBox = refFormRemicadeViewModel.MG_KG_TxtBox;
                refFormRemicade.ChkBox_LOADINGDOSE = refFormRemicadeViewModel.ChkBox_LOADINGDOSE;
                refFormRemicade.ADMINISTER_TxtBox1 = refFormRemicadeViewModel.ADMINISTER_TxtBox1;
                refFormRemicade.ChkBox_MAINTENANCEDOSE = refFormRemicadeViewModel.ChkBox_MAINTENANCEDOSE;
                refFormRemicade.ADMINISTER_TxtBox2 = refFormRemicadeViewModel.ADMINISTER_TxtBox2;
                refFormRemicade.MGIVEVERYWEEKS_TxtBox = refFormRemicadeViewModel.MGIVEVERYWEEKS_TxtBox;
                refFormRemicade.REFILLS_TxtBox = refFormRemicadeViewModel.REFILLS_TxtBox;
                refFormRemicade.ChkBox_MDOFFICE = refFormRemicadeViewModel.ChkBox_MDOFFICE;
                refFormRemicade.ChkBox_INFUSIONCLINIC = refFormRemicadeViewModel.ChkBox_INFUSIONCLINIC;
                refFormRemicade.Name_TxtBox = refFormRemicadeViewModel.Name_TxtBox;
                refFormRemicade.Phone_TxtBox = refFormRemicadeViewModel.Phone_TxtBox;
                refFormRemicade.ChkBox_HOMEINFUSION = refFormRemicadeViewModel.ChkBox_HOMEINFUSION;
                refFormRemicade.HOMEHEALTHAGENCY_TxtBox = refFormRemicadeViewModel.HOMEHEALTHAGENCY_TxtBox;
                refFormRemicade.Phone_TxtBox2 = refFormRemicadeViewModel.Phone_TxtBox2;
                refFormRemicade.ChkBox_KROGERSPECIALTY = refFormRemicadeViewModel.ChkBox_KROGERSPECIALTY;
                refFormRemicade.ChkBox_INFUSIONSUPPLIES = refFormRemicadeViewModel.ChkBox_INFUSIONSUPPLIES;
                refFormRemicade.ChkBox_ACETAMINOPHEN = refFormRemicadeViewModel.ChkBox_ACETAMINOPHEN;
                refFormRemicade.ChkBox_DIPHENHYDRAMINE = refFormRemicadeViewModel.ChkBox_DIPHENHYDRAMINE;
                refFormRemicade.ChkBox_DIPHENHYDRAMINE2 = refFormRemicadeViewModel.ChkBox_DIPHENHYDRAMINE2;
                refFormRemicade.ChkBox_PREDNISONE = refFormRemicadeViewModel.ChkBox_PREDNISONE;
                refFormRemicade.ChkBox_SOLUMEDROL = refFormRemicadeViewModel.ChkBox_SOLUMEDROL;
                refFormRemicade.CheckBox_1 = refFormRemicadeViewModel.CheckBox_1;
                refFormRemicade.TextBox1 = refFormRemicadeViewModel.TextBox1;
                refFormRemicade.Qty_TxtBox1 = refFormRemicadeViewModel.Qty_TxtBox1;
                refFormRemicade.Qty_TxtBox2 = refFormRemicadeViewModel.Qty_TxtBox2;
                refFormRemicade.ChkBox_SOLUMEDROL2 = refFormRemicadeViewModel.ChkBox_SOLUMEDROL2;
                refFormRemicade.Qty_TxtBox3 = refFormRemicadeViewModel.Qty_TxtBox3;
                refFormRemicade.ChkBox_PHENERGAN = refFormRemicadeViewModel.ChkBox_PHENERGAN;
                refFormRemicade.ChkBox_25MG = refFormRemicadeViewModel.ChkBox_25MG;
                refFormRemicade.ChkBox_PO = refFormRemicadeViewModel.ChkBox_PO;
                refFormRemicade.ChkBox_IVP = refFormRemicadeViewModel.ChkBox_IVP;
                refFormRemicade.Qty_TxtBox4 = refFormRemicadeViewModel.Qty_TxtBox4;
                refFormRemicade.CheckBox_2 = refFormRemicadeViewModel.CheckBox_2;
                refFormRemicade.TextBox2 = refFormRemicadeViewModel.TextBox2;
                refFormRemicade.Qty_TxtBox5 = refFormRemicadeViewModel.Qty_TxtBox5;
                refFormRemicade.ChkBox_PERIPHERALACCESS = refFormRemicadeViewModel.ChkBox_PERIPHERALACCESS;
                refFormRemicade.ChkBox_CENTRALVENOUSACCESS = refFormRemicadeViewModel.ChkBox_CENTRALVENOUSACCESS;
                refFormRemicade.ChkBox_HEPARINFLUSH = refFormRemicadeViewModel.ChkBox_HEPARINFLUSH;
                refFormRemicade.HEPARINFLUSH_Qty_TxtBox = refFormRemicadeViewModel.HEPARINFLUSH_Qty_TxtBox;
                refFormRemicade.ChkBox_HEPARINFLUSH2 = refFormRemicadeViewModel.ChkBox_HEPARINFLUSH2;
                refFormRemicade.HEPARINFLUSH_Qty_TxtBox2 = refFormRemicadeViewModel.HEPARINFLUSH_Qty_TxtBox2;
                refFormRemicade.ChkBox_SALINEFLUSH = refFormRemicadeViewModel.ChkBox_SALINEFLUSH;
                refFormRemicade.SALINEFLUSH_Qty_TxtBox = refFormRemicadeViewModel.SALINEFLUSH_Qty_TxtBox;
                refFormRemicade.ChkBox_Empty = refFormRemicadeViewModel.ChkBox_Empty;
                refFormRemicade.TxtBox_Empty = refFormRemicadeViewModel.TxtBox_Empty;
                refFormRemicade.TxtBox_Empty_Qty = refFormRemicadeViewModel.TxtBox_Empty_Qty;
                refFormRemicade.ChkBox_EPINEPHRINE = refFormRemicadeViewModel.ChkBox_EPINEPHRINE;
                refFormRemicade.EPINEPHRINE_TxtBox = refFormRemicadeViewModel.EPINEPHRINE_TxtBox;
                refFormRemicade.ChkBox1_SIG = refFormRemicadeViewModel.ChkBox1_SIG;
                refFormRemicade.SIG_TxtBox1 = refFormRemicadeViewModel.SIG_TxtBox1;
                refFormRemicade.SIG_Qty_TxtBox1 = refFormRemicadeViewModel.SIG_Qty_TxtBox1;
                refFormRemicade.ChkBox2_SIG = refFormRemicadeViewModel.ChkBox2_SIG;
                refFormRemicade.SIG_TxtBox2 = refFormRemicadeViewModel.SIG_TxtBox2;
                refFormRemicade.SIG_Qty_TxtBox2 = refFormRemicadeViewModel.SIG_Qty_TxtBox2;
                refFormRemicade.ChkBox3_SIG = refFormRemicadeViewModel.ChkBox3_SIG;
                refFormRemicade.SIG_TxtBox3 = refFormRemicadeViewModel.SIG_TxtBox3;
                refFormRemicade.SIG_Qty_TxtBox3 = refFormRemicadeViewModel.SIG_Qty_TxtBox3;
                refFormRemicade.ChkBox_SIG = refFormRemicadeViewModel.ChkBox_SIG;
                refFormRemicade.ChkBox_MAINTENANCEDOSE2 = refFormRemicadeViewModel.ChkBox_MAINTENANCEDOSE2;
                refFormRemicade.REF_PRN_TxtBox = refFormRemicadeViewModel.REF_PRN_TxtBox;
                refFormRemicade.ChkBox_Others = refFormRemicadeViewModel.ChkBox_Others;
                refFormRemicade.Others_TxtBox = refFormRemicadeViewModel.Others_TxtBox;


                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormRemicade.ModifiedBy = CurrentUser.UserId;
                refFormRemicade.ModifiedOn = DateTime.UtcNow;

                refFormRemicade.IsSignatured = refFormRemicadeViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormRemicade.Update(refFormRemicade);
                    AuditLogger.AuditTracker("Edit RemicadeReferralForm", "A RemicadeReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormRemicade.CreatedBy = CurrentUser.UserId;
                    refFormRemicade.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormRemicade.Insert(refFormRemicade);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New RemicadeReferralForm", "A new RemicadeReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormRemicadeViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormRemicade.RefFormRemicadeId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormRemicade Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormRemicade PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormRemicade Referral Form Unsuccessfully.", success = false });
        }
        //ggca rheumatology referral form
        public ActionResult ggca_rheumatology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca rheumatology referral form"));
            return RedirectToAction("RheumatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 65 });
        }
        //lmfl rheumatology referral form
        public ActionResult lmfl_rheumatology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl rheumatology referral form"));
            return RedirectToAction("RheumatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 66 });
        }
        //ofl rheumatology referral form
        public ActionResult ofl_rheumatology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl rheumatology referral form"));
            return RedirectToAction("RheumatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 67 });
        }
        //Rheumatology.................................

        public ActionResult RheumatologyReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("rheumatology-referral-form"));
                    referralFormId = referralForm?.ReferralFormId ?? 19;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormRheumatologyViewModel refFormRheumatologyViewModel = new RefFormRheumatologyViewModel();

                //Set ReferralFormId
                refFormRheumatologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormRheumatologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormRheumatologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormRheumatologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormRheumatologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormRheumatologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormRheumatologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormRheumatologyViewModel.PhysicianFullName = physician.FullName;
                        refFormRheumatologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormRheumatologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormRheumatologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormRheumatologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormRheumatologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormRheumatologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormRheumatologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormRheumatology refFormRheumatology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormRheumatology = _unitOfWork.RefFormRheumatology.GetSingle(t => t.RefFormRheumatologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormRheumatology == null) refFormRheumatology = new RefFormRheumatology();


                    refFormRheumatologyViewModel.RefFormRheumatologyId = refFormRheumatology.RefFormRheumatologyId;

                    //Form
                    //Add your code here.



                    refFormRheumatologyViewModel.RefFormRheumatologyId = refFormRheumatology.RefFormRheumatologyId;

                    refFormRheumatologyViewModel.FormDate = refFormRheumatology.FormDate;
                    refFormRheumatologyViewModel.FormNeedsByDate = refFormRheumatology.FormNeedsByDate;
                    refFormRheumatologyViewModel.ChkBox_ShipToPatient = refFormRheumatology.ChkBox_ShipToPatient ?? false;
                    refFormRheumatologyViewModel.ChkBox_ShipToOffice = refFormRheumatology.ChkBox_ShipToOffice ?? false;
                    refFormRheumatologyViewModel.ChkBox_ShipToOther = refFormRheumatology.ChkBox_ShipToOther ?? false;
                    refFormRheumatologyViewModel.TxtBox_ShipToOther = refFormRheumatology.TxtBox_ShipToOther;

                    refFormRheumatologyViewModel.ChkBox_M06_9 = refFormRheumatology.ChkBox_M06_9 ?? false;
                    refFormRheumatologyViewModel.ChkBox_L40_50 = refFormRheumatology.ChkBox_L40_50 ?? false;
                    refFormRheumatologyViewModel.ChkBox_M45_9 = refFormRheumatology.ChkBox_M45_9 ?? false;
                    refFormRheumatologyViewModel.ChkBox_K50_90 = refFormRheumatology.ChkBox_K50_90 ?? false;
                    refFormRheumatologyViewModel.ChkBox_M32_10 = refFormRheumatology.ChkBox_M32_10 ?? false;
                    refFormRheumatologyViewModel.ChkBox_L40_8 = refFormRheumatology.ChkBox_L40_8 ?? false;
                    refFormRheumatologyViewModel.ChkBox_Empty = refFormRheumatology.ChkBox_Empty ?? false;
                    refFormRheumatologyViewModel.ChkBox_Other = refFormRheumatology.ChkBox_Other ?? false;
                    refFormRheumatologyViewModel.Other_TxtBox = refFormRheumatology.Other_TxtBox;
                    refFormRheumatologyViewModel.CLINICAL_DX_Code_TxtBox = refFormRheumatology.CLINICAL_DX_Code_TxtBox;
                    refFormRheumatologyViewModel.CLINICAL_DrugAllergies_TxtBox = refFormRheumatology.CLINICAL_DrugAllergies_TxtBox;
                    refFormRheumatologyViewModel.ChkBox_Prior1 = refFormRheumatology.ChkBox_Prior1 ?? false;
                    refFormRheumatologyViewModel.LengthofTreatment_TxtBox1 = refFormRheumatology.LengthofTreatment_TxtBox1;
                    refFormRheumatologyViewModel.Chkbox_ReasonforDiscontinuing1 = refFormRheumatology.Chkbox_ReasonforDiscontinuing1 ?? false;
                    refFormRheumatologyViewModel.ReasonforDiscontinuing1_TxtBox = refFormRheumatology.ReasonforDiscontinuing1_TxtBox;
                    refFormRheumatologyViewModel.ChkBox_Prior2 = refFormRheumatology.ChkBox_Prior2 ?? false;
                    refFormRheumatologyViewModel.LengthofTreatment_TxtBox2 = refFormRheumatology.LengthofTreatment_TxtBox2;
                    refFormRheumatologyViewModel.Chkbox_ReasonforDiscontinuing2 = refFormRheumatology.Chkbox_ReasonforDiscontinuing2 ?? false;
                    refFormRheumatologyViewModel.ReasonforDiscontinuing2_TxtBox2 = refFormRheumatology.ReasonforDiscontinuing2_TxtBox2;
                    refFormRheumatologyViewModel.ChkBox_Prior3 = refFormRheumatology.ChkBox_Prior3 ?? false;
                    refFormRheumatologyViewModel.LengthofTreatment_TxtBox3 = refFormRheumatology.LengthofTreatment_TxtBox3;
                    refFormRheumatologyViewModel.Chkbox_ReasonforDiscontinuing3 = refFormRheumatology.Chkbox_ReasonforDiscontinuing3 ?? false;
                    refFormRheumatologyViewModel.ReasonforDiscontinuing3_TxtBox3 = refFormRheumatology.ReasonforDiscontinuing3_TxtBox3;
                    refFormRheumatologyViewModel.ChkBox_latexallergy_Yes = refFormRheumatology.ChkBox_latexallergy_Yes ?? false;
                    refFormRheumatologyViewModel.ChkBox_latexallergy_No = refFormRheumatology.ChkBox_latexallergy_No ?? false;
                    refFormRheumatologyViewModel.ChkBox_beforestart_Yes = refFormRheumatology.ChkBox_beforestart_Yes ?? false;
                    refFormRheumatologyViewModel.ChkBox_beforestart_No = refFormRheumatology.ChkBox_beforestart_No ?? false;
                    refFormRheumatologyViewModel.ChkBox_Actemra = refFormRheumatology.ChkBox_Actemra ?? false;
                    refFormRheumatologyViewModel.ChkBox_162mg = refFormRheumatology.ChkBox_162mg ?? false;
                    refFormRheumatologyViewModel.ChkBox_vial = refFormRheumatology.ChkBox_vial ?? false;
                    refFormRheumatologyViewModel.Vial_TxtBox = refFormRheumatology.Vial_TxtBox;
                    refFormRheumatologyViewModel.ChkBox_Inject162mgsubcutaneously = refFormRheumatology.ChkBox_Inject162mgsubcutaneously ?? false;
                    refFormRheumatologyViewModel.ChkBox_ONCEaweek = refFormRheumatology.ChkBox_ONCEaweek ?? false;
                    refFormRheumatologyViewModel.ChkBox_everyOTHERweek = refFormRheumatology.ChkBox_everyOTHERweek ?? false;
                    refFormRheumatologyViewModel.Refills_TxtBox1 = refFormRheumatology.Refills_TxtBox1;
                    refFormRheumatologyViewModel.ChkBox_Benlysta = refFormRheumatology.ChkBox_Benlysta ?? false;
                    refFormRheumatologyViewModel.ChkBox_120mg = refFormRheumatology.ChkBox_120mg ?? false;
                    refFormRheumatologyViewModel.ChkBox_400mg = refFormRheumatology.ChkBox_400mg ?? false;
                    refFormRheumatologyViewModel.ChkBox_Infuse1 = refFormRheumatology.ChkBox_Infuse1 ?? false;
                    refFormRheumatologyViewModel.Infuse1_TxtBox = refFormRheumatology.Infuse1_TxtBox;
                    refFormRheumatologyViewModel.ChkBox_Infuse2 = refFormRheumatology.ChkBox_Infuse2 ?? false;
                    refFormRheumatologyViewModel.Infuse2_TxtBox = refFormRheumatology.Infuse2_TxtBox;
                    refFormRheumatologyViewModel.Refills_TxtBox2 = refFormRheumatology.Refills_TxtBox2;
                    refFormRheumatologyViewModel.ChkBox_Cimzia = refFormRheumatology.ChkBox_Cimzia ?? false;
                    refFormRheumatologyViewModel.ChkBox_200PrefilledSyringe = refFormRheumatology.ChkBox_200PrefilledSyringe ?? false;
                    refFormRheumatologyViewModel.ChkBox_200LYOPowder = refFormRheumatology.ChkBox_200LYOPowder ?? false;
                    refFormRheumatologyViewModel.ChkBox_StarterKit = refFormRheumatology.ChkBox_StarterKit ?? false;
                    refFormRheumatologyViewModel.ChkBox_Maintenance = refFormRheumatology.ChkBox_Maintenance ?? false;
                    refFormRheumatologyViewModel.ChkBox_Inject200mg = refFormRheumatology.ChkBox_Inject200mg ?? false;
                    refFormRheumatologyViewModel.Refills_TxtBox3 = refFormRheumatology.Refills_TxtBox3;
                    refFormRheumatologyViewModel.ChkBox_Cosentyx = refFormRheumatology.ChkBox_Cosentyx ?? false;
                    refFormRheumatologyViewModel.ChkBox_300mg = refFormRheumatology.ChkBox_300mg ?? false;
                    refFormRheumatologyViewModel.ChkBox_PFS = refFormRheumatology.ChkBox_PFS ?? false;
                    refFormRheumatologyViewModel.ChkBox_150mgPen = refFormRheumatology.ChkBox_150mgPen ?? false;
                    refFormRheumatologyViewModel.ChkBox_PFS2 = refFormRheumatology.ChkBox_PFS2 ?? false;
                    refFormRheumatologyViewModel.ChkBox_Load = refFormRheumatology.ChkBox_Load ?? false;
                    refFormRheumatologyViewModel.ChkBox_300mg2 = refFormRheumatology.ChkBox_300mg2 ?? false;
                    refFormRheumatologyViewModel.ChkBox_150mgsubcutaneously = refFormRheumatology.ChkBox_150mgsubcutaneously ?? false;
                    refFormRheumatologyViewModel.ChkBox_Maintenance2 = refFormRheumatology.ChkBox_Maintenance2 ?? false;
                    refFormRheumatologyViewModel.ChkBox_300mg3 = refFormRheumatology.ChkBox_300mg3 ?? false;
                    refFormRheumatologyViewModel.ChkBox_150mgsubcutaneously2 = refFormRheumatology.ChkBox_150mgsubcutaneously2 ?? false;
                    refFormRheumatologyViewModel.Refills_TxtBox4 = refFormRheumatology.Refills_TxtBox4;
                    refFormRheumatologyViewModel.ChkBox_Enbrel = refFormRheumatology.ChkBox_Enbrel ?? false;
                    refFormRheumatologyViewModel.ChkBox_Enbrel50mgSureclick = refFormRheumatology.ChkBox_Enbrel50mgSureclick ?? false;
                    refFormRheumatologyViewModel.ChkBox_Enbrel50mgPrefilledSyringe = refFormRheumatology.ChkBox_Enbrel50mgPrefilledSyringe ?? false;
                    refFormRheumatologyViewModel.ChkBox_Enbrel25mgPFS = refFormRheumatology.ChkBox_Enbrel25mgPFS ?? false;
                    refFormRheumatologyViewModel.ChkBox_EnbrelVials = refFormRheumatology.ChkBox_EnbrelVials ?? false;
                    refFormRheumatologyViewModel.ChkBox_EnbrelInject50mgsubcutaneouslyONCE = refFormRheumatology.ChkBox_EnbrelInject50mgsubcutaneouslyONCE ?? false;
                    refFormRheumatologyViewModel.ChkBox_Enbrelnject50mgsubcutaneouslyTWICE = refFormRheumatology.ChkBox_Enbrelnject50mgsubcutaneouslyTWICE ?? false;
                    refFormRheumatologyViewModel.Refills_TxtBox5 = refFormRheumatology.Refills_TxtBox5;
                    refFormRheumatologyViewModel.ChkBox_Humira = refFormRheumatology.ChkBox_Humira ?? false;
                    refFormRheumatologyViewModel.ChkBox_Humira40mgPen = refFormRheumatology.ChkBox_Humira40mgPen ?? false;
                    refFormRheumatologyViewModel.ChkBox_Humira40mgPrefilledSyringe = refFormRheumatology.ChkBox_Humira40mgPrefilledSyringe ?? false;
                    refFormRheumatologyViewModel.ChkBox_HumiraInject40mgsubcutaneouslyevery = refFormRheumatology.ChkBox_HumiraInject40mgsubcutaneouslyevery ?? false;
                    refFormRheumatologyViewModel.ChkBox_HumiraInject40mgsubcutaneouslyONCE = refFormRheumatology.ChkBox_HumiraInject40mgsubcutaneouslyONCE ?? false;
                    refFormRheumatologyViewModel.Refills_TxtBox6 = refFormRheumatology.Refills_TxtBox6;
                    refFormRheumatologyViewModel.ChkBox_Orencia = refFormRheumatology.ChkBox_Orencia ?? false;
                    refFormRheumatologyViewModel.ChkBox_Orencia125mg = refFormRheumatology.ChkBox_Orencia125mg ?? false;
                    refFormRheumatologyViewModel.ChkBox_OrenciaPFS = refFormRheumatology.ChkBox_OrenciaPFS ?? false;
                    refFormRheumatologyViewModel.ChkBox_OrenciaClickJect = refFormRheumatology.ChkBox_OrenciaClickJect ?? false;
                    refFormRheumatologyViewModel.ChkBox_Orencia250mg = refFormRheumatology.ChkBox_Orencia250mg ?? false;
                    refFormRheumatologyViewModel.ChkBox_OrenciaInject125mg = refFormRheumatology.ChkBox_OrenciaInject125mg ?? false;
                    refFormRheumatologyViewModel.ChkBox_OrenciaInfuse = refFormRheumatology.ChkBox_OrenciaInfuse ?? false;
                    refFormRheumatologyViewModel.OrenciaInfuse_TxtBox = refFormRheumatology.OrenciaInfuse_TxtBox;
                    refFormRheumatologyViewModel.Orenciamgat_TxtBox1 = refFormRheumatology.Orenciamgat_TxtBox1;
                    refFormRheumatologyViewModel.Refills_TxtBox7 = refFormRheumatology.Refills_TxtBox7;
                    refFormRheumatologyViewModel.ChkBox_Otezla = refFormRheumatology.ChkBox_Otezla ?? false;
                    refFormRheumatologyViewModel.ChkBox_OtezlaStarterPack = refFormRheumatology.ChkBox_OtezlaStarterPack ?? false;
                    refFormRheumatologyViewModel.ChkBox_Otezla230mgTablets = refFormRheumatology.ChkBox_Otezla230mgTablets ?? false;
                    refFormRheumatologyViewModel.ChkBox_OtezlaEmpty = refFormRheumatology.ChkBox_OtezlaEmpty ?? false;
                    refFormRheumatologyViewModel.ChkBox_OtezlaTitrate = refFormRheumatology.ChkBox_OtezlaTitrate ?? false;
                    refFormRheumatologyViewModel.Otezla_dateprovided_TxtBox = refFormRheumatology.Otezla_dateprovided_TxtBox.HasValue ? refFormRheumatology.Otezla_dateprovided_TxtBox.Value : DateTime.UtcNow;
                    refFormRheumatologyViewModel.ChkBox_Otezla_Maintenance = refFormRheumatology.ChkBox_Otezla_Maintenance ?? false;
                    refFormRheumatologyViewModel.ChkBox_Otezla_Bridge = refFormRheumatology.ChkBox_Otezla_Bridge ?? false;
                    refFormRheumatologyViewModel.Refills_TxtBox8 = refFormRheumatology.Refills_TxtBox8;
                    refFormRheumatologyViewModel.ChkBox_Remicade = refFormRheumatology.ChkBox_Remicade ?? false;
                    refFormRheumatologyViewModel.ChkBox_Remicade100mgVial = refFormRheumatology.ChkBox_Remicade100mgVial ?? false;
                    refFormRheumatologyViewModel.ChkBox_RemicadeInfuse = refFormRheumatology.ChkBox_RemicadeInfuse ?? false;
                    refFormRheumatologyViewModel.RemicadeInfuse_TxtBox = refFormRheumatology.RemicadeInfuse_TxtBox;
                    refFormRheumatologyViewModel.Remicademgat_TxtBox = refFormRheumatology.Remicademgat_TxtBox;
                    refFormRheumatologyViewModel.Remicadewt_TxtBox = refFormRheumatology.Remicadewt_TxtBox;
                    refFormRheumatologyViewModel.Refills_TxtBox9 = refFormRheumatology.Refills_TxtBox9;
                    refFormRheumatologyViewModel.ChkBox_Rituxan = refFormRheumatology.ChkBox_Rituxan ?? false;
                    refFormRheumatologyViewModel.Rituxan_TxtBox = refFormRheumatology.Rituxan_TxtBox;
                    refFormRheumatologyViewModel.RituxanInfuse_TxtBox = refFormRheumatology.RituxanInfuse_TxtBox;
                    refFormRheumatologyViewModel.ChkBox_RituxanInfuse = refFormRheumatology.ChkBox_RituxanInfuse ?? false;
                    refFormRheumatologyViewModel.Rituxanmgat_TxtBox = refFormRheumatology.Rituxanmgat_TxtBox;
                    refFormRheumatologyViewModel.Refills_TxtBox10 = refFormRheumatology.Refills_TxtBox10;
                    refFormRheumatologyViewModel.ChkBox_Simponi = refFormRheumatology.ChkBox_Simponi ?? false;
                    refFormRheumatologyViewModel.ChkBox_Simponi50mgSmartJect = refFormRheumatology.ChkBox_Simponi50mgSmartJect ?? false;
                    refFormRheumatologyViewModel.ChkBox_SimponiPFS = refFormRheumatology.ChkBox_SimponiPFS ?? false;
                    refFormRheumatologyViewModel.ChkBox_SimponiAria = refFormRheumatology.ChkBox_SimponiAria ?? false;
                    refFormRheumatologyViewModel.ChkBox_SimponiInject50mgsubcutaneouslyONCE = refFormRheumatology.ChkBox_SimponiInject50mgsubcutaneouslyONCE ?? false;
                    refFormRheumatologyViewModel.ChkBox_SimponiInfuse = refFormRheumatology.ChkBox_SimponiInfuse ?? false;
                    refFormRheumatologyViewModel.SimponiInfusemgatweeks0and4 = refFormRheumatology.SimponiInfusemgatweeks0and4;
                    refFormRheumatologyViewModel.Refills_TxtBox11 = refFormRheumatology.Refills_TxtBox11;
                    refFormRheumatologyViewModel.ChkBox_Stelara = refFormRheumatology.ChkBox_Stelara ?? false;
                    refFormRheumatologyViewModel.ChkBox_Stelara45mgPrefilledSyringe = refFormRheumatology.ChkBox_Stelara45mgPrefilledSyringe ?? false;
                    refFormRheumatologyViewModel.ChkBox_StelaraInject45mgonday = refFormRheumatology.ChkBox_StelaraInject45mgonday ?? false;
                    refFormRheumatologyViewModel.ChkBox_StelaraInject45mgevery12 = refFormRheumatology.ChkBox_StelaraInject45mgevery12 ?? false;
                    refFormRheumatologyViewModel.Refills_TxtBox12 = refFormRheumatology.Refills_TxtBox12;
                    refFormRheumatologyViewModel.ChkBox_Xeljanz = refFormRheumatology.ChkBox_Xeljanz ?? false;
                    refFormRheumatologyViewModel.ChkBox_Xeljanz5mgTablets = refFormRheumatology.ChkBox_Xeljanz5mgTablets ?? false;
                    refFormRheumatologyViewModel.ChkBox_Xeljanz11mgXRTablets = refFormRheumatology.ChkBox_Xeljanz11mgXRTablets ?? false;
                    refFormRheumatologyViewModel.ChkBox_Xeljanz1tabletbymouthtwice = refFormRheumatology.ChkBox_Xeljanz1tabletbymouthtwice ?? false;
                    refFormRheumatologyViewModel.ChkBox_Xeljanz1tabletbymouthonce = refFormRheumatology.ChkBox_Xeljanz1tabletbymouthonce ?? false;
                    refFormRheumatologyViewModel.Refills_TxtBox13 = refFormRheumatology.Refills_TxtBox13;
                    refFormRheumatologyViewModel.Refills_TxtBox14 = refFormRheumatology.Refills_TxtBox14;
                    refFormRheumatologyViewModel.ChkBox_Others = refFormRheumatology.ChkBox_Others ?? false;
                    refFormRheumatologyViewModel.Others_TxtBox1 = refFormRheumatology.Others_TxtBox1;
                    refFormRheumatologyViewModel.Others_TxtBox2 = refFormRheumatology.Others_TxtBox2;
                    refFormRheumatologyViewModel.Others_TxtBox1_Qty = refFormRheumatology.Others_TxtBox1_Qty;
                    refFormRheumatologyViewModel.Refills_TxtBox15 = refFormRheumatology.Refills_TxtBox15;
                    refFormRheumatologyViewModel.Prior2_TxtBox = refFormRheumatology.Prior2_TxtBox;
                    refFormRheumatologyViewModel.Prior3_TxtBox = refFormRheumatology.Prior3_TxtBox;
                    refFormRheumatologyViewModel.Actemra_Infuse_TxtBox = refFormRheumatology.Actemra_Infuse_TxtBox;
                    refFormRheumatologyViewModel.Actemra_mgat_TxtBox = refFormRheumatology.Actemra_mgat_TxtBox;
                    refFormRheumatologyViewModel.ChkBox_Actemra_Infuse = refFormRheumatology.ChkBox_Actemra_Infuse ?? false;
                    refFormRheumatologyViewModel.ChkBox_Kevzara = refFormRheumatology.ChkBox_Kevzara ?? false;
                    refFormRheumatologyViewModel.ChkBox_200mgPrefilledSyringe = refFormRheumatology.ChkBox_200mgPrefilledSyringe ?? false;
                    refFormRheumatologyViewModel.ChkBox_150mgPrefilledSyringe = refFormRheumatology.ChkBox_150mgPrefilledSyringe ?? false;
                    refFormRheumatologyViewModel.Kevzara_Refills_TxtBox = refFormRheumatology.Kevzara_Refills_TxtBox;
                    refFormRheumatologyViewModel.Date1 = refFormRheumatology.Date1;
                    refFormRheumatologyViewModel.Date2 = refFormRheumatology.Date2;



                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormRheumatologyViewModel.IsSignatured = refFormRheumatology.IsSignatured ?? false;

                    return View(refFormRheumatologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormRheumatologyViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormRheumatologyViewModel());
        }

        [HttpPost]
        public JsonResult RheumatologyReferralForm(RefFormRheumatologyViewModel refFormRheumatologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormRheumatologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormRheumatology refFormRheumatology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormRheumatologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormRheumatology = _unitOfWork.RefFormRheumatology.GetSingle(t => t.RefFormRheumatologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormRheumatology == null)
                {
                    refFormRheumatology = new RefFormRheumatology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form


                refFormRheumatology.RefFormRheumatologyId = refFormRheumatologyViewModel.RefFormRheumatologyId;
                refFormRheumatology.FormDate = refFormRheumatologyViewModel.FormDate;
                refFormRheumatology.FormNeedsByDate = refFormRheumatologyViewModel.FormNeedsByDate;
                refFormRheumatology.ChkBox_ShipToPatient = refFormRheumatologyViewModel.ChkBox_ShipToPatient;
                refFormRheumatology.ChkBox_ShipToOffice = refFormRheumatologyViewModel.ChkBox_ShipToOffice;
                refFormRheumatology.ChkBox_ShipToOther = refFormRheumatologyViewModel.ChkBox_ShipToOther;
                refFormRheumatology.TxtBox_ShipToOther = refFormRheumatologyViewModel.TxtBox_ShipToOther;
                refFormRheumatology.ChkBox_M06_9 = refFormRheumatologyViewModel.ChkBox_M06_9;
                refFormRheumatology.ChkBox_L40_50 = refFormRheumatologyViewModel.ChkBox_L40_50;
                refFormRheumatology.ChkBox_M45_9 = refFormRheumatologyViewModel.ChkBox_M45_9;
                refFormRheumatology.ChkBox_K50_90 = refFormRheumatologyViewModel.ChkBox_K50_90;
                refFormRheumatology.ChkBox_M32_10 = refFormRheumatologyViewModel.ChkBox_M32_10;
                refFormRheumatology.ChkBox_L40_8 = refFormRheumatologyViewModel.ChkBox_L40_8;
                refFormRheumatology.ChkBox_Empty = refFormRheumatologyViewModel.ChkBox_Empty;
                refFormRheumatology.ChkBox_Other = refFormRheumatologyViewModel.ChkBox_Other;
                refFormRheumatology.Other_TxtBox = refFormRheumatologyViewModel.Other_TxtBox;
                refFormRheumatology.CLINICAL_DX_Code_TxtBox = refFormRheumatologyViewModel.CLINICAL_DX_Code_TxtBox;
                refFormRheumatology.CLINICAL_DrugAllergies_TxtBox = refFormRheumatologyViewModel.CLINICAL_DrugAllergies_TxtBox;
                refFormRheumatology.ChkBox_Prior1 = refFormRheumatologyViewModel.ChkBox_Prior1;
                refFormRheumatology.LengthofTreatment_TxtBox1 = refFormRheumatologyViewModel.LengthofTreatment_TxtBox1;
                refFormRheumatology.Chkbox_ReasonforDiscontinuing1 = refFormRheumatologyViewModel.Chkbox_ReasonforDiscontinuing1;
                refFormRheumatology.ReasonforDiscontinuing1_TxtBox = refFormRheumatologyViewModel.ReasonforDiscontinuing1_TxtBox;
                refFormRheumatology.ChkBox_Prior2 = refFormRheumatologyViewModel.ChkBox_Prior2;
                refFormRheumatology.LengthofTreatment_TxtBox2 = refFormRheumatologyViewModel.LengthofTreatment_TxtBox2;
                refFormRheumatology.Chkbox_ReasonforDiscontinuing2 = refFormRheumatologyViewModel.Chkbox_ReasonforDiscontinuing2;
                refFormRheumatology.ReasonforDiscontinuing2_TxtBox2 = refFormRheumatologyViewModel.ReasonforDiscontinuing2_TxtBox2;
                refFormRheumatology.ChkBox_Prior3 = refFormRheumatologyViewModel.ChkBox_Prior3;
                refFormRheumatology.LengthofTreatment_TxtBox3 = refFormRheumatologyViewModel.LengthofTreatment_TxtBox3;
                refFormRheumatology.Chkbox_ReasonforDiscontinuing3 = refFormRheumatologyViewModel.Chkbox_ReasonforDiscontinuing3;
                refFormRheumatology.ReasonforDiscontinuing3_TxtBox3 = refFormRheumatologyViewModel.ReasonforDiscontinuing3_TxtBox3;
                refFormRheumatology.ChkBox_latexallergy_Yes = refFormRheumatologyViewModel.ChkBox_latexallergy_Yes;
                refFormRheumatology.ChkBox_latexallergy_No = refFormRheumatologyViewModel.ChkBox_latexallergy_No;
                refFormRheumatology.ChkBox_beforestart_Yes = refFormRheumatologyViewModel.ChkBox_beforestart_Yes;
                refFormRheumatology.ChkBox_beforestart_No = refFormRheumatologyViewModel.ChkBox_beforestart_No;
                refFormRheumatology.ChkBox_Actemra = refFormRheumatologyViewModel.ChkBox_Actemra;
                refFormRheumatology.ChkBox_162mg = refFormRheumatologyViewModel.ChkBox_162mg;
                refFormRheumatology.ChkBox_vial = refFormRheumatologyViewModel.ChkBox_vial;
                refFormRheumatology.Vial_TxtBox = refFormRheumatologyViewModel.Vial_TxtBox;
                refFormRheumatology.ChkBox_Inject162mgsubcutaneously = refFormRheumatologyViewModel.ChkBox_Inject162mgsubcutaneously;
                refFormRheumatology.ChkBox_ONCEaweek = refFormRheumatologyViewModel.ChkBox_ONCEaweek;
                refFormRheumatology.ChkBox_everyOTHERweek = refFormRheumatologyViewModel.ChkBox_everyOTHERweek;
                refFormRheumatology.Refills_TxtBox1 = refFormRheumatologyViewModel.Refills_TxtBox1;
                refFormRheumatology.ChkBox_Benlysta = refFormRheumatologyViewModel.ChkBox_Benlysta;
                refFormRheumatology.ChkBox_120mg = refFormRheumatologyViewModel.ChkBox_120mg;
                refFormRheumatology.ChkBox_400mg = refFormRheumatologyViewModel.ChkBox_400mg;
                refFormRheumatology.ChkBox_Infuse1 = refFormRheumatologyViewModel.ChkBox_Infuse1;
                refFormRheumatology.Infuse1_TxtBox = refFormRheumatologyViewModel.Infuse1_TxtBox;
                refFormRheumatology.ChkBox_Infuse2 = refFormRheumatologyViewModel.ChkBox_Infuse2;
                refFormRheumatology.Infuse2_TxtBox = refFormRheumatologyViewModel.Infuse2_TxtBox;
                refFormRheumatology.Refills_TxtBox2 = refFormRheumatologyViewModel.Refills_TxtBox2;
                refFormRheumatology.ChkBox_Cimzia = refFormRheumatologyViewModel.ChkBox_Cimzia;
                refFormRheumatology.ChkBox_200PrefilledSyringe = refFormRheumatologyViewModel.ChkBox_200PrefilledSyringe;
                refFormRheumatology.ChkBox_200LYOPowder = refFormRheumatologyViewModel.ChkBox_200LYOPowder;
                refFormRheumatology.ChkBox_StarterKit = refFormRheumatologyViewModel.ChkBox_StarterKit;
                refFormRheumatology.ChkBox_Maintenance = refFormRheumatologyViewModel.ChkBox_Maintenance;
                refFormRheumatology.ChkBox_Inject200mg = refFormRheumatologyViewModel.ChkBox_Inject200mg;
                refFormRheumatology.Refills_TxtBox3 = refFormRheumatologyViewModel.Refills_TxtBox3;
                refFormRheumatology.ChkBox_Cosentyx = refFormRheumatologyViewModel.ChkBox_Cosentyx;
                refFormRheumatology.ChkBox_300mg = refFormRheumatologyViewModel.ChkBox_300mg;
                refFormRheumatology.ChkBox_PFS = refFormRheumatologyViewModel.ChkBox_PFS;
                refFormRheumatology.ChkBox_150mgPen = refFormRheumatologyViewModel.ChkBox_150mgPen;
                refFormRheumatology.ChkBox_PFS2 = refFormRheumatologyViewModel.ChkBox_PFS2;
                refFormRheumatology.ChkBox_Load = refFormRheumatologyViewModel.ChkBox_Load;
                refFormRheumatology.ChkBox_300mg2 = refFormRheumatologyViewModel.ChkBox_300mg2;
                refFormRheumatology.ChkBox_150mgsubcutaneously = refFormRheumatologyViewModel.ChkBox_150mgsubcutaneously;
                refFormRheumatology.ChkBox_Maintenance2 = refFormRheumatologyViewModel.ChkBox_Maintenance2;
                refFormRheumatology.ChkBox_300mg3 = refFormRheumatologyViewModel.ChkBox_300mg3;
                refFormRheumatology.ChkBox_150mgsubcutaneously2 = refFormRheumatologyViewModel.ChkBox_150mgsubcutaneously2;
                refFormRheumatology.Refills_TxtBox4 = refFormRheumatologyViewModel.Refills_TxtBox4;
                refFormRheumatology.ChkBox_Enbrel = refFormRheumatologyViewModel.ChkBox_Enbrel;
                refFormRheumatology.ChkBox_Enbrel50mgSureclick = refFormRheumatologyViewModel.ChkBox_Enbrel50mgSureclick;
                refFormRheumatology.ChkBox_Enbrel50mgPrefilledSyringe = refFormRheumatologyViewModel.ChkBox_Enbrel50mgPrefilledSyringe;
                refFormRheumatology.ChkBox_Enbrel25mgPFS = refFormRheumatologyViewModel.ChkBox_Enbrel25mgPFS;
                refFormRheumatology.ChkBox_EnbrelVials = refFormRheumatologyViewModel.ChkBox_EnbrelVials;
                refFormRheumatology.ChkBox_EnbrelInject50mgsubcutaneouslyONCE = refFormRheumatologyViewModel.ChkBox_EnbrelInject50mgsubcutaneouslyONCE;
                refFormRheumatology.ChkBox_Enbrelnject50mgsubcutaneouslyTWICE = refFormRheumatologyViewModel.ChkBox_Enbrelnject50mgsubcutaneouslyTWICE;
                refFormRheumatology.Refills_TxtBox5 = refFormRheumatologyViewModel.Refills_TxtBox5;
                refFormRheumatology.ChkBox_Humira = refFormRheumatologyViewModel.ChkBox_Humira;
                refFormRheumatology.ChkBox_Humira40mgPen = refFormRheumatologyViewModel.ChkBox_Humira40mgPen;
                refFormRheumatology.ChkBox_Humira40mgPrefilledSyringe = refFormRheumatologyViewModel.ChkBox_Humira40mgPrefilledSyringe;
                refFormRheumatology.ChkBox_HumiraInject40mgsubcutaneouslyevery = refFormRheumatologyViewModel.ChkBox_HumiraInject40mgsubcutaneouslyevery;
                refFormRheumatology.ChkBox_HumiraInject40mgsubcutaneouslyONCE = refFormRheumatologyViewModel.ChkBox_HumiraInject40mgsubcutaneouslyONCE;
                refFormRheumatology.Refills_TxtBox6 = refFormRheumatologyViewModel.Refills_TxtBox6;
                refFormRheumatology.ChkBox_Orencia = refFormRheumatologyViewModel.ChkBox_Orencia;
                refFormRheumatology.ChkBox_Orencia125mg = refFormRheumatologyViewModel.ChkBox_Orencia125mg;
                refFormRheumatology.ChkBox_OrenciaPFS = refFormRheumatologyViewModel.ChkBox_OrenciaPFS;
                refFormRheumatology.ChkBox_OrenciaClickJect = refFormRheumatologyViewModel.ChkBox_OrenciaClickJect;
                refFormRheumatology.ChkBox_Orencia250mg = refFormRheumatologyViewModel.ChkBox_Orencia250mg;
                refFormRheumatology.ChkBox_OrenciaInject125mg = refFormRheumatologyViewModel.ChkBox_OrenciaInject125mg;
                refFormRheumatology.ChkBox_OrenciaInfuse = refFormRheumatologyViewModel.ChkBox_OrenciaInfuse;
                refFormRheumatology.OrenciaInfuse_TxtBox = refFormRheumatologyViewModel.OrenciaInfuse_TxtBox;
                refFormRheumatology.Orenciamgat_TxtBox1 = refFormRheumatologyViewModel.Orenciamgat_TxtBox1;
                refFormRheumatology.Refills_TxtBox7 = refFormRheumatologyViewModel.Refills_TxtBox7;
                refFormRheumatology.ChkBox_Otezla = refFormRheumatologyViewModel.ChkBox_Otezla;
                refFormRheumatology.ChkBox_OtezlaStarterPack = refFormRheumatologyViewModel.ChkBox_OtezlaStarterPack;
                refFormRheumatology.ChkBox_Otezla230mgTablets = refFormRheumatologyViewModel.ChkBox_Otezla230mgTablets;
                refFormRheumatology.ChkBox_OtezlaEmpty = refFormRheumatologyViewModel.ChkBox_OtezlaEmpty;
                refFormRheumatology.ChkBox_OtezlaTitrate = refFormRheumatologyViewModel.ChkBox_OtezlaTitrate;
                refFormRheumatology.Otezla_dateprovided_TxtBox = refFormRheumatologyViewModel.Otezla_dateprovided_TxtBox;
                refFormRheumatology.ChkBox_Otezla_Maintenance = refFormRheumatologyViewModel.ChkBox_Otezla_Maintenance;
                refFormRheumatology.ChkBox_Otezla_Bridge = refFormRheumatologyViewModel.ChkBox_Otezla_Bridge;
                refFormRheumatology.Refills_TxtBox8 = refFormRheumatologyViewModel.Refills_TxtBox8;
                refFormRheumatology.ChkBox_Remicade = refFormRheumatologyViewModel.ChkBox_Remicade;
                refFormRheumatology.ChkBox_Remicade100mgVial = refFormRheumatologyViewModel.ChkBox_Remicade100mgVial;
                refFormRheumatology.ChkBox_RemicadeInfuse = refFormRheumatologyViewModel.ChkBox_RemicadeInfuse;
                refFormRheumatology.RemicadeInfuse_TxtBox = refFormRheumatologyViewModel.RemicadeInfuse_TxtBox;
                refFormRheumatology.Remicademgat_TxtBox = refFormRheumatologyViewModel.Remicademgat_TxtBox;
                refFormRheumatology.Remicadewt_TxtBox = refFormRheumatologyViewModel.Remicadewt_TxtBox;
                refFormRheumatology.Refills_TxtBox9 = refFormRheumatologyViewModel.Refills_TxtBox9;
                refFormRheumatology.ChkBox_Rituxan = refFormRheumatologyViewModel.ChkBox_Rituxan;
                refFormRheumatology.Rituxan_TxtBox = refFormRheumatologyViewModel.Rituxan_TxtBox;
                refFormRheumatology.RituxanInfuse_TxtBox = refFormRheumatologyViewModel.RituxanInfuse_TxtBox;
                refFormRheumatology.ChkBox_RituxanInfuse = refFormRheumatologyViewModel.ChkBox_RituxanInfuse;
                refFormRheumatology.Rituxanmgat_TxtBox = refFormRheumatologyViewModel.Rituxanmgat_TxtBox;
                refFormRheumatology.Refills_TxtBox10 = refFormRheumatologyViewModel.Refills_TxtBox10;
                refFormRheumatology.ChkBox_Simponi = refFormRheumatologyViewModel.ChkBox_Simponi;
                refFormRheumatology.ChkBox_Simponi50mgSmartJect = refFormRheumatologyViewModel.ChkBox_Simponi50mgSmartJect;
                refFormRheumatology.ChkBox_SimponiPFS = refFormRheumatologyViewModel.ChkBox_SimponiPFS;
                refFormRheumatology.ChkBox_SimponiAria = refFormRheumatologyViewModel.ChkBox_SimponiAria;
                refFormRheumatology.ChkBox_SimponiInject50mgsubcutaneouslyONCE = refFormRheumatologyViewModel.ChkBox_SimponiInject50mgsubcutaneouslyONCE;
                refFormRheumatology.ChkBox_SimponiInfuse = refFormRheumatologyViewModel.ChkBox_SimponiInfuse;
                refFormRheumatology.SimponiInfusemgatweeks0and4 = refFormRheumatologyViewModel.SimponiInfusemgatweeks0and4;
                refFormRheumatology.Refills_TxtBox11 = refFormRheumatologyViewModel.Refills_TxtBox11;
                refFormRheumatology.ChkBox_Stelara = refFormRheumatologyViewModel.ChkBox_Stelara;
                refFormRheumatology.ChkBox_Stelara45mgPrefilledSyringe = refFormRheumatologyViewModel.ChkBox_Stelara45mgPrefilledSyringe;
                refFormRheumatology.ChkBox_StelaraInject45mgonday = refFormRheumatologyViewModel.ChkBox_StelaraInject45mgonday;
                refFormRheumatology.ChkBox_StelaraInject45mgevery12 = refFormRheumatologyViewModel.ChkBox_StelaraInject45mgevery12;
                refFormRheumatology.Refills_TxtBox12 = refFormRheumatologyViewModel.Refills_TxtBox12;
                refFormRheumatology.ChkBox_Xeljanz = refFormRheumatologyViewModel.ChkBox_Xeljanz;
                refFormRheumatology.ChkBox_Xeljanz5mgTablets = refFormRheumatologyViewModel.ChkBox_Xeljanz5mgTablets;
                refFormRheumatology.ChkBox_Xeljanz11mgXRTablets = refFormRheumatologyViewModel.ChkBox_Xeljanz11mgXRTablets;
                refFormRheumatology.ChkBox_Xeljanz1tabletbymouthtwice = refFormRheumatologyViewModel.ChkBox_Xeljanz1tabletbymouthtwice;
                refFormRheumatology.ChkBox_Xeljanz1tabletbymouthonce = refFormRheumatologyViewModel.ChkBox_Xeljanz1tabletbymouthonce;
                refFormRheumatology.Refills_TxtBox13 = refFormRheumatologyViewModel.Refills_TxtBox13;
                refFormRheumatology.Refills_TxtBox14 = refFormRheumatologyViewModel.Refills_TxtBox14;
                refFormRheumatology.ChkBox_Others = refFormRheumatologyViewModel.ChkBox_Others;
                refFormRheumatology.Others_TxtBox1 = refFormRheumatologyViewModel.Others_TxtBox1;
                refFormRheumatology.Others_TxtBox2 = refFormRheumatologyViewModel.Others_TxtBox2;
                refFormRheumatology.Others_TxtBox1_Qty = refFormRheumatologyViewModel.Others_TxtBox1_Qty;
                refFormRheumatology.Refills_TxtBox15 = refFormRheumatologyViewModel.Refills_TxtBox15;
                refFormRheumatology.Prior2_TxtBox = refFormRheumatologyViewModel.Prior2_TxtBox;
                refFormRheumatology.Prior3_TxtBox = refFormRheumatologyViewModel.Prior3_TxtBox;
                refFormRheumatology.Actemra_Infuse_TxtBox = refFormRheumatologyViewModel.Actemra_Infuse_TxtBox;
                refFormRheumatology.Actemra_mgat_TxtBox = refFormRheumatologyViewModel.Actemra_mgat_TxtBox;
                refFormRheumatology.ChkBox_Actemra_Infuse = refFormRheumatologyViewModel.ChkBox_Actemra_Infuse;
                refFormRheumatology.ChkBox_Kevzara = refFormRheumatologyViewModel.ChkBox_Kevzara;
                refFormRheumatology.ChkBox_200mgPrefilledSyringe = refFormRheumatologyViewModel.ChkBox_200mgPrefilledSyringe;
                refFormRheumatology.ChkBox_150mgPrefilledSyringe = refFormRheumatologyViewModel.ChkBox_150mgPrefilledSyringe;
                refFormRheumatology.Kevzara_Refills_TxtBox = refFormRheumatologyViewModel.Kevzara_Refills_TxtBox;
                refFormRheumatology.Date1 = refFormRheumatologyViewModel.Date1;
                refFormRheumatology.Date2 = refFormRheumatologyViewModel.Date2;




                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormRheumatology.ModifiedBy = CurrentUser.UserId;
                refFormRheumatology.ModifiedOn = DateTime.UtcNow;

                refFormRheumatology.IsSignatured = refFormRheumatologyViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormRheumatology.Update(refFormRheumatology);
                    AuditLogger.AuditTracker("Edit RheumatologyReferralForm", "A RheumatologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormRheumatology.CreatedBy = CurrentUser.UserId;
                    refFormRheumatology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormRheumatology.Insert(refFormRheumatology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New RheumatologyReferralForm", "A new RheumatologyReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormRheumatologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormRheumatology.RefFormRheumatologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormRheumatology Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormRheumatology PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormRheumatology Referral Form Unsuccessfully.", success = false });
        }

        //ggca transplant referral form kidney&liver
        public ActionResult ggca_transplant_referral_form_kidneyandliver(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca transplant referral form kidney and liver"));
            return RedirectToAction("TransplantReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 68 });
        }
        //ggca transplant referral form heartandlung
        public ActionResult ggca_transplant_referral_form_heartandlung(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca transplant referral form heart and lung"));
            return RedirectToAction("TransplantReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 69 });
        }
        //Transplant..................................
        public ActionResult TransplantReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("transplant-referral-form"));
                    referralFormId = referralForm?.ReferralFormId ?? 20;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormTransplantViewModel refFormTransplantViewModel = new RefFormTransplantViewModel();

                //Set ReferralFormId
                refFormTransplantViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormTransplantViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormTransplantViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormTransplantViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormTransplantViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormTransplantViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormTransplantViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormTransplantViewModel.PhysicianFullName = physician.FullName;
                        refFormTransplantViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormTransplantViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormTransplantViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormTransplantViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormTransplantViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormTransplantViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormTransplantViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormTransplant refFormTransplant = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormTransplant = _unitOfWork.RefFormTransplant.GetSingle(t => t.RefFormTransplantId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormTransplant == null) refFormTransplant = new RefFormTransplant();


                    refFormTransplantViewModel.RefFormTransplantId = refFormTransplant.RefFormTransplantId;

                    //Form
                    //Add your code here.


                    refFormTransplantViewModel.RefFormTransplantId = refFormTransplant.RefFormTransplantId;

                    refFormTransplantViewModel.FormDate = refFormTransplant.FormDate;
                    refFormTransplantViewModel.FormNeedsByDate = refFormTransplant.FormNeedsByDate;
                    refFormTransplantViewModel.ChkBox_ShipToPatient = refFormTransplant.ChkBox_ShipToPatient ?? false;
                    refFormTransplantViewModel.ChkBox_ShipToOffice = refFormTransplant.ChkBox_ShipToOffice ?? false;
                    refFormTransplantViewModel.ChkBox_ShipToOther = refFormTransplant.ChkBox_ShipToOther ?? false;
                    refFormTransplantViewModel.TxtBox_ShipToOther = refFormTransplant.TxtBox_ShipToOther;

                    refFormTransplantViewModel.ChkBox_Z94_0Kidney = refFormTransplant.ChkBox_Z94_0Kidney ?? false;
                    refFormTransplantViewModel.ChkBox_Z94_83Pancreas = refFormTransplant.ChkBox_Z94_83Pancreas ?? false;
                    refFormTransplantViewModel.DateofTransplant = refFormTransplant.DateofTransplant.HasValue ? refFormTransplant.DateofTransplant.Value : DateTime.UtcNow;
                    refFormTransplantViewModel.ChkBox_Z94_4Liver = refFormTransplant.ChkBox_Z94_4Liver ?? false;
                    refFormTransplantViewModel.ChkBox_Z94_82Intestine = refFormTransplant.ChkBox_Z94_82Intestine ?? false;
                    refFormTransplantViewModel.ChkBox_Spanish = refFormTransplant.ChkBox_Spanish ?? false;
                    refFormTransplantViewModel.ChkBox_English = refFormTransplant.ChkBox_English ?? false;
                    refFormTransplantViewModel.Height_TxtBox = refFormTransplant.Height_TxtBox != null ? refFormTransplant.Height_TxtBox.Value : 0D;
                    refFormTransplantViewModel.Weight_TxtBox = refFormTransplant.Weight_TxtBox != null ? refFormTransplant.Weight_TxtBox.Value : 0D;
                    refFormTransplantViewModel.Allergies_TxtBox = refFormTransplant.Allergies_TxtBox;
                    refFormTransplantViewModel.ChkBox_NKDA = refFormTransplant.ChkBox_NKDA ?? false;
                    refFormTransplantViewModel.Medication_TxtBox1 = refFormTransplant.Medication_TxtBox1;
                    refFormTransplantViewModel.DIRECTIONS_TextBox1 = refFormTransplant.DIRECTIONS_TextBox1;
                    refFormTransplantViewModel.Qty_TxtBox1 = refFormTransplant.Qty_TxtBox1;
                    refFormTransplantViewModel.DNS_TxtBox1 = refFormTransplant.DNS_TxtBox1;
                    refFormTransplantViewModel.REFILLS_TxtBox1 = refFormTransplant.REFILLS_TxtBox1;
                    refFormTransplantViewModel.Medication_TxtBox2 = refFormTransplant.Medication_TxtBox2;
                    refFormTransplantViewModel.DIRECTIONS_TextBox2 = refFormTransplant.DIRECTIONS_TextBox2;
                    refFormTransplantViewModel.Qty_TxtBox2 = refFormTransplant.Qty_TxtBox2;
                    refFormTransplantViewModel.DNS_TxtBox2 = refFormTransplant.DNS_TxtBox2;
                    refFormTransplantViewModel.REFILLS_TxtBox2 = refFormTransplant.REFILLS_TxtBox2;
                    refFormTransplantViewModel.Medication_TxtBox3 = refFormTransplant.Medication_TxtBox3;
                    refFormTransplantViewModel.DIRECTIONS_TextBox3 = refFormTransplant.DIRECTIONS_TextBox3;
                    refFormTransplantViewModel.Qty_TxtBox3 = refFormTransplant.Qty_TxtBox3;
                    refFormTransplantViewModel.DNS_TxtBox3 = refFormTransplant.DNS_TxtBox3;
                    refFormTransplantViewModel.REFILLS_TxtBox3 = refFormTransplant.REFILLS_TxtBox3;
                    refFormTransplantViewModel.Medication_TxtBox4 = refFormTransplant.Medication_TxtBox4;
                    refFormTransplantViewModel.DIRECTIONS_TextBox4 = refFormTransplant.DIRECTIONS_TextBox4;
                    refFormTransplantViewModel.Qty_TxtBox4 = refFormTransplant.Qty_TxtBox4;
                    refFormTransplantViewModel.DNS_TxtBox4 = refFormTransplant.DNS_TxtBox4;
                    refFormTransplantViewModel.REFILLS_TxtBox4 = refFormTransplant.REFILLS_TxtBox4;
                    refFormTransplantViewModel.Medication_TxtBox5 = refFormTransplant.Medication_TxtBox5;
                    refFormTransplantViewModel.DIRECTIONS_TextBox5 = refFormTransplant.DIRECTIONS_TextBox5;
                    refFormTransplantViewModel.Qty_TxtBox5 = refFormTransplant.Qty_TxtBox5;
                    refFormTransplantViewModel.DNS_TxtBox5 = refFormTransplant.DNS_TxtBox5;
                    refFormTransplantViewModel.REFILLS_TxtBox5 = refFormTransplant.REFILLS_TxtBox5;
                    refFormTransplantViewModel.Medication_TxtBox6 = refFormTransplant.Medication_TxtBox6;
                    refFormTransplantViewModel.DIRECTIONS_TextBox6 = refFormTransplant.DIRECTIONS_TextBox6;
                    refFormTransplantViewModel.Qty_TxtBox6 = refFormTransplant.Qty_TxtBox6;
                    refFormTransplantViewModel.DNS_TxtBox6 = refFormTransplant.DNS_TxtBox6;
                    refFormTransplantViewModel.REFILLS_TxtBox6 = refFormTransplant.REFILLS_TxtBox6;
                    refFormTransplantViewModel.Medication_TxtBox7 = refFormTransplant.Medication_TxtBox7;
                    refFormTransplantViewModel.DIRECTIONS_TextBox7 = refFormTransplant.DIRECTIONS_TextBox7;
                    refFormTransplantViewModel.Qty_TxtBox7 = refFormTransplant.Qty_TxtBox7;
                    refFormTransplantViewModel.DNS_TxtBox7 = refFormTransplant.DNS_TxtBox7;
                    refFormTransplantViewModel.REFILLS_TxtBox7 = refFormTransplant.REFILLS_TxtBox7;
                    refFormTransplantViewModel.Medication_TxtBox8 = refFormTransplant.Medication_TxtBox8;
                    refFormTransplantViewModel.DIRECTIONS_TextBox8 = refFormTransplant.DIRECTIONS_TextBox8;
                    refFormTransplantViewModel.Qty_TxtBox8 = refFormTransplant.Qty_TxtBox8;
                    refFormTransplantViewModel.DNS_TxtBox8 = refFormTransplant.DNS_TxtBox8;
                    refFormTransplantViewModel.REFILLS_TxtBox8 = refFormTransplant.REFILLS_TxtBox8;
                    refFormTransplantViewModel.Medication_TxtBox9 = refFormTransplant.Medication_TxtBox9;
                    refFormTransplantViewModel.DIRECTIONS_TextBox9 = refFormTransplant.DIRECTIONS_TextBox9;
                    refFormTransplantViewModel.Qty_TxtBox9 = refFormTransplant.Qty_TxtBox9;
                    refFormTransplantViewModel.DNS_TxtBox9 = refFormTransplant.DNS_TxtBox9;
                    refFormTransplantViewModel.REFILLS_TxtBox9 = refFormTransplant.REFILLS_TxtBox9;
                    refFormTransplantViewModel.Medication_TxtBox10 = refFormTransplant.Medication_TxtBox10;
                    refFormTransplantViewModel.DIRECTIONS_TextBox10 = refFormTransplant.DIRECTIONS_TextBox10;
                    refFormTransplantViewModel.Qty_TxtBox10 = refFormTransplant.Qty_TxtBox10;
                    refFormTransplantViewModel.DNS_TxtBox10 = refFormTransplant.DNS_TxtBox10;
                    refFormTransplantViewModel.REFILLS_TxtBox10 = refFormTransplant.REFILLS_TxtBox10;
                    refFormTransplantViewModel.Medication_TxtBox11 = refFormTransplant.Medication_TxtBox11;
                    refFormTransplantViewModel.DIRECTIONS_TextBox11 = refFormTransplant.DIRECTIONS_TextBox11;
                    refFormTransplantViewModel.Qty_TxtBox11 = refFormTransplant.Qty_TxtBox11;
                    refFormTransplantViewModel.DNS_TxtBox11 = refFormTransplant.DNS_TxtBox11;
                    refFormTransplantViewModel.REFILLS_TxtBox11 = refFormTransplant.REFILLS_TxtBox11;
                    refFormTransplantViewModel.Medication_TxtBox12 = refFormTransplant.Medication_TxtBox12;
                    refFormTransplantViewModel.DIRECTIONS_TextBox12 = refFormTransplant.DIRECTIONS_TextBox12;
                    refFormTransplantViewModel.Qty_TxtBox12 = refFormTransplant.Qty_TxtBox12;
                    refFormTransplantViewModel.DNS_TxtBox12 = refFormTransplant.DNS_TxtBox12;
                    refFormTransplantViewModel.REFILLS_TxtBox12 = refFormTransplant.REFILLS_TxtBox12;
                    refFormTransplantViewModel.Medication_TxtBox13 = refFormTransplant.Medication_TxtBox13;
                    refFormTransplantViewModel.DIRECTIONS_TextBox13 = refFormTransplant.DIRECTIONS_TextBox13;
                    refFormTransplantViewModel.Qty_TxtBox13 = refFormTransplant.Qty_TxtBox13;
                    refFormTransplantViewModel.DNS_TxtBox13 = refFormTransplant.DNS_TxtBox13;
                    refFormTransplantViewModel.REFILLS_TxtBox13 = refFormTransplant.REFILLS_TxtBox13;
                    refFormTransplantViewModel.Medication_TxtBox14 = refFormTransplant.Medication_TxtBox14;
                    refFormTransplantViewModel.DIRECTIONS_TextBox14 = refFormTransplant.DIRECTIONS_TextBox14;
                    refFormTransplantViewModel.Qty_TxtBox14 = refFormTransplant.Qty_TxtBox14;
                    refFormTransplantViewModel.DNS_TxtBox14 = refFormTransplant.DNS_TxtBox14;
                    refFormTransplantViewModel.REFILLS_TxtBox14 = refFormTransplant.REFILLS_TxtBox14;
                    refFormTransplantViewModel.Medication_TxtBox15 = refFormTransplant.Medication_TxtBox15;
                    refFormTransplantViewModel.DIRECTIONS_TextBox15 = refFormTransplant.DIRECTIONS_TextBox15;
                    refFormTransplantViewModel.Qty_TxtBox15 = refFormTransplant.Qty_TxtBox15;
                    refFormTransplantViewModel.DNS_TxtBox15 = refFormTransplant.DNS_TxtBox15;
                    refFormTransplantViewModel.REFILLS_TxtBox15 = refFormTransplant.REFILLS_TxtBox15;
                    refFormTransplantViewModel.Medication_TxtBox16 = refFormTransplant.Medication_TxtBox16;
                    refFormTransplantViewModel.DIRECTIONS_TextBox16 = refFormTransplant.DIRECTIONS_TextBox16;
                    refFormTransplantViewModel.Qty_TxtBox16 = refFormTransplant.Qty_TxtBox16;
                    refFormTransplantViewModel.DNS_TxtBox16 = refFormTransplant.DNS_TxtBox16;
                    refFormTransplantViewModel.REFILLS_TxtBox16 = refFormTransplant.REFILLS_TxtBox16;
                    refFormTransplantViewModel.Medication_TxtBox17 = refFormTransplant.Medication_TxtBox17;
                    refFormTransplantViewModel.DIRECTIONS_TextBox17 = refFormTransplant.DIRECTIONS_TextBox17;
                    refFormTransplantViewModel.Qty_TxtBox17 = refFormTransplant.Qty_TxtBox17;
                    refFormTransplantViewModel.DNS_TxtBox17 = refFormTransplant.DNS_TxtBox17;
                    refFormTransplantViewModel.REFILLS_TxtBox17 = refFormTransplant.REFILLS_TxtBox17;
                    refFormTransplantViewModel.Medication_TxtBox18 = refFormTransplant.Medication_TxtBox18;
                    refFormTransplantViewModel.DIRECTIONS_TextBox18 = refFormTransplant.DIRECTIONS_TextBox18;
                    refFormTransplantViewModel.Qty_TxtBox18 = refFormTransplant.Qty_TxtBox18;
                    refFormTransplantViewModel.DNS_TxtBox18 = refFormTransplant.DNS_TxtBox18;
                    refFormTransplantViewModel.REFILLS_TxtBox18 = refFormTransplant.REFILLS_TxtBox18;
                    refFormTransplantViewModel.Medication_TxtBox19 = refFormTransplant.Medication_TxtBox19;
                    refFormTransplantViewModel.DIRECTIONS_TextBox19 = refFormTransplant.DIRECTIONS_TextBox19;
                    refFormTransplantViewModel.Qty_TxtBox19 = refFormTransplant.Qty_TxtBox19;
                    refFormTransplantViewModel.DNS_TxtBox19 = refFormTransplant.DNS_TxtBox19;
                    refFormTransplantViewModel.REFILLS_TxtBox19 = refFormTransplant.REFILLS_TxtBox19;
                    refFormTransplantViewModel.Medication_TxtBox20 = refFormTransplant.Medication_TxtBox20;
                    refFormTransplantViewModel.DIRECTIONS_TextBox20 = refFormTransplant.DIRECTIONS_TextBox20;
                    refFormTransplantViewModel.Qty_TxtBox20 = refFormTransplant.Qty_TxtBox20;
                    refFormTransplantViewModel.DNS_TxtBox20 = refFormTransplant.DNS_TxtBox20;
                    refFormTransplantViewModel.REFILLS_TxtBox20 = refFormTransplant.REFILLS_TxtBox20;
                    refFormTransplantViewModel.Medication_TxtBox21 = refFormTransplant.Medication_TxtBox21;
                    refFormTransplantViewModel.DIRECTIONS_TextBox21 = refFormTransplant.DIRECTIONS_TextBox21;
                    refFormTransplantViewModel.Qty_TxtBox21 = refFormTransplant.Qty_TxtBox21;
                    refFormTransplantViewModel.DNS_TxtBox21 = refFormTransplant.DNS_TxtBox21;
                    refFormTransplantViewModel.REFILLS_TxtBox21 = refFormTransplant.REFILLS_TxtBox21;
                    refFormTransplantViewModel.Medication_TxtBox22 = refFormTransplant.Medication_TxtBox22;
                    refFormTransplantViewModel.DIRECTIONS_TextBox22 = refFormTransplant.DIRECTIONS_TextBox22;
                    refFormTransplantViewModel.Qty_TxtBox22 = refFormTransplant.Qty_TxtBox22;
                    refFormTransplantViewModel.DNS_TxtBox22 = refFormTransplant.DNS_TxtBox22;
                    refFormTransplantViewModel.REFILLS_TxtBox22 = refFormTransplant.REFILLS_TxtBox22;
                    refFormTransplantViewModel.Medication_TxtBox23 = refFormTransplant.Medication_TxtBox23;
                    refFormTransplantViewModel.DIRECTIONS_TextBox23 = refFormTransplant.DIRECTIONS_TextBox23;
                    refFormTransplantViewModel.Qty_TxtBox23 = refFormTransplant.Qty_TxtBox23;
                    refFormTransplantViewModel.DNS_TxtBox23 = refFormTransplant.DNS_TxtBox23;
                    refFormTransplantViewModel.REFILLS_TxtBox23 = refFormTransplant.REFILLS_TxtBox23;
                    refFormTransplantViewModel.Medication_TxtBox24 = refFormTransplant.Medication_TxtBox24;
                    refFormTransplantViewModel.DIRECTIONS_TextBox24 = refFormTransplant.DIRECTIONS_TextBox24;
                    refFormTransplantViewModel.Qty_TxtBox24 = refFormTransplant.Qty_TxtBox24;
                    refFormTransplantViewModel.DNS_TxtBox24 = refFormTransplant.DNS_TxtBox24;
                    refFormTransplantViewModel.REFILLS_TxtBox24 = refFormTransplant.REFILLS_TxtBox24;
                    refFormTransplantViewModel.Medication_TxtBox25 = refFormTransplant.Medication_TxtBox25;
                    refFormTransplantViewModel.DIRECTIONS_TextBox25 = refFormTransplant.DIRECTIONS_TextBox25;
                    refFormTransplantViewModel.Qty_TxtBox25 = refFormTransplant.Qty_TxtBox25;
                    refFormTransplantViewModel.DNS_TxtBox25 = refFormTransplant.DNS_TxtBox25;
                    refFormTransplantViewModel.REFILLS_TxtBox25 = refFormTransplant.REFILLS_TxtBox25;
                    refFormTransplantViewModel.ChkBox_MD1 = refFormTransplant.ChkBox_MD1 ?? false;
                    refFormTransplantViewModel.MD1_TxtBox = refFormTransplant.MD1_TxtBox;
                    refFormTransplantViewModel.ChkBox_MD2 = refFormTransplant.ChkBox_MD2 ?? false;
                    refFormTransplantViewModel.MD2_TxtBox = refFormTransplant.MD2_TxtBox;
                    refFormTransplantViewModel.ChkBox_MD3 = refFormTransplant.ChkBox_MD3 ?? false;
                    refFormTransplantViewModel.MD3_TxtBox = refFormTransplant.MD3_TxtBox;
                    refFormTransplantViewModel.ChkBox_MD4 = refFormTransplant.ChkBox_MD4 ?? false;
                    refFormTransplantViewModel.MD4_TxtBox = refFormTransplant.MD4_TxtBox;
                    refFormTransplantViewModel.ChkBox_MD5 = refFormTransplant.ChkBox_MD5 ?? false;
                    refFormTransplantViewModel.MD5_TxtBox = refFormTransplant.MD5_TxtBox;
                    refFormTransplantViewModel.ChkBox_MD6 = refFormTransplant.ChkBox_MD6 ?? false;
                    refFormTransplantViewModel.MD6_TxtBox = refFormTransplant.MD6_TxtBox;
                    refFormTransplantViewModel.Person1_ChkBox = refFormTransplant.Person1_ChkBox ?? false;
                    refFormTransplantViewModel.Person1_Contact_TxtBox = refFormTransplant.Person1_Contact_TxtBox;
                    refFormTransplantViewModel.Person2_ChkBox = refFormTransplant.Person2_ChkBox ?? false;
                    refFormTransplantViewModel.Person2_Contact_TxtBox = refFormTransplant.Person2_Contact_TxtBox;
                    refFormTransplantViewModel.Person3_ChkBox = refFormTransplant.Person3_ChkBox ?? false;
                    refFormTransplantViewModel.Person3_Contact_TxtBox = refFormTransplant.Person3_Contact_TxtBox;
                    refFormTransplantViewModel.Medication_TxtBox26 = refFormTransplant.Medication_TxtBox26;
                    refFormTransplantViewModel.DIRECTIONS_TextBox26 = refFormTransplant.DIRECTIONS_TextBox26;
                    refFormTransplantViewModel.Qty_TxtBox26 = refFormTransplant.Qty_TxtBox26;
                    refFormTransplantViewModel.DNS_TxtBox26 = refFormTransplant.DNS_TxtBox26;
                    refFormTransplantViewModel.REFILLS_TxtBox26 = refFormTransplant.REFILLS_TxtBox26;
                    refFormTransplantViewModel.ChkBox_Z94_1 = refFormTransplant.ChkBox_Z94_1 ?? false;
                    refFormTransplantViewModel.ChkBox_ZZ94_2 = refFormTransplant.ChkBox_ZZ94_2 ?? false;








                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormTransplantViewModel.IsSignatured = refFormTransplant.IsSignatured ?? false;

                    return View(refFormTransplantViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormTransplantViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormTransplantViewModel());
        }


        [HttpPost]
        public JsonResult TransplantReferralForm(RefFormTransplantViewModel refFormTransplantViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormTransplantViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormTransplant refFormTransplant = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormTransplantViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormTransplant = _unitOfWork.RefFormTransplant.GetSingle(t => t.RefFormTransplantId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormTransplant == null)
                {
                    refFormTransplant = new RefFormTransplant();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form



                refFormTransplant.RefFormTransplantId = refFormTransplantViewModel.RefFormTransplantId;
                refFormTransplant.FormDate = refFormTransplantViewModel.FormDate;
                refFormTransplant.FormNeedsByDate = refFormTransplantViewModel.FormNeedsByDate;
                refFormTransplant.ChkBox_ShipToPatient = refFormTransplantViewModel.ChkBox_ShipToPatient;
                refFormTransplant.ChkBox_ShipToOffice = refFormTransplantViewModel.ChkBox_ShipToOffice;
                refFormTransplant.ChkBox_ShipToOther = refFormTransplantViewModel.ChkBox_ShipToOther;
                refFormTransplant.TxtBox_ShipToOther = refFormTransplantViewModel.TxtBox_ShipToOther;
                refFormTransplant.ChkBox_Z94_0Kidney = refFormTransplantViewModel.ChkBox_Z94_0Kidney;
                refFormTransplant.ChkBox_Z94_83Pancreas = refFormTransplantViewModel.ChkBox_Z94_83Pancreas;
                refFormTransplant.DateofTransplant = refFormTransplantViewModel.DateofTransplant;
                refFormTransplant.ChkBox_Z94_4Liver = refFormTransplantViewModel.ChkBox_Z94_4Liver;
                refFormTransplant.ChkBox_Z94_82Intestine = refFormTransplantViewModel.ChkBox_Z94_82Intestine;
                refFormTransplant.ChkBox_Spanish = refFormTransplantViewModel.ChkBox_Spanish;
                refFormTransplant.ChkBox_English = refFormTransplantViewModel.ChkBox_English;
                refFormTransplant.Height_TxtBox = refFormTransplantViewModel.Height_TxtBox;
                refFormTransplant.Weight_TxtBox = refFormTransplantViewModel.Weight_TxtBox;
                refFormTransplant.Allergies_TxtBox = refFormTransplantViewModel.Allergies_TxtBox;
                refFormTransplant.ChkBox_NKDA = refFormTransplantViewModel.ChkBox_NKDA;
                refFormTransplant.Medication_TxtBox1 = refFormTransplantViewModel.Medication_TxtBox1;
                refFormTransplant.DIRECTIONS_TextBox1 = refFormTransplantViewModel.DIRECTIONS_TextBox1;
                refFormTransplant.Qty_TxtBox1 = refFormTransplantViewModel.Qty_TxtBox1;
                refFormTransplant.DNS_TxtBox1 = refFormTransplantViewModel.DNS_TxtBox1;
                refFormTransplant.REFILLS_TxtBox1 = refFormTransplantViewModel.REFILLS_TxtBox1;
                refFormTransplant.Medication_TxtBox2 = refFormTransplantViewModel.Medication_TxtBox2;
                refFormTransplant.DIRECTIONS_TextBox2 = refFormTransplantViewModel.DIRECTIONS_TextBox2;
                refFormTransplant.Qty_TxtBox2 = refFormTransplantViewModel.Qty_TxtBox2;
                refFormTransplant.DNS_TxtBox2 = refFormTransplantViewModel.DNS_TxtBox2;
                refFormTransplant.REFILLS_TxtBox2 = refFormTransplantViewModel.REFILLS_TxtBox2;
                refFormTransplant.Medication_TxtBox3 = refFormTransplantViewModel.Medication_TxtBox3;
                refFormTransplant.DIRECTIONS_TextBox3 = refFormTransplantViewModel.DIRECTIONS_TextBox3;
                refFormTransplant.Qty_TxtBox3 = refFormTransplantViewModel.Qty_TxtBox3;
                refFormTransplant.DNS_TxtBox3 = refFormTransplantViewModel.DNS_TxtBox3;
                refFormTransplant.REFILLS_TxtBox3 = refFormTransplantViewModel.REFILLS_TxtBox3;
                refFormTransplant.Medication_TxtBox4 = refFormTransplantViewModel.Medication_TxtBox4;
                refFormTransplant.DIRECTIONS_TextBox4 = refFormTransplantViewModel.DIRECTIONS_TextBox4;
                refFormTransplant.Qty_TxtBox4 = refFormTransplantViewModel.Qty_TxtBox4;
                refFormTransplant.DNS_TxtBox4 = refFormTransplantViewModel.DNS_TxtBox4;
                refFormTransplant.REFILLS_TxtBox4 = refFormTransplantViewModel.REFILLS_TxtBox4;
                refFormTransplant.Medication_TxtBox5 = refFormTransplantViewModel.Medication_TxtBox5;
                refFormTransplant.DIRECTIONS_TextBox5 = refFormTransplantViewModel.DIRECTIONS_TextBox5;
                refFormTransplant.Qty_TxtBox5 = refFormTransplantViewModel.Qty_TxtBox5;
                refFormTransplant.DNS_TxtBox5 = refFormTransplantViewModel.DNS_TxtBox5;
                refFormTransplant.REFILLS_TxtBox5 = refFormTransplantViewModel.REFILLS_TxtBox5;
                refFormTransplant.Medication_TxtBox6 = refFormTransplantViewModel.Medication_TxtBox6;
                refFormTransplant.DIRECTIONS_TextBox6 = refFormTransplantViewModel.DIRECTIONS_TextBox6;
                refFormTransplant.Qty_TxtBox6 = refFormTransplantViewModel.Qty_TxtBox6;
                refFormTransplant.DNS_TxtBox6 = refFormTransplantViewModel.DNS_TxtBox6;
                refFormTransplant.REFILLS_TxtBox6 = refFormTransplantViewModel.REFILLS_TxtBox6;
                refFormTransplant.Medication_TxtBox7 = refFormTransplantViewModel.Medication_TxtBox7;
                refFormTransplant.DIRECTIONS_TextBox7 = refFormTransplantViewModel.DIRECTIONS_TextBox7;
                refFormTransplant.Qty_TxtBox7 = refFormTransplantViewModel.Qty_TxtBox7;
                refFormTransplant.DNS_TxtBox7 = refFormTransplantViewModel.DNS_TxtBox7;
                refFormTransplant.REFILLS_TxtBox7 = refFormTransplantViewModel.REFILLS_TxtBox7;
                refFormTransplant.Medication_TxtBox8 = refFormTransplantViewModel.Medication_TxtBox8;
                refFormTransplant.DIRECTIONS_TextBox8 = refFormTransplantViewModel.DIRECTIONS_TextBox8;
                refFormTransplant.Qty_TxtBox8 = refFormTransplantViewModel.Qty_TxtBox8;
                refFormTransplant.DNS_TxtBox8 = refFormTransplantViewModel.DNS_TxtBox8;
                refFormTransplant.REFILLS_TxtBox8 = refFormTransplantViewModel.REFILLS_TxtBox8;
                refFormTransplant.Medication_TxtBox9 = refFormTransplantViewModel.Medication_TxtBox9;
                refFormTransplant.DIRECTIONS_TextBox9 = refFormTransplantViewModel.DIRECTIONS_TextBox9;
                refFormTransplant.Qty_TxtBox9 = refFormTransplantViewModel.Qty_TxtBox9;
                refFormTransplant.DNS_TxtBox9 = refFormTransplantViewModel.DNS_TxtBox9;
                refFormTransplant.REFILLS_TxtBox9 = refFormTransplantViewModel.REFILLS_TxtBox9;
                refFormTransplant.Medication_TxtBox10 = refFormTransplantViewModel.Medication_TxtBox10;
                refFormTransplant.DIRECTIONS_TextBox10 = refFormTransplantViewModel.DIRECTIONS_TextBox10;
                refFormTransplant.Qty_TxtBox10 = refFormTransplantViewModel.Qty_TxtBox10;
                refFormTransplant.DNS_TxtBox10 = refFormTransplantViewModel.DNS_TxtBox10;
                refFormTransplant.REFILLS_TxtBox10 = refFormTransplantViewModel.REFILLS_TxtBox10;
                refFormTransplant.Medication_TxtBox11 = refFormTransplantViewModel.Medication_TxtBox11;
                refFormTransplant.DIRECTIONS_TextBox11 = refFormTransplantViewModel.DIRECTIONS_TextBox11;
                refFormTransplant.Qty_TxtBox11 = refFormTransplantViewModel.Qty_TxtBox11;
                refFormTransplant.DNS_TxtBox11 = refFormTransplantViewModel.DNS_TxtBox11;
                refFormTransplant.REFILLS_TxtBox11 = refFormTransplantViewModel.REFILLS_TxtBox11;
                refFormTransplant.Medication_TxtBox12 = refFormTransplantViewModel.Medication_TxtBox12;
                refFormTransplant.DIRECTIONS_TextBox12 = refFormTransplantViewModel.DIRECTIONS_TextBox12;
                refFormTransplant.Qty_TxtBox12 = refFormTransplantViewModel.Qty_TxtBox12;
                refFormTransplant.DNS_TxtBox12 = refFormTransplantViewModel.DNS_TxtBox12;
                refFormTransplant.REFILLS_TxtBox12 = refFormTransplantViewModel.REFILLS_TxtBox12;
                refFormTransplant.Medication_TxtBox13 = refFormTransplantViewModel.Medication_TxtBox13;
                refFormTransplant.DIRECTIONS_TextBox13 = refFormTransplantViewModel.DIRECTIONS_TextBox13;
                refFormTransplant.Qty_TxtBox13 = refFormTransplantViewModel.Qty_TxtBox13;
                refFormTransplant.DNS_TxtBox13 = refFormTransplantViewModel.DNS_TxtBox13;
                refFormTransplant.REFILLS_TxtBox13 = refFormTransplantViewModel.REFILLS_TxtBox13;
                refFormTransplant.Medication_TxtBox14 = refFormTransplantViewModel.Medication_TxtBox14;
                refFormTransplant.DIRECTIONS_TextBox14 = refFormTransplantViewModel.DIRECTIONS_TextBox14;
                refFormTransplant.Qty_TxtBox14 = refFormTransplantViewModel.Qty_TxtBox14;
                refFormTransplant.DNS_TxtBox14 = refFormTransplantViewModel.DNS_TxtBox14;
                refFormTransplant.REFILLS_TxtBox14 = refFormTransplantViewModel.REFILLS_TxtBox14;
                refFormTransplant.Medication_TxtBox15 = refFormTransplantViewModel.Medication_TxtBox15;
                refFormTransplant.DIRECTIONS_TextBox15 = refFormTransplantViewModel.DIRECTIONS_TextBox15;
                refFormTransplant.Qty_TxtBox15 = refFormTransplantViewModel.Qty_TxtBox15;
                refFormTransplant.DNS_TxtBox15 = refFormTransplantViewModel.DNS_TxtBox15;
                refFormTransplant.REFILLS_TxtBox15 = refFormTransplantViewModel.REFILLS_TxtBox15;
                refFormTransplant.Medication_TxtBox16 = refFormTransplantViewModel.Medication_TxtBox16;
                refFormTransplant.DIRECTIONS_TextBox16 = refFormTransplantViewModel.DIRECTIONS_TextBox16;
                refFormTransplant.Qty_TxtBox16 = refFormTransplantViewModel.Qty_TxtBox16;
                refFormTransplant.DNS_TxtBox16 = refFormTransplantViewModel.DNS_TxtBox16;
                refFormTransplant.REFILLS_TxtBox16 = refFormTransplantViewModel.REFILLS_TxtBox16;
                refFormTransplant.Medication_TxtBox17 = refFormTransplantViewModel.Medication_TxtBox17;
                refFormTransplant.DIRECTIONS_TextBox17 = refFormTransplantViewModel.DIRECTIONS_TextBox17;
                refFormTransplant.Qty_TxtBox17 = refFormTransplantViewModel.Qty_TxtBox17;
                refFormTransplant.DNS_TxtBox17 = refFormTransplantViewModel.DNS_TxtBox17;
                refFormTransplant.REFILLS_TxtBox17 = refFormTransplantViewModel.REFILLS_TxtBox17;
                refFormTransplant.Medication_TxtBox18 = refFormTransplantViewModel.Medication_TxtBox18;
                refFormTransplant.DIRECTIONS_TextBox18 = refFormTransplantViewModel.DIRECTIONS_TextBox18;
                refFormTransplant.Qty_TxtBox18 = refFormTransplantViewModel.Qty_TxtBox18;
                refFormTransplant.DNS_TxtBox18 = refFormTransplantViewModel.DNS_TxtBox18;
                refFormTransplant.REFILLS_TxtBox18 = refFormTransplantViewModel.REFILLS_TxtBox18;
                refFormTransplant.Medication_TxtBox19 = refFormTransplantViewModel.Medication_TxtBox19;
                refFormTransplant.DIRECTIONS_TextBox19 = refFormTransplantViewModel.DIRECTIONS_TextBox19;
                refFormTransplant.Qty_TxtBox19 = refFormTransplantViewModel.Qty_TxtBox19;
                refFormTransplant.DNS_TxtBox19 = refFormTransplantViewModel.DNS_TxtBox19;
                refFormTransplant.REFILLS_TxtBox19 = refFormTransplantViewModel.REFILLS_TxtBox19;
                refFormTransplant.Medication_TxtBox20 = refFormTransplantViewModel.Medication_TxtBox20;
                refFormTransplant.DIRECTIONS_TextBox20 = refFormTransplantViewModel.DIRECTIONS_TextBox20;
                refFormTransplant.Qty_TxtBox20 = refFormTransplantViewModel.Qty_TxtBox20;
                refFormTransplant.DNS_TxtBox20 = refFormTransplantViewModel.DNS_TxtBox20;
                refFormTransplant.REFILLS_TxtBox20 = refFormTransplantViewModel.REFILLS_TxtBox20;
                refFormTransplant.Medication_TxtBox21 = refFormTransplantViewModel.Medication_TxtBox21;
                refFormTransplant.DIRECTIONS_TextBox21 = refFormTransplantViewModel.DIRECTIONS_TextBox21;
                refFormTransplant.Qty_TxtBox21 = refFormTransplantViewModel.Qty_TxtBox21;
                refFormTransplant.DNS_TxtBox21 = refFormTransplantViewModel.DNS_TxtBox21;
                refFormTransplant.REFILLS_TxtBox21 = refFormTransplantViewModel.REFILLS_TxtBox21;
                refFormTransplant.Medication_TxtBox22 = refFormTransplantViewModel.Medication_TxtBox22;
                refFormTransplant.DIRECTIONS_TextBox22 = refFormTransplantViewModel.DIRECTIONS_TextBox22;
                refFormTransplant.Qty_TxtBox22 = refFormTransplantViewModel.Qty_TxtBox22;
                refFormTransplant.DNS_TxtBox22 = refFormTransplantViewModel.DNS_TxtBox22;
                refFormTransplant.REFILLS_TxtBox22 = refFormTransplantViewModel.REFILLS_TxtBox22;
                refFormTransplant.Medication_TxtBox23 = refFormTransplantViewModel.Medication_TxtBox23;
                refFormTransplant.DIRECTIONS_TextBox23 = refFormTransplantViewModel.DIRECTIONS_TextBox23;
                refFormTransplant.Qty_TxtBox23 = refFormTransplantViewModel.Qty_TxtBox23;
                refFormTransplant.DNS_TxtBox23 = refFormTransplantViewModel.DNS_TxtBox23;
                refFormTransplant.REFILLS_TxtBox23 = refFormTransplantViewModel.REFILLS_TxtBox23;
                refFormTransplant.Medication_TxtBox24 = refFormTransplantViewModel.Medication_TxtBox24;
                refFormTransplant.DIRECTIONS_TextBox24 = refFormTransplantViewModel.DIRECTIONS_TextBox24;
                refFormTransplant.Qty_TxtBox24 = refFormTransplantViewModel.Qty_TxtBox24;
                refFormTransplant.DNS_TxtBox24 = refFormTransplantViewModel.DNS_TxtBox24;
                refFormTransplant.REFILLS_TxtBox24 = refFormTransplantViewModel.REFILLS_TxtBox24;
                refFormTransplant.Medication_TxtBox25 = refFormTransplantViewModel.Medication_TxtBox25;
                refFormTransplant.DIRECTIONS_TextBox25 = refFormTransplantViewModel.DIRECTIONS_TextBox25;
                refFormTransplant.Qty_TxtBox25 = refFormTransplantViewModel.Qty_TxtBox25;
                refFormTransplant.DNS_TxtBox25 = refFormTransplantViewModel.DNS_TxtBox25;
                refFormTransplant.REFILLS_TxtBox25 = refFormTransplantViewModel.REFILLS_TxtBox25;
                refFormTransplant.ChkBox_MD1 = refFormTransplantViewModel.ChkBox_MD1;
                refFormTransplant.MD1_TxtBox = refFormTransplantViewModel.MD1_TxtBox;
                refFormTransplant.ChkBox_MD2 = refFormTransplantViewModel.ChkBox_MD2;
                refFormTransplant.MD2_TxtBox = refFormTransplantViewModel.MD2_TxtBox;
                refFormTransplant.ChkBox_MD3 = refFormTransplantViewModel.ChkBox_MD3;
                refFormTransplant.MD3_TxtBox = refFormTransplantViewModel.MD3_TxtBox;
                refFormTransplant.ChkBox_MD4 = refFormTransplantViewModel.ChkBox_MD4;
                refFormTransplant.MD4_TxtBox = refFormTransplantViewModel.MD4_TxtBox;
                refFormTransplant.ChkBox_MD5 = refFormTransplantViewModel.ChkBox_MD5;
                refFormTransplant.MD5_TxtBox = refFormTransplantViewModel.MD5_TxtBox;
                refFormTransplant.ChkBox_MD6 = refFormTransplantViewModel.ChkBox_MD6;
                refFormTransplant.MD6_TxtBox = refFormTransplantViewModel.MD6_TxtBox;
                refFormTransplant.Person1_ChkBox = refFormTransplantViewModel.Person1_ChkBox;
                refFormTransplant.Person1_Contact_TxtBox = refFormTransplantViewModel.Person1_Contact_TxtBox;
                refFormTransplant.Person2_ChkBox = refFormTransplantViewModel.Person2_ChkBox;
                refFormTransplant.Person2_Contact_TxtBox = refFormTransplantViewModel.Person2_Contact_TxtBox;
                refFormTransplant.Person3_ChkBox = refFormTransplantViewModel.Person3_ChkBox;
                refFormTransplant.Person3_Contact_TxtBox = refFormTransplantViewModel.Person3_Contact_TxtBox;
                refFormTransplant.Medication_TxtBox26 = refFormTransplantViewModel.Medication_TxtBox26;
                refFormTransplant.DIRECTIONS_TextBox26 = refFormTransplantViewModel.DIRECTIONS_TextBox26;
                refFormTransplant.Qty_TxtBox26 = refFormTransplantViewModel.Qty_TxtBox26;
                refFormTransplant.DNS_TxtBox26 = refFormTransplantViewModel.DNS_TxtBox26;
                refFormTransplant.REFILLS_TxtBox26 = refFormTransplantViewModel.REFILLS_TxtBox26;
                refFormTransplant.ChkBox_Z94_1 = refFormTransplantViewModel.ChkBox_Z94_1;
                refFormTransplant.ChkBox_ZZ94_2 = refFormTransplantViewModel.ChkBox_ZZ94_2;


                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormTransplant.ModifiedBy = CurrentUser.UserId;
                refFormTransplant.ModifiedOn = DateTime.UtcNow;

                refFormTransplant.IsSignatured = refFormTransplantViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormTransplant.Update(refFormTransplant);
                    AuditLogger.AuditTracker("Edit TransplantReferralForm", "A TransplantReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormTransplant.CreatedBy = CurrentUser.UserId;
                    refFormTransplant.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormTransplant.Insert(refFormTransplant);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New TransplantReferralForm", "A new TransplantReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormTransplantViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormTransplant.RefFormTransplantId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormTransplant Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormTransplant PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormTransplant Referral Form Unsuccessfully.", success = false });
        }

        public ActionResult TransplantReferralForm_2(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Transplant Referral Form (2)"));
            return RedirectToAction("TransplantReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 22 });
        }
        //lmfl neurology referral form
        public ActionResult lmfl_neurology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl neurology referral form"));
            return RedirectToAction("NeurologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 57 });
        }
        //Neurology..................................
        public ActionResult NeurologyReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("neurology-referral-form"));
                    referralFormId = referralForm?.ReferralFormId ?? 12;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormNeurologyViewModel refFormNeurologyViewModel = new RefFormNeurologyViewModel();

                //Set ReferralFormId
                refFormNeurologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormNeurologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormNeurologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormNeurologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormNeurologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormNeurologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormNeurologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormNeurologyViewModel.PhysicianFullName = physician.FullName;
                        refFormNeurologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormNeurologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormNeurologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormNeurologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormNeurologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormNeurologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormNeurologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormNeurology refFormNeurology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormNeurology = _unitOfWork.RefFormNeurology.GetSingle(t => t.RefFormNeurologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormNeurology == null) refFormNeurology = new RefFormNeurology();


                    refFormNeurologyViewModel.RefFormNeurologyId = refFormNeurology.RefFormNeurologyId;

                    //Form
                    //Add your code here.




                    refFormNeurologyViewModel.RefFormNeurologyId = refFormNeurology.RefFormNeurologyId;

                    refFormNeurologyViewModel.FormDate = refFormNeurology.FormDate;
                    refFormNeurologyViewModel.FormNeedsByDate = refFormNeurology.FormNeedsByDate;
                    refFormNeurologyViewModel.ChkBox_ShipToPatient = refFormNeurology.ChkBox_ShipToPatient ?? false;
                    refFormNeurologyViewModel.ChkBox_ShipToOffice = refFormNeurology.ChkBox_ShipToOffice ?? false;
                    refFormNeurologyViewModel.ChkBox_ShipToOther = refFormNeurology.ChkBox_ShipToOther ?? false;
                    refFormNeurologyViewModel.TxtBox_ShipToOther = refFormNeurology.TxtBox_ShipToOther;

                    refFormNeurologyViewModel.ChkBox_G35Multiple = refFormNeurology.ChkBox_G35Multiple ?? false;
                    refFormNeurologyViewModel.ChkBox_Other = refFormNeurology.ChkBox_Other ?? false;
                    refFormNeurologyViewModel.Other_TxtBox = refFormNeurology.Other_TxtBox;
                    refFormNeurologyViewModel.ChkBox_RelapsingRemitting = refFormNeurology.ChkBox_RelapsingRemitting ?? false;
                    refFormNeurologyViewModel.ChkBox_PrimaryProgressive = refFormNeurology.ChkBox_PrimaryProgressive ?? false;
                    refFormNeurologyViewModel.ChkBox_SecondaryProgressive = refFormNeurology.ChkBox_SecondaryProgressive ?? false;
                    refFormNeurologyViewModel.ChkBox_ProgressiveRelapsing = refFormNeurology.ChkBox_ProgressiveRelapsing ?? false;
                    refFormNeurologyViewModel.ChkBox_patientbeenpreviouslyNo = refFormNeurology.ChkBox_patientbeenpreviouslyNo ?? false;
                    refFormNeurologyViewModel.ChkBox_patientbeenpreviouslyYes = refFormNeurology.ChkBox_patientbeenpreviouslyYes ?? false;
                    refFormNeurologyViewModel.Medicationfailed_TxtBox1 = refFormNeurology.Medicationfailed_TxtBox1;
                    refFormNeurologyViewModel.ChkBox_patientcurrentlyontherapyNo = refFormNeurology.ChkBox_patientcurrentlyontherapyNo ?? false;
                    refFormNeurologyViewModel.ChkBox_patientcurrentlyontherapyYes = refFormNeurology.ChkBox_patientcurrentlyontherapyYes ?? false;
                    refFormNeurologyViewModel.Medicationfailed_TxtBox2 = refFormNeurology.Medicationfailed_TxtBox2;
                    refFormNeurologyViewModel.ChkBox_stoptakingcurrenttherapyYes = refFormNeurology.ChkBox_stoptakingcurrenttherapyYes ?? false;
                    refFormNeurologyViewModel.ChkBox_stoptakingcurrenttherapyNo = refFormNeurology.ChkBox_stoptakingcurrenttherapyNo ?? false;
                    refFormNeurologyViewModel.longwillpatientwaitbeforestarting_TxtBox = refFormNeurology.longwillpatientwaitbeforestarting_TxtBox;
                    refFormNeurologyViewModel.othermedicationspatient_TxtBox = refFormNeurology.othermedicationspatient_TxtBox;
                    refFormNeurologyViewModel.ChkBox_Avonex = refFormNeurology.ChkBox_Avonex ?? false;
                    refFormNeurologyViewModel.ChkBox_AvonexPFS = refFormNeurology.ChkBox_AvonexPFS ?? false;
                    refFormNeurologyViewModel.ChkBox_AvonexPEN = refFormNeurology.ChkBox_AvonexPEN ?? false;
                    refFormNeurologyViewModel.ChkBox_AvonexPwd = refFormNeurology.ChkBox_AvonexPwd ?? false;
                    refFormNeurologyViewModel.ChkBox_Inject30mcg = refFormNeurology.ChkBox_Inject30mcg ?? false;
                    refFormNeurologyViewModel.ChkBox_Otherdosing = refFormNeurology.ChkBox_Otherdosing ?? false;
                    refFormNeurologyViewModel.Otherdosing_TxtBox = refFormNeurology.Otherdosing_TxtBox;
                    refFormNeurologyViewModel.Avonex_Qty_TxtBox = refFormNeurology.Avonex_Qty_TxtBox;
                    refFormNeurologyViewModel.Avonex_Refills_TxtBox = refFormNeurology.Avonex_Refills_TxtBox;
                    refFormNeurologyViewModel.ChkBox_Betaseron = refFormNeurology.ChkBox_Betaseron ?? false;
                    refFormNeurologyViewModel.ChkBox_Betaseron_InitialWeek1and2 = refFormNeurology.ChkBox_Betaseron_InitialWeek1and2 ?? false;
                    refFormNeurologyViewModel.ChkBox_Betaseron_MaintenanceDose = refFormNeurology.ChkBox_Betaseron_MaintenanceDose ?? false;
                    refFormNeurologyViewModel.ChkBox_Copaxone = refFormNeurology.ChkBox_Copaxone ?? false;
                    refFormNeurologyViewModel.ChkBox_Copaxone_20mg = refFormNeurology.ChkBox_Copaxone_20mg ?? false;
                    refFormNeurologyViewModel.ChkBox_Copaxone_40mg = refFormNeurology.ChkBox_Copaxone_40mg ?? false;
                    refFormNeurologyViewModel.ChkBox_Copaxone_Inject20mg = refFormNeurology.ChkBox_Copaxone_Inject20mg ?? false;
                    refFormNeurologyViewModel.ChkBox_Copaxone_Inject40mg = refFormNeurology.ChkBox_Copaxone_Inject40mg ?? false;
                    refFormNeurologyViewModel.ChkBox_Extavia = refFormNeurology.ChkBox_Extavia ?? false;
                    refFormNeurologyViewModel.ChkBox_ExtaviaInitialWeek1and2 = refFormNeurology.ChkBox_ExtaviaInitialWeek1and2 ?? false;
                    refFormNeurologyViewModel.ChkBox_ExtaviaInitialMaintenanceDose = refFormNeurology.ChkBox_ExtaviaInitialMaintenanceDose ?? false;
                    refFormNeurologyViewModel.ChkBox_Gilenya = refFormNeurology.ChkBox_Gilenya ?? false;
                    refFormNeurologyViewModel.ChkBox_Glatopa = refFormNeurology.ChkBox_Glatopa ?? false;
                    refFormNeurologyViewModel.ChkBox_Plegridy = refFormNeurology.ChkBox_Plegridy ?? false;
                    refFormNeurologyViewModel.ChkBox_PlegridyStarterPack = refFormNeurology.ChkBox_PlegridyStarterPack ?? false;
                    refFormNeurologyViewModel.ChkBox_PlegridyPEN = refFormNeurology.ChkBox_PlegridyPEN ?? false;
                    refFormNeurologyViewModel.ChkBox_PlegridyPFS = refFormNeurology.ChkBox_PlegridyPFS ?? false;
                    refFormNeurologyViewModel.ChkBox_Plegridy125mcgPEN = refFormNeurology.ChkBox_Plegridy125mcgPEN ?? false;
                    refFormNeurologyViewModel.ChkBox_PlegridyInject63mcg = refFormNeurology.ChkBox_PlegridyInject63mcg ?? false;
                    refFormNeurologyViewModel.ChkBox_PlegridyInject125mcg = refFormNeurology.ChkBox_PlegridyInject125mcg ?? false;
                    refFormNeurologyViewModel.ChkBox_Rebif = refFormNeurology.ChkBox_Rebif ?? false;
                    refFormNeurologyViewModel.ChkBox_RebifTitrationRebidose = refFormNeurology.ChkBox_RebifTitrationRebidose ?? false;
                    refFormNeurologyViewModel.ChkBox_RebifTitrationPack = refFormNeurology.ChkBox_RebifTitrationPack ?? false;
                    refFormNeurologyViewModel.ChkBox_Rebif22mcg_0_5mLRebidose = refFormNeurology.ChkBox_Rebif22mcg_0_5mLRebidose ?? false;
                    refFormNeurologyViewModel.ChkBox_Rebif22mcg_0_5mLPFS = refFormNeurology.ChkBox_Rebif22mcg_0_5mLPFS ?? false;
                    refFormNeurologyViewModel.ChkBox_Rebif44mcg_0_5mLRebidose = refFormNeurology.ChkBox_Rebif44mcg_0_5mLRebidose ?? false;
                    refFormNeurologyViewModel.ChkBox_Rebif44mcg_0_5mLPFS = refFormNeurology.ChkBox_Rebif44mcg_0_5mLPFS ?? false;
                    refFormNeurologyViewModel.ChkBox_RebifTitrationDose = refFormNeurology.ChkBox_RebifTitrationDose ?? false;
                    refFormNeurologyViewModel.ChkBox_RebifMaintenanceDose = refFormNeurology.ChkBox_RebifMaintenanceDose ?? false;
                    refFormNeurologyViewModel.Rebif_Inject_TxtBox = refFormNeurology.Rebif_Inject_TxtBox;
                    refFormNeurologyViewModel.ChkBox_Tecfidera = refFormNeurology.ChkBox_Tecfidera ?? false;
                    refFormNeurologyViewModel.ChkBox_TecfideraTitrationStarterPack = refFormNeurology.ChkBox_TecfideraTitrationStarterPack ?? false;
                    refFormNeurologyViewModel.ChkBox_Tecfidera240mg = refFormNeurology.ChkBox_Tecfidera240mg ?? false;
                    refFormNeurologyViewModel.ChkBox_Tecfidera120mg = refFormNeurology.ChkBox_Tecfidera120mg ?? false;
                    refFormNeurologyViewModel.ChkBox_TecfideraTitrationDose = refFormNeurology.ChkBox_TecfideraTitrationDose ?? false;
                    refFormNeurologyViewModel.ChkBox_TecfideraTake240mg = refFormNeurology.ChkBox_TecfideraTake240mg ?? false;
                    refFormNeurologyViewModel.ChkBox_TecfideraTake120mg = refFormNeurology.ChkBox_TecfideraTake120mg ?? false;
                    refFormNeurologyViewModel.ChkBox_TecfideraOther = refFormNeurology.ChkBox_TecfideraOther ?? false;
                    refFormNeurologyViewModel.TecfideraOther_TxtBox = refFormNeurology.TecfideraOther_TxtBox;
                    refFormNeurologyViewModel.ChkBox_Epipen = refFormNeurology.ChkBox_Epipen ?? false;
                    refFormNeurologyViewModel.Epipen_REFILLS_TxtBox = refFormNeurology.Epipen_REFILLS_TxtBox;
                    refFormNeurologyViewModel.ChkBox_EpipenJr = refFormNeurology.ChkBox_EpipenJr ?? false;
                    refFormNeurologyViewModel.ChkBox_Others = refFormNeurology.ChkBox_Others ?? false;
                    refFormNeurologyViewModel.Others_TxtBox = refFormNeurology.Others_TxtBox;
                    refFormNeurologyViewModel.DrugAllergies_TxtBox = refFormNeurology.DrugAllergies_TxtBox;
                    refFormNeurologyViewModel.ChkBox_Plegridy125mcgPFS = refFormNeurology.ChkBox_Plegridy125mcgPFS ?? false;







                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormNeurologyViewModel.IsSignatured = refFormNeurology.IsSignatured ?? false;

                    return View(refFormNeurologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormNeurologyViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormNeurologyViewModel());
        }

        [HttpPost]
        public JsonResult NeurologyReferralForm(RefFormNeurologyViewModel refFormNeurologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormNeurologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormNeurology refFormNeurology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormNeurologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormNeurology = _unitOfWork.RefFormNeurology.GetSingle(t => t.RefFormNeurologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormNeurology == null)
                {
                    refFormNeurology = new RefFormNeurology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form



                refFormNeurology.RefFormNeurologyId = refFormNeurologyViewModel.RefFormNeurologyId;
                refFormNeurology.FormDate = refFormNeurologyViewModel.FormDate;
                refFormNeurology.FormNeedsByDate = refFormNeurologyViewModel.FormNeedsByDate;
                refFormNeurology.ChkBox_ShipToPatient = refFormNeurologyViewModel.ChkBox_ShipToPatient;
                refFormNeurology.ChkBox_ShipToOffice = refFormNeurologyViewModel.ChkBox_ShipToOffice;
                refFormNeurology.ChkBox_ShipToOther = refFormNeurologyViewModel.ChkBox_ShipToOther;
                refFormNeurology.TxtBox_ShipToOther = refFormNeurologyViewModel.TxtBox_ShipToOther;
                refFormNeurology.ChkBox_G35Multiple = refFormNeurologyViewModel.ChkBox_G35Multiple;
                refFormNeurology.ChkBox_Other = refFormNeurologyViewModel.ChkBox_Other;
                refFormNeurology.Other_TxtBox = refFormNeurologyViewModel.Other_TxtBox;
                refFormNeurology.ChkBox_RelapsingRemitting = refFormNeurologyViewModel.ChkBox_RelapsingRemitting;
                refFormNeurology.ChkBox_PrimaryProgressive = refFormNeurologyViewModel.ChkBox_PrimaryProgressive;
                refFormNeurology.ChkBox_SecondaryProgressive = refFormNeurologyViewModel.ChkBox_SecondaryProgressive;
                refFormNeurology.ChkBox_ProgressiveRelapsing = refFormNeurologyViewModel.ChkBox_ProgressiveRelapsing;
                refFormNeurology.ChkBox_patientbeenpreviouslyNo = refFormNeurologyViewModel.ChkBox_patientbeenpreviouslyNo;
                refFormNeurology.ChkBox_patientbeenpreviouslyYes = refFormNeurologyViewModel.ChkBox_patientbeenpreviouslyYes;
                refFormNeurology.Medicationfailed_TxtBox1 = refFormNeurologyViewModel.Medicationfailed_TxtBox1;
                refFormNeurology.ChkBox_patientcurrentlyontherapyNo = refFormNeurologyViewModel.ChkBox_patientcurrentlyontherapyNo;
                refFormNeurology.ChkBox_patientcurrentlyontherapyYes = refFormNeurologyViewModel.ChkBox_patientcurrentlyontherapyYes;
                refFormNeurology.Medicationfailed_TxtBox2 = refFormNeurologyViewModel.Medicationfailed_TxtBox2;
                refFormNeurology.ChkBox_stoptakingcurrenttherapyYes = refFormNeurologyViewModel.ChkBox_stoptakingcurrenttherapyYes;
                refFormNeurology.ChkBox_stoptakingcurrenttherapyNo = refFormNeurologyViewModel.ChkBox_stoptakingcurrenttherapyNo;
                refFormNeurology.longwillpatientwaitbeforestarting_TxtBox = refFormNeurologyViewModel.longwillpatientwaitbeforestarting_TxtBox;
                refFormNeurology.othermedicationspatient_TxtBox = refFormNeurologyViewModel.othermedicationspatient_TxtBox;
                refFormNeurology.ChkBox_Avonex = refFormNeurologyViewModel.ChkBox_Avonex;
                refFormNeurology.ChkBox_AvonexPFS = refFormNeurologyViewModel.ChkBox_AvonexPFS;
                refFormNeurology.ChkBox_AvonexPEN = refFormNeurologyViewModel.ChkBox_AvonexPEN;
                refFormNeurology.ChkBox_AvonexPwd = refFormNeurologyViewModel.ChkBox_AvonexPwd;
                refFormNeurology.ChkBox_Inject30mcg = refFormNeurologyViewModel.ChkBox_Inject30mcg;
                refFormNeurology.ChkBox_Otherdosing = refFormNeurologyViewModel.ChkBox_Otherdosing;
                refFormNeurology.Otherdosing_TxtBox = refFormNeurologyViewModel.Otherdosing_TxtBox;
                refFormNeurology.Avonex_Qty_TxtBox = refFormNeurologyViewModel.Avonex_Qty_TxtBox;
                refFormNeurology.Avonex_Refills_TxtBox = refFormNeurologyViewModel.Avonex_Refills_TxtBox;
                refFormNeurology.ChkBox_Betaseron = refFormNeurologyViewModel.ChkBox_Betaseron;
                refFormNeurology.ChkBox_Betaseron_InitialWeek1and2 = refFormNeurologyViewModel.ChkBox_Betaseron_InitialWeek1and2;
                refFormNeurology.ChkBox_Betaseron_MaintenanceDose = refFormNeurologyViewModel.ChkBox_Betaseron_MaintenanceDose;
                refFormNeurology.ChkBox_Copaxone = refFormNeurologyViewModel.ChkBox_Copaxone;
                refFormNeurology.ChkBox_Copaxone_20mg = refFormNeurologyViewModel.ChkBox_Copaxone_20mg;
                refFormNeurology.ChkBox_Copaxone_40mg = refFormNeurologyViewModel.ChkBox_Copaxone_40mg;
                refFormNeurology.ChkBox_Copaxone_Inject20mg = refFormNeurologyViewModel.ChkBox_Copaxone_Inject20mg;
                refFormNeurology.ChkBox_Copaxone_Inject40mg = refFormNeurologyViewModel.ChkBox_Copaxone_Inject40mg;
                refFormNeurology.ChkBox_Extavia = refFormNeurologyViewModel.ChkBox_Extavia;
                refFormNeurology.ChkBox_ExtaviaInitialWeek1and2 = refFormNeurologyViewModel.ChkBox_ExtaviaInitialWeek1and2;
                refFormNeurology.ChkBox_ExtaviaInitialMaintenanceDose = refFormNeurologyViewModel.ChkBox_ExtaviaInitialMaintenanceDose;
                refFormNeurology.ChkBox_Gilenya = refFormNeurologyViewModel.ChkBox_Gilenya;
                refFormNeurology.ChkBox_Glatopa = refFormNeurologyViewModel.ChkBox_Glatopa;
                refFormNeurology.ChkBox_Plegridy = refFormNeurologyViewModel.ChkBox_Plegridy;
                refFormNeurology.ChkBox_PlegridyStarterPack = refFormNeurologyViewModel.ChkBox_PlegridyStarterPack;
                refFormNeurology.ChkBox_PlegridyPEN = refFormNeurologyViewModel.ChkBox_PlegridyPEN;
                refFormNeurology.ChkBox_PlegridyPFS = refFormNeurologyViewModel.ChkBox_PlegridyPFS;
                refFormNeurology.ChkBox_Plegridy125mcgPEN = refFormNeurologyViewModel.ChkBox_Plegridy125mcgPEN;
                refFormNeurology.ChkBox_PlegridyInject63mcg = refFormNeurologyViewModel.ChkBox_PlegridyInject63mcg;
                refFormNeurology.ChkBox_PlegridyInject125mcg = refFormNeurologyViewModel.ChkBox_PlegridyInject125mcg;
                refFormNeurology.ChkBox_Rebif = refFormNeurologyViewModel.ChkBox_Rebif;
                refFormNeurology.ChkBox_RebifTitrationRebidose = refFormNeurologyViewModel.ChkBox_RebifTitrationRebidose;
                refFormNeurology.ChkBox_RebifTitrationPack = refFormNeurologyViewModel.ChkBox_RebifTitrationPack;
                refFormNeurology.ChkBox_Rebif22mcg_0_5mLRebidose = refFormNeurologyViewModel.ChkBox_Rebif22mcg_0_5mLRebidose;
                refFormNeurology.ChkBox_Rebif22mcg_0_5mLPFS = refFormNeurologyViewModel.ChkBox_Rebif22mcg_0_5mLPFS;
                refFormNeurology.ChkBox_Rebif44mcg_0_5mLRebidose = refFormNeurologyViewModel.ChkBox_Rebif44mcg_0_5mLRebidose;
                refFormNeurology.ChkBox_Rebif44mcg_0_5mLPFS = refFormNeurologyViewModel.ChkBox_Rebif44mcg_0_5mLPFS;
                refFormNeurology.ChkBox_RebifTitrationDose = refFormNeurologyViewModel.ChkBox_RebifTitrationDose;
                refFormNeurology.ChkBox_RebifMaintenanceDose = refFormNeurologyViewModel.ChkBox_RebifMaintenanceDose;
                refFormNeurology.Rebif_Inject_TxtBox = refFormNeurologyViewModel.Rebif_Inject_TxtBox;
                refFormNeurology.ChkBox_Tecfidera = refFormNeurologyViewModel.ChkBox_Tecfidera;
                refFormNeurology.ChkBox_TecfideraTitrationStarterPack = refFormNeurologyViewModel.ChkBox_TecfideraTitrationStarterPack;
                refFormNeurology.ChkBox_Tecfidera240mg = refFormNeurologyViewModel.ChkBox_Tecfidera240mg;
                refFormNeurology.ChkBox_Tecfidera120mg = refFormNeurologyViewModel.ChkBox_Tecfidera120mg;
                refFormNeurology.ChkBox_TecfideraTitrationDose = refFormNeurologyViewModel.ChkBox_TecfideraTitrationDose;
                refFormNeurology.ChkBox_TecfideraTake240mg = refFormNeurologyViewModel.ChkBox_TecfideraTake240mg;
                refFormNeurology.ChkBox_TecfideraTake120mg = refFormNeurologyViewModel.ChkBox_TecfideraTake120mg;
                refFormNeurology.ChkBox_TecfideraOther = refFormNeurologyViewModel.ChkBox_TecfideraOther;
                refFormNeurology.TecfideraOther_TxtBox = refFormNeurologyViewModel.TecfideraOther_TxtBox;
                refFormNeurology.ChkBox_Epipen = refFormNeurologyViewModel.ChkBox_Epipen;
                refFormNeurology.Epipen_REFILLS_TxtBox = refFormNeurologyViewModel.Epipen_REFILLS_TxtBox;
                refFormNeurology.ChkBox_EpipenJr = refFormNeurologyViewModel.ChkBox_EpipenJr;
                refFormNeurology.ChkBox_Others = refFormNeurologyViewModel.ChkBox_Others;
                refFormNeurology.Others_TxtBox = refFormNeurologyViewModel.Others_TxtBox;
                refFormNeurology.DrugAllergies_TxtBox = refFormNeurologyViewModel.DrugAllergies_TxtBox;
                refFormNeurology.ChkBox_Plegridy125mcgPFS = refFormNeurologyViewModel.ChkBox_Plegridy125mcgPFS;




                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormNeurology.ModifiedBy = CurrentUser.UserId;
                refFormNeurology.ModifiedOn = DateTime.UtcNow;

                refFormNeurology.IsSignatured = refFormNeurologyViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormNeurology.Update(refFormNeurology);
                    AuditLogger.AuditTracker("Edit NeurologyReferralForm", "A NeurologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormNeurology.CreatedBy = CurrentUser.UserId;
                    refFormNeurology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormNeurology.Insert(refFormNeurology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New NeurologyReferralForm", "A new NeurologyReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormNeurologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormNeurology.RefFormNeurologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormNeurology Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormNeurology PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormNeurology Referral Form Unsuccessfully.", success = false });
        }
        //lmfl ninlaro oncology referral form
        public ActionResult lmfl_ninlaro_oncology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl ninlaro oncology referral form"));
            return RedirectToAction("OncologyReferralForm_1", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 37 });
        }
        //Oncology(1)...................................

        public ActionResult OncologyReferralForm_1(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Oncology Referral Form (1)"));
                    referralFormId = referralForm?.ReferralFormId ?? 14;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormOncology_1ViewModel refFormOncology_1ViewModel = new RefFormOncology_1ViewModel();

                //Set ReferralFormId
                refFormOncology_1ViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormOncology_1ViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormOncology_1ViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormOncology_1ViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormOncology_1ViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormOncology_1ViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormOncology_1ViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormOncology_1ViewModel.PhysicianFullName = physician.FullName;
                        refFormOncology_1ViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormOncology_1ViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormOncology_1ViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormOncology_1ViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormOncology_1ViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormOncology_1ViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormOncology_1ViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormOncology_1 refFormOncology_1 = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormOncology_1 = _unitOfWork.RefFormOncology_1.GetSingle(t => t.RefFormOncologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormOncology_1 == null) refFormOncology_1 = new RefFormOncology_1();


                    refFormOncology_1ViewModel.RefFormOncologyId = refFormOncology_1.RefFormOncologyId;

                    //Form
                    //Add your code here.




                    refFormOncology_1ViewModel.RefFormOncologyId = refFormOncology_1.RefFormOncologyId;

                    refFormOncology_1ViewModel.FormDate = refFormOncology_1.FormDate;
                    refFormOncology_1ViewModel.FormNeedsByDate = refFormOncology_1.FormNeedsByDate;
                    refFormOncology_1ViewModel.ChkBox_ShipToPatient = refFormOncology_1.ChkBox_ShipToPatient ?? false;
                    refFormOncology_1ViewModel.ChkBox_ShipToOffice = refFormOncology_1.ChkBox_ShipToOffice ?? false;
                    refFormOncology_1ViewModel.ChkBox_ShipToOther = refFormOncology_1.ChkBox_ShipToOther ?? false;
                    refFormOncology_1ViewModel.TxtBox_ShipToOther = refFormOncology_1.TxtBox_ShipToOther;

                    refFormOncology_1ViewModel.Diagnosis_TxtBox = refFormOncology_1.Diagnosis_TxtBox;
                    refFormOncology_1ViewModel.ICD_10_TxtBox = refFormOncology_1.ICD_10_TxtBox;
                    refFormOncology_1ViewModel.DrugAllergies_TxtBox = refFormOncology_1.DrugAllergies_TxtBox;
                    refFormOncology_1ViewModel.ChkBox_Thalomid = refFormOncology_1.ChkBox_Thalomid ?? false;
                    refFormOncology_1ViewModel.ChkBox_50mg = refFormOncology_1.ChkBox_50mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_100mg = refFormOncology_1.ChkBox_100mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_150mg = refFormOncology_1.ChkBox_150mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_200mg = refFormOncology_1.ChkBox_200mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_Take1capPOdaily1 = refFormOncology_1.ChkBox_Take1capPOdaily1 ?? false;
                    refFormOncology_1ViewModel.ChkBox_Empty1 = refFormOncology_1.ChkBox_Empty1 ?? false;
                    refFormOncology_1ViewModel.Empty1_TxtBox = refFormOncology_1.Empty1_TxtBox;
                    refFormOncology_1ViewModel.Qty_TxtBox1 = refFormOncology_1.Qty_TxtBox1;
                    refFormOncology_1ViewModel.ChkBox_AdultFemale = refFormOncology_1.ChkBox_AdultFemale ?? false;
                    refFormOncology_1ViewModel.ChkBox_AdultFemaleNOT = refFormOncology_1.ChkBox_AdultFemaleNOT ?? false;
                    refFormOncology_1ViewModel.ChkBox_AdultMale = refFormOncology_1.ChkBox_AdultMale ?? false;
                    refFormOncology_1ViewModel.ChkBox_Pomalyst = refFormOncology_1.ChkBox_Pomalyst ?? false;
                    refFormOncology_1ViewModel.ChkBox_1mg = refFormOncology_1.ChkBox_1mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_2mg = refFormOncology_1.ChkBox_2mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_3mg = refFormOncology_1.ChkBox_3mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_4mg = refFormOncology_1.ChkBox_4mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_Take1capPOdailydays1_21of28daycycle1 = refFormOncology_1.ChkBox_Take1capPOdailydays1_21of28daycycle1 ?? false;
                    refFormOncology_1ViewModel.ChkBox_Empty2 = refFormOncology_1.ChkBox_Empty2 ?? false;
                    refFormOncology_1ViewModel.Empty2_TxtBox = refFormOncology_1.Empty2_TxtBox;
                    refFormOncology_1ViewModel.Qty_TxtBox2 = refFormOncology_1.Qty_TxtBox2;
                    refFormOncology_1ViewModel.ChkBox_FemaleChild = refFormOncology_1.ChkBox_FemaleChild ?? false;
                    refFormOncology_1ViewModel.ChkBox_FemaleChildNOT = refFormOncology_1.ChkBox_FemaleChildNOT ?? false;
                    refFormOncology_1ViewModel.ChkBox_MaleChild = refFormOncology_1.ChkBox_MaleChild ?? false;
                    refFormOncology_1ViewModel.ChkBox_Revlimid = refFormOncology_1.ChkBox_Revlimid ?? false;
                    refFormOncology_1ViewModel.ChkBox_2_5mg = refFormOncology_1.ChkBox_2_5mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_5mg = refFormOncology_1.ChkBox_5mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_10mg = refFormOncology_1.ChkBox_10mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_15mg = refFormOncology_1.ChkBox_15mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_20mg = refFormOncology_1.ChkBox_20mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_25mg = refFormOncology_1.ChkBox_25mg ?? false;
                    refFormOncology_1ViewModel.ChkBox_Take1capPOdaily2 = refFormOncology_1.ChkBox_Take1capPOdaily2 ?? false;
                    refFormOncology_1ViewModel.ChkBox_Take1capPOdailydays1_21of28daycycle2 = refFormOncology_1.ChkBox_Take1capPOdailydays1_21of28daycycle2 ?? false;
                    refFormOncology_1ViewModel.ChkBox_Empty3 = refFormOncology_1.ChkBox_Empty3 ?? false;
                    refFormOncology_1ViewModel.Empty3_TxtBox = refFormOncology_1.Empty3_TxtBox;
                    refFormOncology_1ViewModel.Qty_TxtBox3 = refFormOncology_1.Qty_TxtBox3;
                    refFormOncology_1ViewModel.Authorization_TxtBox = refFormOncology_1.Authorization_TxtBox;
                    refFormOncology_1ViewModel.Date1_TxtBox = refFormOncology_1.Date1_TxtBox.HasValue ? refFormOncology_1.Date1_TxtBox.Value : DateTime.UtcNow;
                    refFormOncology_1ViewModel.Confirmation_TxtBox = refFormOncology_1.Confirmation_TxtBox;
                    refFormOncology_1ViewModel.Date2_TxtBox = refFormOncology_1.Date2_TxtBox.HasValue ? refFormOncology_1.Date2_TxtBox.Value : DateTime.UtcNow;
                    refFormOncology_1ViewModel.ChkBox_Ninlaro = refFormOncology_1.ChkBox_Ninlaro ?? false;
                    refFormOncology_1ViewModel.ChkBox_4mg2 = refFormOncology_1.ChkBox_4mg2 ?? false;
                    refFormOncology_1ViewModel.ChkBox_3mg2 = refFormOncology_1.ChkBox_3mg2 ?? false;
                    refFormOncology_1ViewModel.ChkBox_2_3mg = refFormOncology_1.ChkBox_2_3mg ?? false;
                    refFormOncology_1ViewModel.Refills_TxtBox1 = refFormOncology_1.Refills_TxtBox1;
                    refFormOncology_1ViewModel.ChkBox_Dexamethasone = refFormOncology_1.ChkBox_Dexamethasone ?? false;
                    refFormOncology_1ViewModel.Dexamethasone_Qty_TxtBox = refFormOncology_1.Dexamethasone_Qty_TxtBox;
                    refFormOncology_1ViewModel.Dexamethasone_Refills_TxtBox = refFormOncology_1.Dexamethasone_Refills_TxtBox;
                    refFormOncology_1ViewModel.ChkBox_Empty4 = refFormOncology_1.ChkBox_Empty4 ?? false;
                    refFormOncology_1ViewModel.Empty4_Qty_TxtBox = refFormOncology_1.Empty4_Qty_TxtBox;
                    refFormOncology_1ViewModel.Empty4_Refills_TxtBox = refFormOncology_1.Empty4_Refills_TxtBox;
                    refFormOncology_1ViewModel.Empty4_TxtBox = refFormOncology_1.Empty4_TxtBox;
                    refFormOncology_1ViewModel.ChkBox_Others = refFormOncology_1.ChkBox_Others ?? false;
                    refFormOncology_1ViewModel.Others_TxtBox = refFormOncology_1.Others_TxtBox;





                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormOncology_1ViewModel.IsSignatured = refFormOncology_1.IsSignatured ?? false;

                    return View(refFormOncology_1ViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method refFormOncology_1ViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormOncology_1ViewModel());
        }

        [HttpPost]
        public JsonResult OncologyReferralForm_1(RefFormOncology_1ViewModel refFormOncology_1ViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormOncology_1ViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormOncology_1 refFormOncology_1 = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormOncology_1ViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormOncology_1 = _unitOfWork.RefFormOncology_1.GetSingle(t => t.RefFormOncologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormOncology_1 == null)
                {
                    refFormOncology_1 = new RefFormOncology_1();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form


                refFormOncology_1.RefFormOncologyId = refFormOncology_1ViewModel.RefFormOncologyId;
                refFormOncology_1.FormDate = refFormOncology_1ViewModel.FormDate;
                refFormOncology_1.FormNeedsByDate = refFormOncology_1ViewModel.FormNeedsByDate;
                refFormOncology_1.ChkBox_ShipToPatient = refFormOncology_1ViewModel.ChkBox_ShipToPatient;
                refFormOncology_1.ChkBox_ShipToOffice = refFormOncology_1ViewModel.ChkBox_ShipToOffice;
                refFormOncology_1.ChkBox_ShipToOther = refFormOncology_1ViewModel.ChkBox_ShipToOther;
                refFormOncology_1.TxtBox_ShipToOther = refFormOncology_1ViewModel.TxtBox_ShipToOther;
                refFormOncology_1.Diagnosis_TxtBox = refFormOncology_1ViewModel.Diagnosis_TxtBox;
                refFormOncology_1.ICD_10_TxtBox = refFormOncology_1ViewModel.ICD_10_TxtBox;
                refFormOncology_1.DrugAllergies_TxtBox = refFormOncology_1ViewModel.DrugAllergies_TxtBox;
                refFormOncology_1.ChkBox_Thalomid = refFormOncology_1ViewModel.ChkBox_Thalomid;
                refFormOncology_1.ChkBox_50mg = refFormOncology_1ViewModel.ChkBox_50mg;
                refFormOncology_1.ChkBox_100mg = refFormOncology_1ViewModel.ChkBox_100mg;
                refFormOncology_1.ChkBox_150mg = refFormOncology_1ViewModel.ChkBox_150mg;
                refFormOncology_1.ChkBox_200mg = refFormOncology_1ViewModel.ChkBox_200mg;
                refFormOncology_1.ChkBox_Take1capPOdaily1 = refFormOncology_1ViewModel.ChkBox_Take1capPOdaily1;
                refFormOncology_1.ChkBox_Empty1 = refFormOncology_1ViewModel.ChkBox_Empty1;
                refFormOncology_1.Empty1_TxtBox = refFormOncology_1ViewModel.Empty1_TxtBox;
                refFormOncology_1.Qty_TxtBox1 = refFormOncology_1ViewModel.Qty_TxtBox1;
                refFormOncology_1.ChkBox_AdultFemale = refFormOncology_1ViewModel.ChkBox_AdultFemale;
                refFormOncology_1.ChkBox_AdultFemaleNOT = refFormOncology_1ViewModel.ChkBox_AdultFemaleNOT;
                refFormOncology_1.ChkBox_AdultMale = refFormOncology_1ViewModel.ChkBox_AdultMale;
                refFormOncology_1.ChkBox_Pomalyst = refFormOncology_1ViewModel.ChkBox_Pomalyst;
                refFormOncology_1.ChkBox_1mg = refFormOncology_1ViewModel.ChkBox_1mg;
                refFormOncology_1.ChkBox_2mg = refFormOncology_1ViewModel.ChkBox_2mg;
                refFormOncology_1.ChkBox_3mg = refFormOncology_1ViewModel.ChkBox_3mg;
                refFormOncology_1.ChkBox_4mg = refFormOncology_1ViewModel.ChkBox_4mg;
                refFormOncology_1.ChkBox_Take1capPOdailydays1_21of28daycycle1 = refFormOncology_1ViewModel.ChkBox_Take1capPOdailydays1_21of28daycycle1;
                refFormOncology_1.ChkBox_Empty2 = refFormOncology_1ViewModel.ChkBox_Empty2;
                refFormOncology_1.Empty2_TxtBox = refFormOncology_1ViewModel.Empty2_TxtBox;
                refFormOncology_1.Qty_TxtBox2 = refFormOncology_1ViewModel.Qty_TxtBox2;
                refFormOncology_1.ChkBox_FemaleChild = refFormOncology_1ViewModel.ChkBox_FemaleChild;
                refFormOncology_1.ChkBox_FemaleChildNOT = refFormOncology_1ViewModel.ChkBox_FemaleChildNOT;
                refFormOncology_1.ChkBox_MaleChild = refFormOncology_1ViewModel.ChkBox_MaleChild;
                refFormOncology_1.ChkBox_Revlimid = refFormOncology_1ViewModel.ChkBox_Revlimid;
                refFormOncology_1.ChkBox_2_5mg = refFormOncology_1ViewModel.ChkBox_2_5mg;
                refFormOncology_1.ChkBox_5mg = refFormOncology_1ViewModel.ChkBox_5mg;
                refFormOncology_1.ChkBox_10mg = refFormOncology_1ViewModel.ChkBox_10mg;
                refFormOncology_1.ChkBox_15mg = refFormOncology_1ViewModel.ChkBox_15mg;
                refFormOncology_1.ChkBox_20mg = refFormOncology_1ViewModel.ChkBox_20mg;
                refFormOncology_1.ChkBox_25mg = refFormOncology_1ViewModel.ChkBox_25mg;
                refFormOncology_1.ChkBox_Take1capPOdaily2 = refFormOncology_1ViewModel.ChkBox_Take1capPOdaily2;
                refFormOncology_1.ChkBox_Take1capPOdailydays1_21of28daycycle2 = refFormOncology_1ViewModel.ChkBox_Take1capPOdailydays1_21of28daycycle2;
                refFormOncology_1.ChkBox_Empty3 = refFormOncology_1ViewModel.ChkBox_Empty3;
                refFormOncology_1.Empty3_TxtBox = refFormOncology_1ViewModel.Empty3_TxtBox;
                refFormOncology_1.Qty_TxtBox3 = refFormOncology_1ViewModel.Qty_TxtBox3;
                refFormOncology_1.Authorization_TxtBox = refFormOncology_1ViewModel.Authorization_TxtBox;
                refFormOncology_1.Date1_TxtBox = refFormOncology_1ViewModel.Date1_TxtBox;
                refFormOncology_1.Confirmation_TxtBox = refFormOncology_1ViewModel.Confirmation_TxtBox;
                refFormOncology_1.Date2_TxtBox = refFormOncology_1ViewModel.Date2_TxtBox;
                refFormOncology_1.ChkBox_Ninlaro = refFormOncology_1ViewModel.ChkBox_Ninlaro;
                refFormOncology_1.ChkBox_4mg2 = refFormOncology_1ViewModel.ChkBox_4mg2;
                refFormOncology_1.ChkBox_3mg2 = refFormOncology_1ViewModel.ChkBox_3mg2;
                refFormOncology_1.ChkBox_2_3mg = refFormOncology_1ViewModel.ChkBox_2_3mg;
                refFormOncology_1.Refills_TxtBox1 = refFormOncology_1ViewModel.Refills_TxtBox1;
                refFormOncology_1.ChkBox_Dexamethasone = refFormOncology_1ViewModel.ChkBox_Dexamethasone;
                refFormOncology_1.Dexamethasone_Qty_TxtBox = refFormOncology_1ViewModel.Dexamethasone_Qty_TxtBox;
                refFormOncology_1.Dexamethasone_Refills_TxtBox = refFormOncology_1ViewModel.Dexamethasone_Refills_TxtBox;
                refFormOncology_1.ChkBox_Empty4 = refFormOncology_1ViewModel.ChkBox_Empty4;
                refFormOncology_1.Empty4_Qty_TxtBox = refFormOncology_1ViewModel.Empty4_Qty_TxtBox;
                refFormOncology_1.Empty4_Refills_TxtBox = refFormOncology_1ViewModel.Empty4_Refills_TxtBox;
                refFormOncology_1.Empty4_TxtBox = refFormOncology_1ViewModel.Empty4_TxtBox;
                refFormOncology_1.ChkBox_Others = refFormOncology_1ViewModel.ChkBox_Others;
                refFormOncology_1.Others_TxtBox = refFormOncology_1ViewModel.Others_TxtBox;






                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormOncology_1.ModifiedBy = CurrentUser.UserId;
                refFormOncology_1.ModifiedOn = DateTime.UtcNow;

                refFormOncology_1.IsSignatured = refFormOncology_1ViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormOncology_1.Update(refFormOncology_1);
                    AuditLogger.AuditTracker("Edit OncologyReferralForm_1", "A OncologyReferralForm_1  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormOncology_1.CreatedBy = CurrentUser.UserId;
                    refFormOncology_1.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormOncology_1.Insert(refFormOncology_1);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New OncologyReferralForm_1", "A new OncologyReferralForm_1  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormOncology_1ViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormOncology_1.RefFormOncologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save refFormOncology_1 Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method refFormOncology_1 PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save refFormOncology_1 Referral Form Unsuccessfully.", success = false });
        }

        //ggca_Dermatology_ReferralForm
        public ActionResult ggca_Dermatology_ReferralForm(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca Dermatology ReferralForm"));
            return RedirectToAction("DermatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 40 });
        }
        //lmfl dermatology form
        public ActionResult lmfl_dermatology_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl dermatology form"));
            return RedirectToAction("DermatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 41 });
        }
        //Dermatology................................

        public ActionResult DermatologyReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Dermatology Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 4;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormDermatologyViewModel refFormDermatologyViewModel = new RefFormDermatologyViewModel();

                //Set ReferralFormId
                refFormDermatologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormDermatologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormDermatologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormDermatologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormDermatologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormDermatologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormDermatologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormDermatologyViewModel.PhysicianFullName = physician.FullName;
                        refFormDermatologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormDermatologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormDermatologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormDermatologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormDermatologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormDermatologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormDermatologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormDermatology refFormDermatology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormDermatology = _unitOfWork.RefFormDermatology.GetSingle(t => t.RefFormDermatologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormDermatology == null) refFormDermatology = new RefFormDermatology();


                    refFormDermatologyViewModel.RefFormDermatologyId = refFormDermatology.RefFormDermatologyId;

                    //Form
                    //Add your code here.



                    refFormDermatologyViewModel.ChkBox_ShipToPatient = refFormDermatology.ChkBox_ShipToPatient ?? false;
                    refFormDermatologyViewModel.ChkBox_ShipToOffice = refFormDermatology.ChkBox_ShipToOffice ?? false;
                    refFormDermatologyViewModel.ChkBox_ShipToOther = refFormDermatology.ChkBox_ShipToOther ?? false;
                    refFormDermatologyViewModel.TxtBox_ShipToOther = refFormDermatology.TxtBox_ShipToOther;
                    refFormDermatologyViewModel.FormDate = refFormDermatology.FormDate;
                    refFormDermatologyViewModel.FormNeedsByDate = refFormDermatology.FormNeedsByDate;
                    refFormDermatologyViewModel.RefFormDermatologyId = refFormDermatology.RefFormDermatologyId;
                    refFormDermatologyViewModel.ChkBox_L40_8_Moderate_to_Severe_Plaque_Psoriasis = refFormDermatology.ChkBox_L40_8_Moderate_to_Severe_Plaque_Psoriasis ?? false;
                    refFormDermatologyViewModel.ChkBox_L40_50_Psoriatic_Arthritis = refFormDermatology.ChkBox_L40_50_Psoriatic_Arthritis ?? false;
                    refFormDermatologyViewModel.ChkBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage = refFormDermatology.ChkBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage ?? false;
                    refFormDermatologyViewModel.TxtBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage = refFormDermatology.TxtBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage;
                    refFormDermatologyViewModel.ChkBox_Other_Dx_code = refFormDermatology.ChkBox_Other_Dx_code ?? false;
                    refFormDermatologyViewModel.TxtBox_Other_Dx_code = refFormDermatology.TxtBox_Other_Dx_code;
                    refFormDermatologyViewModel.TxtBox_Condition = refFormDermatology.TxtBox_Condition;
                    refFormDermatologyViewModel.TxtBox_Drug_Allergies = refFormDermatology.TxtBox_Drug_Allergies;
                    refFormDermatologyViewModel.TxtBox_Location_BSA = refFormDermatology.TxtBox_Location_BSA;
                    refFormDermatologyViewModel.ChkBox_Hands = refFormDermatology.ChkBox_Hands ?? false;
                    refFormDermatologyViewModel.ChkBox_Feet = refFormDermatology.ChkBox_Feet ?? false;
                    refFormDermatologyViewModel.ChkBox_Scalp = refFormDermatology.ChkBox_Scalp ?? false;
                    refFormDermatologyViewModel.ChkBox_Groin = refFormDermatology.ChkBox_Groin ?? false;
                    refFormDermatologyViewModel.ChkBox_Nails = refFormDermatology.ChkBox_Nails ?? false;
                    refFormDermatologyViewModel.ChkBox_Other = refFormDermatology.ChkBox_Other ?? false;
                    refFormDermatologyViewModel.TxtBox_Other = refFormDermatology.TxtBox_Other;
                    refFormDermatologyViewModel.ChkBox_Biologics = refFormDermatology.ChkBox_Biologics ?? false;
                    refFormDermatologyViewModel.ChkBox_Cimzia = refFormDermatology.ChkBox_Cimzia ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx = refFormDermatology.ChkBox_Cosentyx ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel = refFormDermatology.ChkBox_Enbrel ?? false;
                    refFormDermatologyViewModel.ChkBox_Humira = refFormDermatology.ChkBox_Humira ?? false;
                    refFormDermatologyViewModel.ChkBox_Orencia = refFormDermatology.ChkBox_Orencia ?? false;
                    refFormDermatologyViewModel.ChkBox_Remicade = refFormDermatology.ChkBox_Remicade ?? false;
                    refFormDermatologyViewModel.ChkBox_Rituxan = refFormDermatology.ChkBox_Rituxan ?? false;
                    refFormDermatologyViewModel.ChkBox_Simponi = refFormDermatology.ChkBox_Simponi ?? false;
                    refFormDermatologyViewModel.ChkBox_Stelara = refFormDermatology.ChkBox_Stelara ?? false;
                    refFormDermatologyViewModel.ChkBox_MTX = refFormDermatology.ChkBox_MTX ?? false;
                    refFormDermatologyViewModel.ChkBox_Soriatane = refFormDermatology.ChkBox_Soriatane ?? false;
                    refFormDermatologyViewModel.ChkBox_CYA = refFormDermatology.ChkBox_CYA ?? false;
                    refFormDermatologyViewModel.TxtBox_CYA_Length_of_Treatment = refFormDermatology.TxtBox_CYA_Length_of_Treatment;
                    refFormDermatologyViewModel.TxtBox_CYA_Reason_for_Discontinuing = refFormDermatology.TxtBox_CYA_Reason_for_Discontinuing;
                    refFormDermatologyViewModel.ChkBox_PUVA_UVB = refFormDermatology.ChkBox_PUVA_UVB ?? false;
                    refFormDermatologyViewModel.TxtBox_PUVA_UVB_Length_of_Treatment = refFormDermatology.TxtBox_PUVA_UVB_Length_of_Treatment;
                    refFormDermatologyViewModel.TxtBox_PUVA_UVB_Reason_for_Discontinuing = refFormDermatology.TxtBox_PUVA_UVB_Reason_for_Discontinuing;
                    refFormDermatologyViewModel.ChkBox_Topicals = refFormDermatology.ChkBox_Topicals ?? false;
                    refFormDermatologyViewModel.TxtBox_Topicals_Length_of_Treatment = refFormDermatology.TxtBox_Topicals_Length_of_Treatment;
                    refFormDermatologyViewModel.TxtBox_Topicals_Inadequate_Response_List_Specific_Names = refFormDermatology.TxtBox_Topicals_Inadequate_Response_List_Specific_Names;
                    refFormDermatologyViewModel.ChkBox_Contraindicated = refFormDermatology.ChkBox_Contraindicated ?? false;
                    refFormDermatologyViewModel.TxtBox_Contraindicated_Medication = refFormDermatology.TxtBox_Contraindicated_Medication;
                    refFormDermatologyViewModel.TxtBox_Contraindicated_Reason = refFormDermatology.TxtBox_Contraindicated_Reason;
                    refFormDermatologyViewModel.ChkBox_Does_patient_have_a_latex_allergy = refFormDermatology.ChkBox_Does_patient_have_a_latex_allergy ?? false;
                    refFormDermatologyViewModel.ChkBox_TB_PPD_Test_given_or_intended_to_be_given_before_start = refFormDermatology.ChkBox_TB_PPD_Test_given_or_intended_to_be_given_before_start ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1 = refFormDermatology.ChkBox_Cosentyx_1 ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_300mg_2x150_Pen = refFormDermatology.ChkBox_Cosentyx_1_300mg_2x150_Pen ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_PFS = refFormDermatology.ChkBox_Cosentyx_1_PFS ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_150mg_Pen = refFormDermatology.ChkBox_Cosentyx_1_150mg_Pen ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_PFS_1 = refFormDermatology.ChkBox_Cosentyx_1_PFS_1 ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_Load_Inject = refFormDermatology.ChkBox_Cosentyx_1_Load_Inject ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_300mg = refFormDermatology.ChkBox_Cosentyx_1_300mg ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_150mg = refFormDermatology.ChkBox_Cosentyx_1_150mg ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_Maintenance_Inject = refFormDermatology.ChkBox_Cosentyx_1_Maintenance_Inject ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_300mg_1 = refFormDermatology.ChkBox_Cosentyx_1_300mg_1 ?? false;
                    refFormDermatologyViewModel.ChkBox_Cosentyx_1_150mg_1 = refFormDermatology.ChkBox_Cosentyx_1_150mg_1 ?? false;
                    refFormDermatologyViewModel.TxtBox_Cosentyx_1_Refills = refFormDermatology.TxtBox_Cosentyx_1_Refills;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1 = refFormDermatology.ChkBox_Enbrel_1 ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1_50mg_Sureclick = refFormDermatology.ChkBox_Enbrel_1_50mg_Sureclick ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1_50mg_Prefilled_Syringe = refFormDermatology.ChkBox_Enbrel_1_50mg_Prefilled_Syringe ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1_25mg_Prefilled_Syringe = refFormDermatology.ChkBox_Enbrel_1_25mg_Prefilled_Syringe ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1_25mg_Vials = refFormDermatology.ChkBox_Enbrel_1_25mg_Vials ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_TWICE_a_week_72_96_hours_apart = refFormDermatology.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_TWICE_a_week_72_96_hours_apart ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_ONCE_a_week = refFormDermatology.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_ONCE_a_week ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1_Inject_25mg_subcutaneously_TWICE_a_week_72_96_hours_apart = refFormDermatology.ChkBox_Enbrel_1_Inject_25mg_subcutaneously_TWICE_a_week_72_96_hours_apart ?? false;
                    refFormDermatologyViewModel.ChkBox_Enbrel_1_Inject_2_25mg_50mg_on_same_day_TWICE_a_week_72_96_hours_apart = refFormDermatology.ChkBox_Enbrel_1_Inject_2_25mg_50mg_on_same_day_TWICE_a_week_72_96_hours_apart ?? false;
                    refFormDermatologyViewModel.Enbrel_REFILLS_TxtBox = refFormDermatology.Enbrel_REFILLS_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Erivedge = refFormDermatology.ChkBox_Erivedge ?? false;
                    refFormDermatologyViewModel.ChkBox_Humaira = refFormDermatology.ChkBox_Humaira ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaPsoriasisStarterKit = refFormDermatology.ChkBox_HumairaPsoriasisStarterKit ?? false;
                    refFormDermatologyViewModel.ChkBox_Humaira40mgPen = refFormDermatology.ChkBox_Humaira40mgPen ?? false;
                    refFormDermatologyViewModel.ChkBox_Humaira40mgPrefilledSyringe = refFormDermatology.ChkBox_Humaira40mgPrefilledSyringe ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaInject2_40mg = refFormDermatology.ChkBox_HumairaInject2_40mg ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaInjectInject40mgsubcutaneouslyEVERY = refFormDermatology.ChkBox_HumairaInjectInject40mgsubcutaneouslyEVERY ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaInjectInject40mgsubcutaneouslyONCE = refFormDermatology.ChkBox_HumairaInjectInject40mgsubcutaneouslyONCE ?? false;
                    refFormDermatologyViewModel.Humaira_REFILLS_TxtBox = refFormDermatology.Humaira_REFILLS_TxtBox;
                    refFormDermatologyViewModel.ChkBox_HumairaHS = refFormDermatology.ChkBox_HumairaHS ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaHSPsoriasisStarterKit = refFormDermatology.ChkBox_HumairaHSPsoriasisStarterKit ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaHS40mgPen = refFormDermatology.ChkBox_HumairaHS40mgPen ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaHS40mgPrefilledSyringe = refFormDermatology.ChkBox_HumairaHS40mgPrefilledSyringe ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaHSFour40mg = refFormDermatology.ChkBox_HumairaHSFour40mg ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaHSTwo40mg = refFormDermatology.ChkBox_HumairaHSTwo40mg ?? false;
                    refFormDermatologyViewModel.ChkBox_HumairaHSWeek4plus = refFormDermatology.ChkBox_HumairaHSWeek4plus ?? false;
                    refFormDermatologyViewModel.HumairaHS_REFILLS_TxtBox = refFormDermatology.HumairaHS_REFILLS_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Odomzo = refFormDermatology.ChkBox_Odomzo ?? false;
                    refFormDermatologyViewModel.Odomzo_REFILLS_TxtBox = refFormDermatology.Odomzo_REFILLS_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Otezla = refFormDermatology.ChkBox_Otezla ?? false;
                    refFormDermatologyViewModel.ChkBox_OtezlaStarterPack = refFormDermatology.ChkBox_OtezlaStarterPack ?? false;
                    refFormDermatologyViewModel.ChkBox_Otezla30mgTablets = refFormDermatology.ChkBox_Otezla30mgTablets ?? false;
                    refFormDermatologyViewModel.ChkBox_OtezlaTitrateTake1tablet = refFormDermatology.ChkBox_OtezlaTitrateTake1tablet ?? false;
                    refFormDermatologyViewModel.OtezlaDate_TxtBox = refFormDermatology.OtezlaDate_TxtBox.HasValue ? refFormDermatology.OtezlaDate_TxtBox.Value : DateTime.UtcNow;
                    refFormDermatologyViewModel.ChkBox_OtezlaMaintenanceTake1tablet = refFormDermatology.ChkBox_OtezlaMaintenanceTake1tablet ?? false;
                    refFormDermatologyViewModel.ChkBox_OtezlaBridgeRxTake = refFormDermatology.ChkBox_OtezlaBridgeRxTake ?? false;
                    refFormDermatologyViewModel.Otezla_REFILLS_TxtBox = refFormDermatology.Otezla_REFILLS_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Remicade2 = refFormDermatology.ChkBox_Remicade2 ?? false;
                    refFormDermatologyViewModel.Remicade2_Wt_TxtBox = refFormDermatology.Remicade2_Wt_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Remicade100mgVial = refFormDermatology.ChkBox_Remicade100mgVial ?? false;
                    refFormDermatologyViewModel.ChkBox_Infuse1 = refFormDermatology.ChkBox_Infuse1 ?? false;
                    refFormDermatologyViewModel.Infuse1_TxtBox = refFormDermatology.Infuse1_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Infuse2 = refFormDermatology.ChkBox_Infuse2 ?? false;
                    refFormDermatologyViewModel.Infuse2_TxtBox2 = refFormDermatology.Infuse2_TxtBox2;
                    refFormDermatologyViewModel.Remicade2_Loadingdose_TxtBox = refFormDermatology.Remicade2_Loadingdose_TxtBox;
                    refFormDermatologyViewModel.Remicade2_REFILLS_TxtBox = refFormDermatology.Remicade2_REFILLS_TxtBox;
                    refFormDermatologyViewModel.Remicade2_Weeks_TxtBox = refFormDermatology.Remicade2_Weeks_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Simponi2 = refFormDermatology.ChkBox_Simponi2 ?? false;
                    refFormDermatologyViewModel.ChkBox_Simponi250mgSmartJect = refFormDermatology.ChkBox_Simponi250mgSmartJect ?? false;
                    refFormDermatologyViewModel.ChkBox_Simponi2PFS = refFormDermatology.ChkBox_Simponi2PFS ?? false;
                    refFormDermatologyViewModel.Simponi2_REFILLS_TxtBox = refFormDermatology.Simponi2_REFILLS_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Stelara2 = refFormDermatology.ChkBox_Stelara2 ?? false;
                    refFormDermatologyViewModel.Stelara2_Wt_TxtBox = refFormDermatology.Stelara2_Wt_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Stelara245mg = refFormDermatology.ChkBox_Stelara245mg ?? false;
                    refFormDermatologyViewModel.ChkBox_Stelara290mg = refFormDermatology.ChkBox_Stelara290mg ?? false;
                    refFormDermatologyViewModel.ChkBox_StelaraInject245mgonday = refFormDermatology.ChkBox_StelaraInject245mgonday ?? false;
                    refFormDermatologyViewModel.ChkBox_StelaraInject290mgonday = refFormDermatology.ChkBox_StelaraInject290mgonday ?? false;
                    refFormDermatologyViewModel.Stelara2_REFILLS_TxtBox1 = refFormDermatology.Stelara2_REFILLS_TxtBox1;
                    refFormDermatologyViewModel.Stelara2_REFILLS_TxtBox2 = refFormDermatology.Stelara2_REFILLS_TxtBox2;
                    refFormDermatologyViewModel.ChkBox_TaltzTM = refFormDermatology.ChkBox_TaltzTM ?? false;
                    refFormDermatologyViewModel.ChkBox_TaltzTM80mg_mL = refFormDermatology.ChkBox_TaltzTM80mg_mL ?? false;
                    refFormDermatologyViewModel.ChkBox_TaltzTM80mg_mLPrefilled = refFormDermatology.ChkBox_TaltzTM80mg_mLPrefilled ?? false;
                    refFormDermatologyViewModel.ChkBox_TaltzTM_LoadInject160mg = refFormDermatology.ChkBox_TaltzTM_LoadInject160mg ?? false;
                    refFormDermatologyViewModel.ChkBox_TaltzTM_MaintenanceDose = refFormDermatology.ChkBox_TaltzTM_MaintenanceDose ?? false;
                    refFormDermatologyViewModel.TaltzTM_TxtBox = refFormDermatology.TaltzTM_TxtBox;
                    refFormDermatologyViewModel.ChkBox_Others = refFormDermatology.ChkBox_Others ?? false;
                    refFormDermatologyViewModel.Others_TxtBox1 = refFormDermatology.Others_TxtBox1;
                    refFormDermatologyViewModel.Others_TxtBox2 = refFormDermatology.Others_TxtBox2;
                    refFormDermatologyViewModel.Others_Qty_TxtBox = refFormDermatology.Others_Qty_TxtBox;
                    refFormDermatologyViewModel.Others_Refills_TxtBox = refFormDermatology.Others_Refills_TxtBox;
                    refFormDermatologyViewModel.Erivedge_REFILLS_TxtBox = refFormDermatology.Erivedge_REFILLS_TxtBox;
                    refFormDermatologyViewModel.ChkBox_nola_L20_9AtopicDermatitis = refFormDermatology.ChkBox_nola_L20_9AtopicDermatitis ?? false;
                    refFormDermatologyViewModel.ChkBox_nola_Dupixent = refFormDermatology.ChkBox_nola_Dupixent ?? false;
                    refFormDermatologyViewModel.ChkBox_nola_Dupixent_300mg1 = refFormDermatology.ChkBox_nola_Dupixent_300mg1 ?? false;
                    refFormDermatologyViewModel.ChkBox_nola_Dupixent_300mg2 = refFormDermatology.ChkBox_nola_Dupixent_300mg2 ?? false;
                    refFormDermatologyViewModel.ChkBox_nola_Dupixent_Load = refFormDermatology.ChkBox_nola_Dupixent_Load ?? false;
                    refFormDermatologyViewModel.ChkBox_nola_Dupixent_Mantainance = refFormDermatology.ChkBox_nola_Dupixent_Mantainance ?? false;
                    refFormDermatologyViewModel.nola_Dupixent_Refills_TxtBox = refFormDermatology.nola_Dupixent_Refills_TxtBox;
                    refFormDermatologyViewModel.nola_Enbrel_wt_TxtBox = refFormDermatology.nola_Enbrel_wt_TxtBox;
                    refFormDermatologyViewModel.ChkBox_nola_inject_0_8mg = refFormDermatology.ChkBox_nola_inject_0_8mg ?? false;
                    refFormDermatologyViewModel.nola_inject_0_8mg_TxtBox = refFormDermatology.nola_inject_0_8mg_TxtBox;
                    refFormDermatologyViewModel.Date1 = refFormDermatology.Date1;
                    refFormDermatologyViewModel.Date2 = refFormDermatology.Date2;

                    refFormDermatologyViewModel.IsSignatured = refFormDermatology.IsSignatured ?? false;

                    return View(refFormDermatologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormDermatologyViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormDermatologyViewModel());
        }

        [HttpPost]
        public JsonResult DermatologyReferralForm(RefFormDermatologyViewModel refFormDermatologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormDermatologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormDermatology refFormDermatology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormDermatologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormDermatology = _unitOfWork.RefFormDermatology.GetSingle(t => t.RefFormDermatologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormDermatology == null)
                {
                    refFormDermatology = new RefFormDermatology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form


                refFormDermatology.ChkBox_ShipToPatient = refFormDermatologyViewModel.ChkBox_ShipToPatient ?? false;
                refFormDermatology.ChkBox_ShipToOffice = refFormDermatologyViewModel.ChkBox_ShipToOffice ?? false;
                refFormDermatology.ChkBox_ShipToOther = refFormDermatologyViewModel.ChkBox_ShipToOther ?? false;
                refFormDermatology.TxtBox_ShipToOther = refFormDermatologyViewModel.TxtBox_ShipToOther;
                refFormDermatology.FormDate = refFormDermatologyViewModel.FormDate;
                refFormDermatology.FormNeedsByDate = refFormDermatologyViewModel.FormNeedsByDate;
                refFormDermatology.RefFormDermatologyId = refFormDermatologyViewModel.RefFormDermatologyId;
                refFormDermatology.ChkBox_L40_8_Moderate_to_Severe_Plaque_Psoriasis = refFormDermatologyViewModel.ChkBox_L40_8_Moderate_to_Severe_Plaque_Psoriasis;
                refFormDermatology.ChkBox_L40_50_Psoriatic_Arthritis = refFormDermatologyViewModel.ChkBox_L40_50_Psoriatic_Arthritis;
                refFormDermatology.ChkBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage = refFormDermatologyViewModel.ChkBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage;
                refFormDermatology.TxtBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage = refFormDermatologyViewModel.TxtBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage;
                refFormDermatology.ChkBox_Other_Dx_code = refFormDermatologyViewModel.ChkBox_Other_Dx_code;
                refFormDermatology.TxtBox_Other_Dx_code = refFormDermatologyViewModel.TxtBox_Other_Dx_code;
                refFormDermatology.TxtBox_Condition = refFormDermatologyViewModel.TxtBox_Condition;
                refFormDermatology.TxtBox_Drug_Allergies = refFormDermatologyViewModel.TxtBox_Drug_Allergies;
                refFormDermatology.TxtBox_Location_BSA = refFormDermatologyViewModel.TxtBox_Location_BSA;
                refFormDermatology.ChkBox_Hands = refFormDermatologyViewModel.ChkBox_Hands;
                refFormDermatology.ChkBox_Feet = refFormDermatologyViewModel.ChkBox_Feet;
                refFormDermatology.ChkBox_Scalp = refFormDermatologyViewModel.ChkBox_Scalp;
                refFormDermatology.ChkBox_Groin = refFormDermatologyViewModel.ChkBox_Groin;
                refFormDermatology.ChkBox_Nails = refFormDermatologyViewModel.ChkBox_Nails;
                refFormDermatology.ChkBox_Other = refFormDermatologyViewModel.ChkBox_Other;
                refFormDermatology.TxtBox_Other = refFormDermatologyViewModel.TxtBox_Other;
                refFormDermatology.ChkBox_Biologics = refFormDermatologyViewModel.ChkBox_Biologics;
                refFormDermatology.ChkBox_Cimzia = refFormDermatologyViewModel.ChkBox_Cimzia;
                refFormDermatology.ChkBox_Cosentyx = refFormDermatologyViewModel.ChkBox_Cosentyx;
                refFormDermatology.ChkBox_Enbrel = refFormDermatologyViewModel.ChkBox_Enbrel;
                refFormDermatology.ChkBox_Humira = refFormDermatologyViewModel.ChkBox_Humira;
                refFormDermatology.ChkBox_Orencia = refFormDermatologyViewModel.ChkBox_Orencia;
                refFormDermatology.ChkBox_Remicade = refFormDermatologyViewModel.ChkBox_Remicade;
                refFormDermatology.ChkBox_Rituxan = refFormDermatologyViewModel.ChkBox_Rituxan;
                refFormDermatology.ChkBox_Simponi = refFormDermatologyViewModel.ChkBox_Simponi;
                refFormDermatology.ChkBox_Stelara = refFormDermatologyViewModel.ChkBox_Stelara;
                refFormDermatology.ChkBox_MTX = refFormDermatologyViewModel.ChkBox_MTX;
                refFormDermatology.ChkBox_Soriatane = refFormDermatologyViewModel.ChkBox_Soriatane;
                refFormDermatology.ChkBox_CYA = refFormDermatologyViewModel.ChkBox_CYA;
                refFormDermatology.TxtBox_CYA_Length_of_Treatment = refFormDermatologyViewModel.TxtBox_CYA_Length_of_Treatment;
                refFormDermatology.TxtBox_CYA_Reason_for_Discontinuing = refFormDermatologyViewModel.TxtBox_CYA_Reason_for_Discontinuing;
                refFormDermatology.ChkBox_PUVA_UVB = refFormDermatologyViewModel.ChkBox_PUVA_UVB;
                refFormDermatology.TxtBox_PUVA_UVB_Length_of_Treatment = refFormDermatologyViewModel.TxtBox_PUVA_UVB_Length_of_Treatment;
                refFormDermatology.TxtBox_PUVA_UVB_Reason_for_Discontinuing = refFormDermatologyViewModel.TxtBox_PUVA_UVB_Reason_for_Discontinuing;
                refFormDermatology.ChkBox_Topicals = refFormDermatologyViewModel.ChkBox_Topicals;
                refFormDermatology.TxtBox_Topicals_Length_of_Treatment = refFormDermatologyViewModel.TxtBox_Topicals_Length_of_Treatment;
                refFormDermatology.TxtBox_Topicals_Inadequate_Response_List_Specific_Names = refFormDermatologyViewModel.TxtBox_Topicals_Inadequate_Response_List_Specific_Names;
                refFormDermatology.ChkBox_Contraindicated = refFormDermatologyViewModel.ChkBox_Contraindicated;
                refFormDermatology.TxtBox_Contraindicated_Medication = refFormDermatologyViewModel.TxtBox_Contraindicated_Medication;
                refFormDermatology.TxtBox_Contraindicated_Reason = refFormDermatologyViewModel.TxtBox_Contraindicated_Reason;
                refFormDermatology.ChkBox_Does_patient_have_a_latex_allergy = refFormDermatologyViewModel.ChkBox_Does_patient_have_a_latex_allergy;
                refFormDermatology.ChkBox_TB_PPD_Test_given_or_intended_to_be_given_before_start = refFormDermatologyViewModel.ChkBox_TB_PPD_Test_given_or_intended_to_be_given_before_start;
                refFormDermatology.ChkBox_Cosentyx_1 = refFormDermatologyViewModel.ChkBox_Cosentyx_1;
                refFormDermatology.ChkBox_Cosentyx_1_300mg_2x150_Pen = refFormDermatologyViewModel.ChkBox_Cosentyx_1_300mg_2x150_Pen;
                refFormDermatology.ChkBox_Cosentyx_1_PFS = refFormDermatologyViewModel.ChkBox_Cosentyx_1_PFS;
                refFormDermatology.ChkBox_Cosentyx_1_150mg_Pen = refFormDermatologyViewModel.ChkBox_Cosentyx_1_150mg_Pen;
                refFormDermatology.ChkBox_Cosentyx_1_PFS_1 = refFormDermatologyViewModel.ChkBox_Cosentyx_1_PFS_1;
                refFormDermatology.ChkBox_Cosentyx_1_Load_Inject = refFormDermatologyViewModel.ChkBox_Cosentyx_1_Load_Inject;
                refFormDermatology.ChkBox_Cosentyx_1_300mg = refFormDermatologyViewModel.ChkBox_Cosentyx_1_300mg;
                refFormDermatology.ChkBox_Cosentyx_1_150mg = refFormDermatologyViewModel.ChkBox_Cosentyx_1_150mg;
                refFormDermatology.ChkBox_Cosentyx_1_Maintenance_Inject = refFormDermatologyViewModel.ChkBox_Cosentyx_1_Maintenance_Inject;
                refFormDermatology.ChkBox_Cosentyx_1_300mg_1 = refFormDermatologyViewModel.ChkBox_Cosentyx_1_300mg_1;
                refFormDermatology.ChkBox_Cosentyx_1_150mg_1 = refFormDermatologyViewModel.ChkBox_Cosentyx_1_150mg_1;
                refFormDermatology.TxtBox_Cosentyx_1_Refills = refFormDermatologyViewModel.TxtBox_Cosentyx_1_Refills;
                refFormDermatology.ChkBox_Enbrel_1 = refFormDermatologyViewModel.ChkBox_Enbrel_1;
                refFormDermatology.ChkBox_Enbrel_1_50mg_Sureclick = refFormDermatologyViewModel.ChkBox_Enbrel_1_50mg_Sureclick;
                refFormDermatology.ChkBox_Enbrel_1_50mg_Prefilled_Syringe = refFormDermatologyViewModel.ChkBox_Enbrel_1_50mg_Prefilled_Syringe;
                refFormDermatology.ChkBox_Enbrel_1_25mg_Prefilled_Syringe = refFormDermatologyViewModel.ChkBox_Enbrel_1_25mg_Prefilled_Syringe;
                refFormDermatology.ChkBox_Enbrel_1_25mg_Vials = refFormDermatologyViewModel.ChkBox_Enbrel_1_25mg_Vials;
                refFormDermatology.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_TWICE_a_week_72_96_hours_apart = refFormDermatologyViewModel.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_TWICE_a_week_72_96_hours_apart;
                refFormDermatology.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_ONCE_a_week = refFormDermatologyViewModel.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_ONCE_a_week;
                refFormDermatology.ChkBox_Enbrel_1_Inject_25mg_subcutaneously_TWICE_a_week_72_96_hours_apart = refFormDermatologyViewModel.ChkBox_Enbrel_1_Inject_25mg_subcutaneously_TWICE_a_week_72_96_hours_apart;
                refFormDermatology.ChkBox_Enbrel_1_Inject_2_25mg_50mg_on_same_day_TWICE_a_week_72_96_hours_apart = refFormDermatologyViewModel.ChkBox_Enbrel_1_Inject_2_25mg_50mg_on_same_day_TWICE_a_week_72_96_hours_apart;
                refFormDermatology.Enbrel_REFILLS_TxtBox = refFormDermatologyViewModel.Enbrel_REFILLS_TxtBox;
                refFormDermatology.ChkBox_Erivedge = refFormDermatologyViewModel.ChkBox_Erivedge;
                refFormDermatology.ChkBox_Humaira = refFormDermatologyViewModel.ChkBox_Humaira;
                refFormDermatology.ChkBox_HumairaPsoriasisStarterKit = refFormDermatologyViewModel.ChkBox_HumairaPsoriasisStarterKit;
                refFormDermatology.ChkBox_Humaira40mgPen = refFormDermatologyViewModel.ChkBox_Humaira40mgPen;
                refFormDermatology.ChkBox_Humaira40mgPrefilledSyringe = refFormDermatologyViewModel.ChkBox_Humaira40mgPrefilledSyringe;
                refFormDermatology.ChkBox_HumairaInject2_40mg = refFormDermatologyViewModel.ChkBox_HumairaInject2_40mg;
                refFormDermatology.ChkBox_HumairaInjectInject40mgsubcutaneouslyEVERY = refFormDermatologyViewModel.ChkBox_HumairaInjectInject40mgsubcutaneouslyEVERY;
                refFormDermatology.ChkBox_HumairaInjectInject40mgsubcutaneouslyONCE = refFormDermatologyViewModel.ChkBox_HumairaInjectInject40mgsubcutaneouslyONCE;
                refFormDermatology.Humaira_REFILLS_TxtBox = refFormDermatologyViewModel.Humaira_REFILLS_TxtBox;
                refFormDermatology.ChkBox_HumairaHS = refFormDermatologyViewModel.ChkBox_HumairaHS;
                refFormDermatology.ChkBox_HumairaHSPsoriasisStarterKit = refFormDermatologyViewModel.ChkBox_HumairaHSPsoriasisStarterKit;
                refFormDermatology.ChkBox_HumairaHS40mgPen = refFormDermatologyViewModel.ChkBox_HumairaHS40mgPen;
                refFormDermatology.ChkBox_HumairaHS40mgPrefilledSyringe = refFormDermatologyViewModel.ChkBox_HumairaHS40mgPrefilledSyringe;
                refFormDermatology.ChkBox_HumairaHSFour40mg = refFormDermatologyViewModel.ChkBox_HumairaHSFour40mg;
                refFormDermatology.ChkBox_HumairaHSTwo40mg = refFormDermatologyViewModel.ChkBox_HumairaHSTwo40mg;
                refFormDermatology.ChkBox_HumairaHSWeek4plus = refFormDermatologyViewModel.ChkBox_HumairaHSWeek4plus;
                refFormDermatology.HumairaHS_REFILLS_TxtBox = refFormDermatologyViewModel.HumairaHS_REFILLS_TxtBox;
                refFormDermatology.ChkBox_Odomzo = refFormDermatologyViewModel.ChkBox_Odomzo;
                refFormDermatology.Odomzo_REFILLS_TxtBox = refFormDermatologyViewModel.Odomzo_REFILLS_TxtBox;
                refFormDermatology.ChkBox_Otezla = refFormDermatologyViewModel.ChkBox_Otezla;
                refFormDermatology.ChkBox_OtezlaStarterPack = refFormDermatologyViewModel.ChkBox_OtezlaStarterPack;
                refFormDermatology.ChkBox_Otezla30mgTablets = refFormDermatologyViewModel.ChkBox_Otezla30mgTablets;
                refFormDermatology.ChkBox_OtezlaTitrateTake1tablet = refFormDermatologyViewModel.ChkBox_OtezlaTitrateTake1tablet;
                refFormDermatology.OtezlaDate_TxtBox = refFormDermatologyViewModel.OtezlaDate_TxtBox;
                refFormDermatology.ChkBox_OtezlaMaintenanceTake1tablet = refFormDermatologyViewModel.ChkBox_OtezlaMaintenanceTake1tablet;
                refFormDermatology.ChkBox_OtezlaBridgeRxTake = refFormDermatologyViewModel.ChkBox_OtezlaBridgeRxTake;
                refFormDermatology.Otezla_REFILLS_TxtBox = refFormDermatologyViewModel.Otezla_REFILLS_TxtBox;
                refFormDermatology.ChkBox_Remicade2 = refFormDermatologyViewModel.ChkBox_Remicade2;
                refFormDermatology.Remicade2_Wt_TxtBox = refFormDermatologyViewModel.Remicade2_Wt_TxtBox;
                refFormDermatology.ChkBox_Remicade100mgVial = refFormDermatologyViewModel.ChkBox_Remicade100mgVial;
                refFormDermatology.ChkBox_Infuse1 = refFormDermatologyViewModel.ChkBox_Infuse1;
                refFormDermatology.Infuse1_TxtBox = refFormDermatologyViewModel.Infuse1_TxtBox;
                refFormDermatology.ChkBox_Infuse2 = refFormDermatologyViewModel.ChkBox_Infuse2;
                refFormDermatology.Infuse2_TxtBox2 = refFormDermatologyViewModel.Infuse2_TxtBox2;
                refFormDermatology.Remicade2_Loadingdose_TxtBox = refFormDermatologyViewModel.Remicade2_Loadingdose_TxtBox;
                refFormDermatology.Remicade2_REFILLS_TxtBox = refFormDermatologyViewModel.Remicade2_REFILLS_TxtBox;
                refFormDermatology.Remicade2_Weeks_TxtBox = refFormDermatologyViewModel.Remicade2_Weeks_TxtBox;
                refFormDermatology.ChkBox_Simponi2 = refFormDermatologyViewModel.ChkBox_Simponi2;
                refFormDermatology.ChkBox_Simponi250mgSmartJect = refFormDermatologyViewModel.ChkBox_Simponi250mgSmartJect;
                refFormDermatology.ChkBox_Simponi2PFS = refFormDermatologyViewModel.ChkBox_Simponi2PFS;
                refFormDermatology.Simponi2_REFILLS_TxtBox = refFormDermatologyViewModel.Simponi2_REFILLS_TxtBox;
                refFormDermatology.ChkBox_Stelara2 = refFormDermatologyViewModel.ChkBox_Stelara2;
                refFormDermatology.Stelara2_Wt_TxtBox = refFormDermatologyViewModel.Stelara2_Wt_TxtBox;
                refFormDermatology.ChkBox_Stelara245mg = refFormDermatologyViewModel.ChkBox_Stelara245mg;
                refFormDermatology.ChkBox_Stelara290mg = refFormDermatologyViewModel.ChkBox_Stelara290mg;
                refFormDermatology.ChkBox_StelaraInject245mgonday = refFormDermatologyViewModel.ChkBox_StelaraInject245mgonday;
                refFormDermatology.ChkBox_StelaraInject290mgonday = refFormDermatologyViewModel.ChkBox_StelaraInject290mgonday;
                refFormDermatology.Stelara2_REFILLS_TxtBox1 = refFormDermatologyViewModel.Stelara2_REFILLS_TxtBox1;
                refFormDermatology.Stelara2_REFILLS_TxtBox2 = refFormDermatologyViewModel.Stelara2_REFILLS_TxtBox2;
                refFormDermatology.ChkBox_TaltzTM = refFormDermatologyViewModel.ChkBox_TaltzTM;
                refFormDermatology.ChkBox_TaltzTM80mg_mL = refFormDermatologyViewModel.ChkBox_TaltzTM80mg_mL;
                refFormDermatology.ChkBox_TaltzTM80mg_mLPrefilled = refFormDermatologyViewModel.ChkBox_TaltzTM80mg_mLPrefilled;
                refFormDermatology.ChkBox_TaltzTM_LoadInject160mg = refFormDermatologyViewModel.ChkBox_TaltzTM_LoadInject160mg;
                refFormDermatology.ChkBox_TaltzTM_MaintenanceDose = refFormDermatologyViewModel.ChkBox_TaltzTM_MaintenanceDose;
                refFormDermatology.TaltzTM_TxtBox = refFormDermatologyViewModel.TaltzTM_TxtBox;
                refFormDermatology.ChkBox_Others = refFormDermatologyViewModel.ChkBox_Others;
                refFormDermatology.Others_TxtBox1 = refFormDermatologyViewModel.Others_TxtBox1;
                refFormDermatology.Others_TxtBox2 = refFormDermatologyViewModel.Others_TxtBox2;
                refFormDermatology.Others_Qty_TxtBox = refFormDermatologyViewModel.Others_Qty_TxtBox;
                refFormDermatology.Others_Refills_TxtBox = refFormDermatologyViewModel.Others_Refills_TxtBox;
                refFormDermatology.Erivedge_REFILLS_TxtBox = refFormDermatologyViewModel.Erivedge_REFILLS_TxtBox;
                refFormDermatology.ChkBox_nola_L20_9AtopicDermatitis = refFormDermatologyViewModel.ChkBox_nola_L20_9AtopicDermatitis;
                refFormDermatology.ChkBox_nola_Dupixent = refFormDermatologyViewModel.ChkBox_nola_Dupixent;
                refFormDermatology.ChkBox_nola_Dupixent_300mg1 = refFormDermatologyViewModel.ChkBox_nola_Dupixent_300mg1;
                refFormDermatology.ChkBox_nola_Dupixent_300mg2 = refFormDermatologyViewModel.ChkBox_nola_Dupixent_300mg2;
                refFormDermatology.ChkBox_nola_Dupixent_Load = refFormDermatologyViewModel.ChkBox_nola_Dupixent_Load;
                refFormDermatology.ChkBox_nola_Dupixent_Mantainance = refFormDermatologyViewModel.ChkBox_nola_Dupixent_Mantainance;
                refFormDermatology.nola_Dupixent_Refills_TxtBox = refFormDermatologyViewModel.nola_Dupixent_Refills_TxtBox;
                refFormDermatology.nola_Enbrel_wt_TxtBox = refFormDermatologyViewModel.nola_Enbrel_wt_TxtBox;
                refFormDermatology.ChkBox_nola_inject_0_8mg = refFormDermatologyViewModel.ChkBox_nola_inject_0_8mg;
                refFormDermatology.nola_inject_0_8mg_TxtBox = refFormDermatologyViewModel.nola_inject_0_8mg_TxtBox;
                refFormDermatology.Date1 = refFormDermatologyViewModel.Date1;
                refFormDermatology.Date2 = refFormDermatologyViewModel.Date2;

                refFormDermatology.ModifiedBy = CurrentUser.UserId;
                refFormDermatology.ModifiedOn = DateTime.UtcNow;

                refFormDermatology.IsSignatured = refFormDermatologyViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormDermatology.Update(refFormDermatology);
                    AuditLogger.AuditTracker("Edit DermatologyReferralForm", "A DermatologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;


                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormDermatology.CreatedBy = CurrentUser.UserId;
                    refFormDermatology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormDermatology.Insert(refFormDermatology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New DermatologyReferralForm", "A new DermatologyReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormDermatologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormDermatology.RefFormDermatologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    // check if this PhysicianPortalPatientId have 
                    //  physicianPortalPatient_ReferralForm_Relationship.IsSubmitted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save RefFormDermatology Referral Form Successfully.", success = true, referralFormId = referralFormId, refFormDermatologyId = refFormDermatology.RefFormDermatologyId, physicianPortalPatientId = refFormDermatologyViewModel.PhysicianPortalPatientId });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method RefFormDermatology PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save RefFormDermatology Referral Form Unsuccessfully.", success = false });
        }

        public ActionResult nola_Dermatology_ReferralForm(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola Dermatology Referral Form"));
            return RedirectToAction("DermatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 26 });
        }
        public ActionResult ofl_Dermatology_ReferralForm(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl Dermatology Referral Form"));
            return RedirectToAction("DermatologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 27 });
        }

        //Transplant1................................
        public ActionResult TransplantReferralForm_1(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("transplant-referral-form (1)"));
                    referralFormId = referralForm?.ReferralFormId ?? 21;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormTransplant1ViewModel refFormTransplant1ViewModel = new RefFormTransplant1ViewModel();

                //Set ReferralFormId
                refFormTransplant1ViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormTransplant1ViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormTransplant1ViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormTransplant1ViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormTransplant1ViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormTransplant1ViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormTransplant1ViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormTransplant1ViewModel.PhysicianFullName = physician.FullName;
                        refFormTransplant1ViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormTransplant1ViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormTransplant1ViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormTransplant1ViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormTransplant1ViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormTransplant1ViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormTransplant1ViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormTransplant1 refFormTransplant = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormTransplant = _unitOfWork.RefFormTransplant1.GetSingle(t => t.RefFormTransplantId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormTransplant == null) refFormTransplant = new RefFormTransplant1();


                    refFormTransplant1ViewModel.RefFormTransplantId = refFormTransplant.RefFormTransplantId;

                    //Form
                    //Add your code here.




                    refFormTransplant1ViewModel.RefFormTransplantId = refFormTransplant.RefFormTransplantId;

                    refFormTransplant1ViewModel.FormDate = refFormTransplant.FormDate;
                    refFormTransplant1ViewModel.FormNeedsByDate = refFormTransplant.FormNeedsByDate;
                    refFormTransplant1ViewModel.ChkBox_Z94_0KidneyTransplant = refFormTransplant.ChkBox_Z94_0KidneyTransplant ?? false;
                    refFormTransplant1ViewModel.ChkBox_Z94_1HeartTransplant = refFormTransplant.ChkBox_Z94_1HeartTransplant ?? false;
                    refFormTransplant1ViewModel.ChkBox_Other = refFormTransplant.ChkBox_Other ?? false;
                    refFormTransplant1ViewModel.Other_TxtBox = refFormTransplant.Other_TxtBox;

                    refFormTransplant1ViewModel.ChkBox_Demographics = refFormTransplant.ChkBox_Demographics ?? false;
                    refFormTransplant1ViewModel.ChkBox_HandP = refFormTransplant.ChkBox_HandP ?? false;
                    refFormTransplant1ViewModel.ChkBox_PhysicianOrders = refFormTransplant.ChkBox_PhysicianOrders ?? false;
                    refFormTransplant1ViewModel.ChkBox_InsuranceInformation = refFormTransplant.ChkBox_InsuranceInformation ?? false;
                    refFormTransplant1ViewModel.ChkBox_Labs = refFormTransplant.ChkBox_Labs ?? false;
                    refFormTransplant1ViewModel.Diphenhydramine_TxtBox = refFormTransplant.Diphenhydramine_TxtBox;
                    refFormTransplant1ViewModel.Acetaminophen_TxtBox = refFormTransplant.Acetaminophen_TxtBox;
                    refFormTransplant1ViewModel.Prednisone_TxtBox = refFormTransplant.Prednisone_TxtBox;
                    refFormTransplant1ViewModel.OtherMeds_TxtBox = refFormTransplant.OtherMeds_TxtBox;
                    refFormTransplant1ViewModel.InfuseIVIG_TxtBox = refFormTransplant.InfuseIVIG_TxtBox;
                    refFormTransplant1ViewModel.gramsor_TxtBox = refFormTransplant.gramsor_TxtBox;
                    refFormTransplant1ViewModel.gm_kgIVover_TxtBox = refFormTransplant.gm_kgIVover_TxtBox;
                    refFormTransplant1ViewModel.Frequency_TxtBox = refFormTransplant.Frequency_TxtBox;
                    refFormTransplant1ViewModel.Duration_TxtBox = refFormTransplant.Duration_TxtBox;
                    refFormTransplant1ViewModel.ChkBox_PharmacytoSelect = refFormTransplant.ChkBox_PharmacytoSelect ?? false;
                    refFormTransplant1ViewModel.ChkBox_NoIVIGRequested = refFormTransplant.ChkBox_NoIVIGRequested ?? false;
                    refFormTransplant1ViewModel.ChkBox_patientisgreater = refFormTransplant.ChkBox_patientisgreater ?? false;
                    refFormTransplant1ViewModel.ChkBox_patientisless = refFormTransplant.ChkBox_patientisless ?? false;
                    refFormTransplant1ViewModel.patientisgreater_TxtBox = refFormTransplant.patientisgreater_TxtBox;
                    refFormTransplant1ViewModel.patientisless_TxtBox = refFormTransplant.patientisless_TxtBox;
                    refFormTransplant1ViewModel.Hours_TxtBox = refFormTransplant.Hours_TxtBox != null ? refFormTransplant.Hours_TxtBox.Value : 0D;
                    refFormTransplant1ViewModel.ChkBox_Over = refFormTransplant.ChkBox_Over ?? false;
                    refFormTransplant1ViewModel.ChkBox_Initialrateof50mg_hr = refFormTransplant.ChkBox_Initialrateof50mg_hr ?? false;
                    refFormTransplant1ViewModel.ChkBox_NormalSaline = refFormTransplant.ChkBox_NormalSaline ?? false;
                    refFormTransplant1ViewModel.ChkBox_D5W = refFormTransplant.ChkBox_D5W ?? false;
                    refFormTransplant1ViewModel.ChkBox_1mg_ml = refFormTransplant.ChkBox_1mg_ml ?? false;
                    refFormTransplant1ViewModel.ChkBox_2mg_ml = refFormTransplant.ChkBox_2mg_ml ?? false;
                    refFormTransplant1ViewModel.ChkBox_4mg_ml = refFormTransplant.ChkBox_4mg_ml ?? false;
                    refFormTransplant1ViewModel.ChkBox_NoRituxanRequested = refFormTransplant.ChkBox_NoRituxanRequested ?? false;
                    refFormTransplant1ViewModel.ChkBox_BUN = refFormTransplant.ChkBox_BUN ?? false;
                    refFormTransplant1ViewModel.ChkBox_Priortofirstinfusion1 = refFormTransplant.ChkBox_Priortofirstinfusion1 ?? false;
                    refFormTransplant1ViewModel.ChkBox_After1 = refFormTransplant.ChkBox_After1 ?? false;
                    refFormTransplant1ViewModel.ChkBox_Others = refFormTransplant.ChkBox_Others ?? false;
                    refFormTransplant1ViewModel.ChkBox_Priortofirstinfusion2 = refFormTransplant.ChkBox_Priortofirstinfusion2 ?? false;
                    refFormTransplant1ViewModel.ChkBox_After2 = refFormTransplant.ChkBox_After2 ?? false;
                    refFormTransplant1ViewModel.PhysicianName_TxtBox = refFormTransplant.PhysicianName_TxtBox;
                    refFormTransplant1ViewModel.License_TxtBox = refFormTransplant.License_TxtBox;
                    refFormTransplant1ViewModel.Address_TxtBox = refFormTransplant.Address_TxtBox;
                    refFormTransplant1ViewModel.DEA_TxtBox = refFormTransplant.DEA_TxtBox;
                    refFormTransplant1ViewModel.City_TxtBox = refFormTransplant.City_TxtBox;
                    refFormTransplant1ViewModel.NPI_TxtBox = refFormTransplant.NPI_TxtBox;
                    refFormTransplant1ViewModel.Phone_TxtBox = refFormTransplant.Phone_TxtBox;
                    refFormTransplant1ViewModel.Fax_TxtBox = refFormTransplant.Fax_TxtBox;
                    refFormTransplant1ViewModel.OfficeContact_TxtBox = refFormTransplant.OfficeContact_TxtBox;
                    refFormTransplant1ViewModel.ChkBox_LungTransplant = refFormTransplant.ChkBox_LungTransplant ?? false;
                    refFormTransplant1ViewModel.Others_TxtBox = refFormTransplant.Others_TxtBox;
                    refFormTransplant1ViewModel.After_TxtBox1 = refFormTransplant.After_TxtBox1;
                    refFormTransplant1ViewModel.After_TxtBox2 = refFormTransplant.After_TxtBox2;
                    refFormTransplant1ViewModel.ZIP_TxtBox = refFormTransplant.ZIP_TxtBox;
                    refFormTransplant1ViewModel.State_TxtBox = refFormTransplant.State_TxtBox;
                    refFormTransplant1ViewModel.ChkBox_V42_0KidneyTransplant = refFormTransplant.ChkBox_V42_0KidneyTransplant ?? false;
                    refFormTransplant1ViewModel.ChkBox_V42_1HeartTransplant = refFormTransplant.ChkBox_V42_1HeartTransplant ?? false;
                    refFormTransplant1ViewModel.ChkBox_V42_6LungTransplant = refFormTransplant.ChkBox_V42_6LungTransplant ?? false;






                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormTransplant1ViewModel.IsSignatured = refFormTransplant.IsSignatured ?? false;

                    return View(refFormTransplant1ViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method refFormTransplant1ViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormTransplant1ViewModel());
        }

        [HttpPost]
        public JsonResult TransplantReferralForm_1(RefFormTransplant1ViewModel refFormTransplant1ViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormTransplant1ViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormTransplant1 refFormTransplant = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormTransplant1ViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormTransplant = _unitOfWork.RefFormTransplant1.GetSingle(t => t.RefFormTransplantId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormTransplant == null)
                {
                    refFormTransplant = new RefFormTransplant1();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form



                refFormTransplant.RefFormTransplantId = refFormTransplant1ViewModel.RefFormTransplantId;
                refFormTransplant.FormDate = refFormTransplant1ViewModel.FormDate;
                refFormTransplant.FormNeedsByDate = refFormTransplant1ViewModel.FormNeedsByDate;
                refFormTransplant.ChkBox_Z94_0KidneyTransplant = refFormTransplant1ViewModel.ChkBox_Z94_0KidneyTransplant;
                refFormTransplant.ChkBox_Z94_1HeartTransplant = refFormTransplant1ViewModel.ChkBox_Z94_1HeartTransplant;
                refFormTransplant.ChkBox_Other = refFormTransplant1ViewModel.ChkBox_Other;
                refFormTransplant.Other_TxtBox = refFormTransplant1ViewModel.Other_TxtBox;
                refFormTransplant.ChkBox_Demographics = refFormTransplant1ViewModel.ChkBox_Demographics;
                refFormTransplant.ChkBox_HandP = refFormTransplant1ViewModel.ChkBox_HandP;
                refFormTransplant.ChkBox_PhysicianOrders = refFormTransplant1ViewModel.ChkBox_PhysicianOrders;
                refFormTransplant.ChkBox_InsuranceInformation = refFormTransplant1ViewModel.ChkBox_InsuranceInformation;
                refFormTransplant.ChkBox_Labs = refFormTransplant1ViewModel.ChkBox_Labs;
                refFormTransplant.Diphenhydramine_TxtBox = refFormTransplant1ViewModel.Diphenhydramine_TxtBox;
                refFormTransplant.Acetaminophen_TxtBox = refFormTransplant1ViewModel.Acetaminophen_TxtBox;
                refFormTransplant.Prednisone_TxtBox = refFormTransplant1ViewModel.Prednisone_TxtBox;
                refFormTransplant.OtherMeds_TxtBox = refFormTransplant1ViewModel.OtherMeds_TxtBox;
                refFormTransplant.InfuseIVIG_TxtBox = refFormTransplant1ViewModel.InfuseIVIG_TxtBox;
                refFormTransplant.gramsor_TxtBox = refFormTransplant1ViewModel.gramsor_TxtBox;
                refFormTransplant.gm_kgIVover_TxtBox = refFormTransplant1ViewModel.gm_kgIVover_TxtBox;
                refFormTransplant.Frequency_TxtBox = refFormTransplant1ViewModel.Frequency_TxtBox;
                refFormTransplant.Duration_TxtBox = refFormTransplant1ViewModel.Duration_TxtBox;
                refFormTransplant.ChkBox_PharmacytoSelect = refFormTransplant1ViewModel.ChkBox_PharmacytoSelect;
                refFormTransplant.ChkBox_NoIVIGRequested = refFormTransplant1ViewModel.ChkBox_NoIVIGRequested;
                refFormTransplant.ChkBox_patientisgreater = refFormTransplant1ViewModel.ChkBox_patientisgreater;
                refFormTransplant.ChkBox_patientisless = refFormTransplant1ViewModel.ChkBox_patientisless;
                refFormTransplant.patientisgreater_TxtBox = refFormTransplant1ViewModel.patientisgreater_TxtBox;
                refFormTransplant.patientisless_TxtBox = refFormTransplant1ViewModel.patientisless_TxtBox;
                refFormTransplant.Hours_TxtBox = refFormTransplant1ViewModel.Hours_TxtBox;
                refFormTransplant.ChkBox_Over = refFormTransplant1ViewModel.ChkBox_Over;
                refFormTransplant.ChkBox_Initialrateof50mg_hr = refFormTransplant1ViewModel.ChkBox_Initialrateof50mg_hr;
                refFormTransplant.ChkBox_NormalSaline = refFormTransplant1ViewModel.ChkBox_NormalSaline;
                refFormTransplant.ChkBox_D5W = refFormTransplant1ViewModel.ChkBox_D5W;
                refFormTransplant.ChkBox_1mg_ml = refFormTransplant1ViewModel.ChkBox_1mg_ml;
                refFormTransplant.ChkBox_2mg_ml = refFormTransplant1ViewModel.ChkBox_2mg_ml;
                refFormTransplant.ChkBox_4mg_ml = refFormTransplant1ViewModel.ChkBox_4mg_ml;
                refFormTransplant.ChkBox_NoRituxanRequested = refFormTransplant1ViewModel.ChkBox_NoRituxanRequested;
                refFormTransplant.ChkBox_BUN = refFormTransplant1ViewModel.ChkBox_BUN;
                refFormTransplant.ChkBox_Priortofirstinfusion1 = refFormTransplant1ViewModel.ChkBox_Priortofirstinfusion1;
                refFormTransplant.ChkBox_After1 = refFormTransplant1ViewModel.ChkBox_After1;
                refFormTransplant.ChkBox_Others = refFormTransplant1ViewModel.ChkBox_Others;
                refFormTransplant.ChkBox_Priortofirstinfusion2 = refFormTransplant1ViewModel.ChkBox_Priortofirstinfusion2;
                refFormTransplant.ChkBox_After2 = refFormTransplant1ViewModel.ChkBox_After2;
                refFormTransplant.PhysicianName_TxtBox = refFormTransplant1ViewModel.PhysicianName_TxtBox;
                refFormTransplant.License_TxtBox = refFormTransplant1ViewModel.License_TxtBox;
                refFormTransplant.Address_TxtBox = refFormTransplant1ViewModel.Address_TxtBox;
                refFormTransplant.DEA_TxtBox = refFormTransplant1ViewModel.DEA_TxtBox;
                refFormTransplant.City_TxtBox = refFormTransplant1ViewModel.City_TxtBox;
                refFormTransplant.NPI_TxtBox = refFormTransplant1ViewModel.NPI_TxtBox;
                refFormTransplant.Phone_TxtBox = refFormTransplant1ViewModel.Phone_TxtBox;
                refFormTransplant.Fax_TxtBox = refFormTransplant1ViewModel.Fax_TxtBox;
                refFormTransplant.OfficeContact_TxtBox = refFormTransplant1ViewModel.OfficeContact_TxtBox;
                refFormTransplant.ChkBox_LungTransplant = refFormTransplant1ViewModel.ChkBox_LungTransplant;
                refFormTransplant.Others_TxtBox = refFormTransplant1ViewModel.Others_TxtBox;
                refFormTransplant.After_TxtBox1 = refFormTransplant1ViewModel.After_TxtBox1;
                refFormTransplant.After_TxtBox2 = refFormTransplant1ViewModel.After_TxtBox2;
                refFormTransplant.ZIP_TxtBox = refFormTransplant1ViewModel.ZIP_TxtBox;
                refFormTransplant.State_TxtBox = refFormTransplant1ViewModel.State_TxtBox;
                refFormTransplant.ChkBox_V42_0KidneyTransplant = refFormTransplant1ViewModel.ChkBox_V42_0KidneyTransplant;
                refFormTransplant.ChkBox_V42_1HeartTransplant = refFormTransplant1ViewModel.ChkBox_V42_1HeartTransplant;
                refFormTransplant.ChkBox_V42_6LungTransplant = refFormTransplant1ViewModel.ChkBox_V42_6LungTransplant;






                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormTransplant.ModifiedBy = CurrentUser.UserId;
                refFormTransplant.ModifiedOn = DateTime.UtcNow;

                refFormTransplant.IsSignatured = refFormTransplant1ViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormTransplant1.Update(refFormTransplant);
                    AuditLogger.AuditTracker("Edit TransplantReferralForm_1", "A TransplantReferralForm_1  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormTransplant.CreatedBy = CurrentUser.UserId;
                    refFormTransplant.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormTransplant1.Insert(refFormTransplant);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New TransplantReferralForm_1", "A new TransplantReferralForm_1  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormTransplant1ViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormTransplant.RefFormTransplantId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save refFormTransplant1 Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method refFormTransplant1 PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save refFormTransplant1 Referral Form Unsuccessfully.", success = false });
        }

        public ActionResult TCA_Transplant_ReferralForm_FORM_0(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("TCA Transplant Referral Form"));
            return RedirectToAction("TransplantReferralForm_1", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 25 });
        }

        //TCA_AI_ReferralForm_FORM_0 and TCA_PI_ReferralForm_FORM_0..................................

        public ActionResult TCA_AI_ReferralForm_FORM_0(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("TCA AI Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 23;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormTCA_AIandPIViewModel refFormRefFormTCA_AIandPIViewModel = new RefFormTCA_AIandPIViewModel();

                //Set ReferralFormId
                refFormRefFormTCA_AIandPIViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormRefFormTCA_AIandPIViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormRefFormTCA_AIandPIViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormRefFormTCA_AIandPIViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormRefFormTCA_AIandPIViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormRefFormTCA_AIandPIViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormRefFormTCA_AIandPIViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormRefFormTCA_AIandPIViewModel.PhysicianFullName = physician.FullName;
                        refFormRefFormTCA_AIandPIViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormRefFormTCA_AIandPIViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormRefFormTCA_AIandPIViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormRefFormTCA_AIandPIViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormRefFormTCA_AIandPIViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormRefFormTCA_AIandPIViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormRefFormTCA_AIandPIViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormTCA_AIandPI refFormTCA_AIandPI = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormTCA_AIandPI = _unitOfWork.RefFormTCA_AIandPIRepository.GetSingle(t => t.RefFormTCA_AIandPIId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormTCA_AIandPI == null) refFormTCA_AIandPI = new RefFormTCA_AIandPI();


                    refFormRefFormTCA_AIandPIViewModel.RefFormTCA_AIandPIId = refFormTCA_AIandPI.RefFormTCA_AIandPIId;

                    //Form
                    //Add your code here.



                    refFormRefFormTCA_AIandPIViewModel.RefFormTCA_AIandPIId = refFormTCA_AIandPI.RefFormTCA_AIandPIId;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_AcuteInfective = refFormTCA_AIandPI.ChkBox_AcuteInfective ?? false;
                    refFormRefFormTCA_AIandPIViewModel.AcuteInfective_ICD_10_TxtBox = refFormTCA_AIandPI.AcuteInfective_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_MyastheniaGravis = refFormTCA_AIandPI.ChkBox_MyastheniaGravis ?? false;
                    refFormRefFormTCA_AIandPIViewModel.MyastheniaGravis_ICD_10_TxtBox = refFormTCA_AIandPI.MyastheniaGravis_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_ChronicInflammatory = refFormTCA_AIandPI.ChkBox_ChronicInflammatory ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChronicInflammatory_ICD_10_TxtBox = refFormTCA_AIandPI.ChronicInflammatory_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Pemphigus = refFormTCA_AIandPI.ChkBox_Pemphigus ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Pemphigus_ICD_10_TxtBox = refFormTCA_AIandPI.Pemphigus_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Dermatomyositis = refFormTCA_AIandPI.ChkBox_Dermatomyositis ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Dermatomyositis_ICD_10_TxtBox = refFormTCA_AIandPI.Dermatomyositis_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Pemphigoid = refFormTCA_AIandPI.ChkBox_Pemphigoid ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Pemphigoid_ICD_10_TxtBox = refFormTCA_AIandPI.Pemphigoid_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Inflammatory = refFormTCA_AIandPI.ChkBox_Inflammatory ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Inflammatory_ICD_10_TxtBox = refFormTCA_AIandPI.Inflammatory_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Polymyositis = refFormTCA_AIandPI.ChkBox_Polymyositis ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Polymyositis_ICD_10_TxtBox = refFormTCA_AIandPI.Polymyositis_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Multiple = refFormTCA_AIandPI.ChkBox_Multiple ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Multiple_ICD_10_TxtBox = refFormTCA_AIandPI.Multiple_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_StiffPerson = refFormTCA_AIandPI.ChkBox_StiffPerson ?? false;
                    refFormRefFormTCA_AIandPIViewModel.StiffPerson_ICD_10_TxtBox = refFormTCA_AIandPI.StiffPerson_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Multifocal = refFormTCA_AIandPI.ChkBox_Multifocal ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Multifocal_ICD_10_TxtBox = refFormTCA_AIandPI.Multifocal_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Other = refFormTCA_AIandPI.ChkBox_Other ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Other_TxtBox = refFormTCA_AIandPI.Other_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.Other_ICD_10_TxtBox = refFormTCA_AIandPI.Other_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Myasthenia = refFormTCA_AIandPI.ChkBox_Myasthenia ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Myasthenia_ICD_10_TxtBox = refFormTCA_AIandPI.Myasthenia_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_SCIG = refFormTCA_AIandPI.ChkBox_SCIG ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_IV1G = refFormTCA_AIandPI.ChkBox_IV1G ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Pharmacist = refFormTCA_AIandPI.ChkBox_Pharmacist ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Formulation = refFormTCA_AIandPI.ChkBox_Formulation ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Formulation_TxtBox = refFormTCA_AIandPI.Formulation_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_LoadingDose = refFormTCA_AIandPI.ChkBox_LoadingDose ?? false;
                    refFormRefFormTCA_AIandPIViewModel.LoadingDose_TxtBox = refFormTCA_AIandPI.LoadingDose_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_MaintenanceDose = refFormTCA_AIandPI.ChkBox_MaintenanceDose ?? false;
                    refFormRefFormTCA_AIandPIViewModel.MaintenanceDose_over_TxtBox = refFormTCA_AIandPI.MaintenanceDose_over_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.MaintenanceDose_day_TxtBox = refFormTCA_AIandPI.MaintenanceDose_day_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.MaintenanceDose_week_TxtBox = refFormTCA_AIandPI.MaintenanceDose_week_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.MaintenanceDose_cycle_TxtBox = refFormTCA_AIandPI.MaintenanceDose_cycle_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_OtherRegimen = refFormTCA_AIandPI.ChkBox_OtherRegimen ?? false;
                    refFormRefFormTCA_AIandPIViewModel.OtherRegimen_TxtBox = refFormTCA_AIandPI.OtherRegimen_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PharmacisttodetermineoStart = refFormTCA_AIandPI.ChkBox_PharmacisttodetermineoStart ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Startat = refFormTCA_AIandPI.ChkBox_Startat ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Startat_TxtBox1 = refFormTCA_AIandPI.Startat_TxtBox1 != null ? refFormTCA_AIandPI.Startat_TxtBox1.Value : 0D;
                    refFormRefFormTCA_AIandPIViewModel.Startat_TxtBox2 = refFormTCA_AIandPI.Startat_TxtBox2 != null ? refFormTCA_AIandPI.Startat_TxtBox2.Value : 0D;
                    refFormRefFormTCA_AIandPIViewModel.Startat_TxtBox3 = refFormTCA_AIandPI.Startat_TxtBox3 != null ? refFormTCA_AIandPI.Startat_TxtBox3.Value : 0D;
                    refFormRefFormTCA_AIandPIViewModel.Startat_TxtBox4 = refFormTCA_AIandPI.Startat_TxtBox4 != null ? refFormTCA_AIandPI.Startat_TxtBox4.Value : 0D;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Peripheral = refFormTCA_AIandPI.ChkBox_Peripheral ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PICC = refFormTCA_AIandPI.ChkBox_PICC ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Port = refFormTCA_AIandPI.ChkBox_Port ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Other2 = refFormTCA_AIandPI.ChkBox_Other2 ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Other2_TxtBox = refFormTCA_AIandPI.Other2_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Decline1 = refFormTCA_AIandPI.ChkBox_Decline1 ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Decline2 = refFormTCA_AIandPI.ChkBox_Decline2 ?? false;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_Other3 = refFormTCA_AIandPI.ChkBox_Other3 ?? false;
                    refFormRefFormTCA_AIandPIViewModel.Other3_TxtBox = refFormTCA_AIandPI.Other3_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.LabstobeDrawn_TxtBox = refFormTCA_AIandPI.LabstobeDrawn_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.FrequencyofLabs_TxtBox = refFormTCA_AIandPI.FrequencyofLabs_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.PhysicianName_TxtBox = refFormTCA_AIandPI.PhysicianName_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.License_TxtBox = refFormTCA_AIandPI.License_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.Address_TxtBox = refFormTCA_AIandPI.Address_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.DEA_TxtBox = refFormTCA_AIandPI.DEA_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.City_TxtBox = refFormTCA_AIandPI.City_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ZIP_TxtBox = refFormTCA_AIandPI.ZIP_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.State_TxtBox = refFormTCA_AIandPI.State_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.NPI_TxtBox = refFormTCA_AIandPI.NPI_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.Phone_TxtBox = refFormTCA_AIandPI.Phone_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.Fax_TxtBox = refFormTCA_AIandPI.Fax_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.OfficeContact_TxtBox = refFormTCA_AIandPI.OfficeContact_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_CommonVariable = refFormTCA_AIandPI.ChkBox_PI_CommonVariable ?? false;
                    refFormRefFormTCA_AIandPIViewModel.PI_CommonVariable_ICD_10_TxtBox = refFormTCA_AIandPI.PI_CommonVariable_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_oImmunodeficiency = refFormTCA_AIandPI.ChkBox_PI_oImmunodeficiency ?? false;
                    refFormRefFormTCA_AIandPIViewModel.PI_oImmunodeficiency_ICD_10_TxtBox = refFormTCA_AIandPI.PI_oImmunodeficiency_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_CombinedImmunity = refFormTCA_AIandPI.ChkBox_PI_CombinedImmunity ?? false;
                    refFormRefFormTCA_AIandPIViewModel.PI_CombinedImmunity_ICD_10_TxtBox = refFormTCA_AIandPI.PI_CombinedImmunity_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_SelectiveIgM = refFormTCA_AIandPI.ChkBox_PI_SelectiveIgM ?? false;
                    refFormRefFormTCA_AIandPIViewModel.PI_SelectiveIgM_ICD_10_TxtBox = refFormTCA_AIandPI.PI_SelectiveIgM_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_Congenital = refFormTCA_AIandPI.ChkBox_PI_Congenital ?? false;
                    refFormRefFormTCA_AIandPIViewModel.PI_Congenital_ICD_10_TxtBox = refFormTCA_AIandPI.PI_Congenital_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_SelectiveIg = refFormTCA_AIandPI.ChkBox_PI_SelectiveIg ?? false;
                    refFormRefFormTCA_AIandPIViewModel.PI_CSelectiveIg_ICD_10_TxtBox = refFormTCA_AIandPI.PI_CSelectiveIg_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_Hypogammaglobulinemia = refFormTCA_AIandPI.ChkBox_PI_Hypogammaglobulinemia ?? false;
                    refFormRefFormTCA_AIandPIViewModel.PI_Hypogammaglobulinemia_ICD_10_TxtBox = refFormTCA_AIandPI.PI_Hypogammaglobulinemia_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_Other = refFormTCA_AIandPI.ChkBox_PI_Other ?? false;
                    refFormRefFormTCA_AIandPIViewModel.PI_Other_ICD_10_TxtBox = refFormTCA_AIandPI.PI_Other_ICD_10_TxtBox;
                    refFormRefFormTCA_AIandPIViewModel.LoadingDose_TxtBox2 = refFormTCA_AIandPI.LoadingDose_TxtBox2;





                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormRefFormTCA_AIandPIViewModel.IsSignatured = refFormTCA_AIandPI.IsSignatured ?? false;

                    return View(refFormRefFormTCA_AIandPIViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method refFormRefFormTCA_AIandPIViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormTCA_AIandPIViewModel());
        }
        [HttpPost]
        public JsonResult TCA_AI_ReferralForm_FORM_0(RefFormTCA_AIandPIViewModel refFormRefFormTCA_AIandPIViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormRefFormTCA_AIandPIViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormTCA_AIandPI refFormTCA_AIandPI = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormRefFormTCA_AIandPIViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormTCA_AIandPI = _unitOfWork.RefFormTCA_AIandPIRepository.GetSingle(t => t.RefFormTCA_AIandPIId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormTCA_AIandPI == null)
                {
                    refFormTCA_AIandPI = new RefFormTCA_AIandPI();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form


                refFormTCA_AIandPI.RefFormTCA_AIandPIId = refFormRefFormTCA_AIandPIViewModel.RefFormTCA_AIandPIId;
                refFormTCA_AIandPI.ChkBox_AcuteInfective = refFormRefFormTCA_AIandPIViewModel.ChkBox_AcuteInfective;
                refFormTCA_AIandPI.AcuteInfective_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.AcuteInfective_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_MyastheniaGravis = refFormRefFormTCA_AIandPIViewModel.ChkBox_MyastheniaGravis;
                refFormTCA_AIandPI.MyastheniaGravis_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.MyastheniaGravis_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_ChronicInflammatory = refFormRefFormTCA_AIandPIViewModel.ChkBox_ChronicInflammatory;
                refFormTCA_AIandPI.ChronicInflammatory_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.ChronicInflammatory_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Pemphigus = refFormRefFormTCA_AIandPIViewModel.ChkBox_Pemphigus;
                refFormTCA_AIandPI.Pemphigus_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Pemphigus_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Dermatomyositis = refFormRefFormTCA_AIandPIViewModel.ChkBox_Dermatomyositis;
                refFormTCA_AIandPI.Dermatomyositis_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Dermatomyositis_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Pemphigoid = refFormRefFormTCA_AIandPIViewModel.ChkBox_Pemphigoid;
                refFormTCA_AIandPI.Pemphigoid_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Pemphigoid_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Inflammatory = refFormRefFormTCA_AIandPIViewModel.ChkBox_Inflammatory;
                refFormTCA_AIandPI.Inflammatory_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Inflammatory_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Polymyositis = refFormRefFormTCA_AIandPIViewModel.ChkBox_Polymyositis;
                refFormTCA_AIandPI.Polymyositis_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Polymyositis_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Multiple = refFormRefFormTCA_AIandPIViewModel.ChkBox_Multiple;
                refFormTCA_AIandPI.Multiple_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Multiple_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_StiffPerson = refFormRefFormTCA_AIandPIViewModel.ChkBox_StiffPerson;
                refFormTCA_AIandPI.StiffPerson_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.StiffPerson_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Multifocal = refFormRefFormTCA_AIandPIViewModel.ChkBox_Multifocal;
                refFormTCA_AIandPI.Multifocal_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Multifocal_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Other = refFormRefFormTCA_AIandPIViewModel.ChkBox_Other;
                refFormTCA_AIandPI.Other_TxtBox = refFormRefFormTCA_AIandPIViewModel.Other_TxtBox;
                refFormTCA_AIandPI.Other_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Other_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_Myasthenia = refFormRefFormTCA_AIandPIViewModel.ChkBox_Myasthenia;
                refFormTCA_AIandPI.Myasthenia_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.Myasthenia_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_SCIG = refFormRefFormTCA_AIandPIViewModel.ChkBox_SCIG;
                refFormTCA_AIandPI.ChkBox_IV1G = refFormRefFormTCA_AIandPIViewModel.ChkBox_IV1G;
                refFormTCA_AIandPI.ChkBox_Pharmacist = refFormRefFormTCA_AIandPIViewModel.ChkBox_Pharmacist;
                refFormTCA_AIandPI.ChkBox_Formulation = refFormRefFormTCA_AIandPIViewModel.ChkBox_Formulation;
                refFormTCA_AIandPI.Formulation_TxtBox = refFormRefFormTCA_AIandPIViewModel.Formulation_TxtBox;
                refFormTCA_AIandPI.ChkBox_LoadingDose = refFormRefFormTCA_AIandPIViewModel.ChkBox_LoadingDose;
                refFormTCA_AIandPI.LoadingDose_TxtBox = refFormRefFormTCA_AIandPIViewModel.LoadingDose_TxtBox;
                refFormTCA_AIandPI.ChkBox_MaintenanceDose = refFormRefFormTCA_AIandPIViewModel.ChkBox_MaintenanceDose;
                refFormTCA_AIandPI.MaintenanceDose_over_TxtBox = refFormRefFormTCA_AIandPIViewModel.MaintenanceDose_over_TxtBox;
                refFormTCA_AIandPI.MaintenanceDose_day_TxtBox = refFormRefFormTCA_AIandPIViewModel.MaintenanceDose_day_TxtBox;
                refFormTCA_AIandPI.MaintenanceDose_week_TxtBox = refFormRefFormTCA_AIandPIViewModel.MaintenanceDose_week_TxtBox;
                refFormTCA_AIandPI.MaintenanceDose_cycle_TxtBox = refFormRefFormTCA_AIandPIViewModel.MaintenanceDose_cycle_TxtBox;
                refFormTCA_AIandPI.ChkBox_OtherRegimen = refFormRefFormTCA_AIandPIViewModel.ChkBox_OtherRegimen;
                refFormTCA_AIandPI.OtherRegimen_TxtBox = refFormRefFormTCA_AIandPIViewModel.OtherRegimen_TxtBox;
                refFormTCA_AIandPI.ChkBox_PharmacisttodetermineoStart = refFormRefFormTCA_AIandPIViewModel.ChkBox_PharmacisttodetermineoStart;
                refFormTCA_AIandPI.ChkBox_Startat = refFormRefFormTCA_AIandPIViewModel.ChkBox_Startat;
                refFormTCA_AIandPI.Startat_TxtBox1 = refFormRefFormTCA_AIandPIViewModel.Startat_TxtBox1;
                refFormTCA_AIandPI.Startat_TxtBox2 = refFormRefFormTCA_AIandPIViewModel.Startat_TxtBox2;
                refFormTCA_AIandPI.Startat_TxtBox3 = refFormRefFormTCA_AIandPIViewModel.Startat_TxtBox3;
                refFormTCA_AIandPI.Startat_TxtBox4 = refFormRefFormTCA_AIandPIViewModel.Startat_TxtBox4;
                refFormTCA_AIandPI.ChkBox_Peripheral = refFormRefFormTCA_AIandPIViewModel.ChkBox_Peripheral;
                refFormTCA_AIandPI.ChkBox_PICC = refFormRefFormTCA_AIandPIViewModel.ChkBox_PICC;
                refFormTCA_AIandPI.ChkBox_Port = refFormRefFormTCA_AIandPIViewModel.ChkBox_Port;
                refFormTCA_AIandPI.ChkBox_Other2 = refFormRefFormTCA_AIandPIViewModel.ChkBox_Other2;
                refFormTCA_AIandPI.Other2_TxtBox = refFormRefFormTCA_AIandPIViewModel.Other2_TxtBox;
                refFormTCA_AIandPI.ChkBox_Decline1 = refFormRefFormTCA_AIandPIViewModel.ChkBox_Decline1;
                refFormTCA_AIandPI.ChkBox_Decline2 = refFormRefFormTCA_AIandPIViewModel.ChkBox_Decline2;
                refFormTCA_AIandPI.ChkBox_Other3 = refFormRefFormTCA_AIandPIViewModel.ChkBox_Other3;
                refFormTCA_AIandPI.Other3_TxtBox = refFormRefFormTCA_AIandPIViewModel.Other3_TxtBox;
                refFormTCA_AIandPI.LabstobeDrawn_TxtBox = refFormRefFormTCA_AIandPIViewModel.LabstobeDrawn_TxtBox;
                refFormTCA_AIandPI.FrequencyofLabs_TxtBox = refFormRefFormTCA_AIandPIViewModel.FrequencyofLabs_TxtBox;
                refFormTCA_AIandPI.PhysicianName_TxtBox = refFormRefFormTCA_AIandPIViewModel.PhysicianName_TxtBox;
                refFormTCA_AIandPI.License_TxtBox = refFormRefFormTCA_AIandPIViewModel.License_TxtBox;
                refFormTCA_AIandPI.Address_TxtBox = refFormRefFormTCA_AIandPIViewModel.Address_TxtBox;
                refFormTCA_AIandPI.DEA_TxtBox = refFormRefFormTCA_AIandPIViewModel.DEA_TxtBox;
                refFormTCA_AIandPI.City_TxtBox = refFormRefFormTCA_AIandPIViewModel.City_TxtBox;
                refFormTCA_AIandPI.ZIP_TxtBox = refFormRefFormTCA_AIandPIViewModel.ZIP_TxtBox;
                refFormTCA_AIandPI.State_TxtBox = refFormRefFormTCA_AIandPIViewModel.State_TxtBox;
                refFormTCA_AIandPI.NPI_TxtBox = refFormRefFormTCA_AIandPIViewModel.NPI_TxtBox;
                refFormTCA_AIandPI.Phone_TxtBox = refFormRefFormTCA_AIandPIViewModel.Phone_TxtBox;
                refFormTCA_AIandPI.Fax_TxtBox = refFormRefFormTCA_AIandPIViewModel.Fax_TxtBox;
                refFormTCA_AIandPI.OfficeContact_TxtBox = refFormRefFormTCA_AIandPIViewModel.OfficeContact_TxtBox;
                refFormTCA_AIandPI.ChkBox_PI_CommonVariable = refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_CommonVariable;
                refFormTCA_AIandPI.PI_CommonVariable_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.PI_CommonVariable_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_PI_oImmunodeficiency = refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_oImmunodeficiency;
                refFormTCA_AIandPI.PI_oImmunodeficiency_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.PI_oImmunodeficiency_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_PI_CombinedImmunity = refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_CombinedImmunity;
                refFormTCA_AIandPI.PI_CombinedImmunity_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.PI_CombinedImmunity_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_PI_SelectiveIgM = refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_SelectiveIgM;
                refFormTCA_AIandPI.PI_SelectiveIgM_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.PI_SelectiveIgM_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_PI_Congenital = refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_Congenital;
                refFormTCA_AIandPI.PI_Congenital_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.PI_Congenital_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_PI_SelectiveIg = refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_SelectiveIg;
                refFormTCA_AIandPI.PI_CSelectiveIg_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.PI_CSelectiveIg_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_PI_Hypogammaglobulinemia = refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_Hypogammaglobulinemia;
                refFormTCA_AIandPI.PI_Hypogammaglobulinemia_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.PI_Hypogammaglobulinemia_ICD_10_TxtBox;
                refFormTCA_AIandPI.ChkBox_PI_Other = refFormRefFormTCA_AIandPIViewModel.ChkBox_PI_Other;
                refFormTCA_AIandPI.PI_Other_ICD_10_TxtBox = refFormRefFormTCA_AIandPIViewModel.PI_Other_ICD_10_TxtBox;
                refFormTCA_AIandPI.LoadingDose_TxtBox2 = refFormRefFormTCA_AIandPIViewModel.LoadingDose_TxtBox2;






                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormTCA_AIandPI.ModifiedBy = CurrentUser.UserId;
                refFormTCA_AIandPI.ModifiedOn = DateTime.UtcNow;

                refFormTCA_AIandPI.IsSignatured = refFormRefFormTCA_AIandPIViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormTCA_AIandPIRepository.Update(refFormTCA_AIandPI);
                    AuditLogger.AuditTracker("Edit TCA_AI_ReferralForm_FORM_0", "A TCA_AI_ReferralForm_FORM_0  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormTCA_AIandPI.CreatedBy = CurrentUser.UserId;
                    refFormTCA_AIandPI.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormTCA_AIandPIRepository.Insert(refFormTCA_AIandPI);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New TCA_AI_ReferralForm_FORM_0", "A new TCA_AI_ReferralForm_FORM_0  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormRefFormTCA_AIandPIViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormTCA_AIandPI.RefFormTCA_AIandPIId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save refFormTCA_AIandPI Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method refFormTCA_AIandPI PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save refFormTCA_AIandPI Referral Form Unsuccessfully.", success = false });
        }

        public ActionResult TCA_PI_ReferralForm_FORM_0(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("TCA PI Referral Form"));
            return RedirectToAction("TCA_AI_ReferralForm_FORM_0", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 24 });
        }

        //lmfl oral oncology referral form
        public ActionResult lmfl_oral_oncology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl oral oncology referral form"));
            return RedirectToAction("OncologyReferralForm", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 58 });
        }
        //Oncology...................................

        public ActionResult OncologyReferralForm(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Oncology Referral Form"));
                    referralFormId = referralForm?.ReferralFormId ?? 13;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormOncologyViewModel refFormOncologyViewModel = new RefFormOncologyViewModel();

                //Set ReferralFormId
                refFormOncologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormOncologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormOncologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormOncologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormOncologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormOncologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormOncologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormOncologyViewModel.PhysicianFullName = physician.FullName;
                        refFormOncologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormOncologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormOncologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormOncologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormOncologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormOncologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormOncologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormOncology refFormOncology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormOncology = _unitOfWork.RefFormOncology.GetSingle(t => t.RefFormOncologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormOncology == null) refFormOncology = new RefFormOncology();


                    refFormOncologyViewModel.RefFormOncologyId = refFormOncology.RefFormOncologyId;

                    //Form
                    //Add your code here.


                    refFormOncologyViewModel.RefFormOncologyId = refFormOncology.RefFormOncologyId;

                    refFormOncologyViewModel.FormDate = refFormOncology.FormDate;
                    refFormOncologyViewModel.FormNeedsByDate = refFormOncology.FormNeedsByDate;
                    refFormOncologyViewModel.ChkBox_ShipToPatient = refFormOncology.ChkBox_ShipToPatient ?? false;
                    refFormOncologyViewModel.ChkBox_ShipToOffice = refFormOncology.ChkBox_ShipToOffice ?? false;
                    refFormOncologyViewModel.ChkBox_ShipToOther = refFormOncology.ChkBox_ShipToOther ?? false;
                    refFormOncologyViewModel.TxtBox_ShipToOther = refFormOncology.TxtBox_ShipToOther;

                    refFormOncologyViewModel.Diagnosis_TxtBox = refFormOncology.Diagnosis_TxtBox;
                    refFormOncologyViewModel.ICD_10_TxtBox1 = refFormOncology.ICD_10_TxtBox1;
                    refFormOncologyViewModel.SecondaryDiagnosis_TxtBox = refFormOncology.SecondaryDiagnosis_TxtBox;
                    refFormOncologyViewModel.ICD_10_TxtBox2 = refFormOncology.ICD_10_TxtBox2;
                    refFormOncologyViewModel.DrugAllergies_TxtBox = refFormOncology.DrugAllergies_TxtBox;
                    refFormOncologyViewModel.ChkBox_RenalDysfunctionYes = refFormOncology.ChkBox_RenalDysfunctionYes ?? false;
                    refFormOncologyViewModel.ChkBox_RenalDysfunctionNo = refFormOncology.ChkBox_RenalDysfunctionNo ?? false;
                    refFormOncologyViewModel.ChkBox_LiverDysfunctionYes = refFormOncology.ChkBox_LiverDysfunctionYes ?? false;
                    refFormOncologyViewModel.ChkBox_LiverDysfunctionNo = refFormOncology.ChkBox_LiverDysfunctionNo ?? false;
                    refFormOncologyViewModel.SerumCreatinine_TxtBox = refFormOncology.SerumCreatinine_TxtBox;
                    refFormOncologyViewModel.HgB_TxtBox = refFormOncology.HgB_TxtBox;
                    refFormOncologyViewModel.HCT_TxtBox = refFormOncology.HCT_TxtBox;
                    refFormOncologyViewModel.ChkBox_ALKpositive = refFormOncology.ChkBox_ALKpositive ?? false;
                    refFormOncologyViewModel.Date_TxtBox1 = refFormOncology.Date_TxtBox1.HasValue ? refFormOncology.Date_TxtBox1.Value : DateTime.UtcNow;
                    refFormOncologyViewModel.Date_TxtBox2 = refFormOncology.Date_TxtBox2.HasValue ? refFormOncology.Date_TxtBox2.Value : DateTime.UtcNow;
                    refFormOncologyViewModel.Date_TxtBox3 = refFormOncology.Date_TxtBox3.HasValue ? refFormOncology.Date_TxtBox3.Value : DateTime.UtcNow;
                    refFormOncologyViewModel.ChkBox_ConfirmedBRAF = refFormOncology.ChkBox_ConfirmedBRAF ?? false;
                    refFormOncologyViewModel.ChkBox_ConfirmedBRAFV600KMutationforMekinist = refFormOncology.ChkBox_ConfirmedBRAFV600KMutationforMekinist ?? false;
                    refFormOncologyViewModel.ChkBox_PreviouslyonZelboraf = refFormOncology.ChkBox_PreviouslyonZelboraf ?? false;
                    refFormOncologyViewModel.Weight_TxtBox = refFormOncology.Weight_TxtBox != null ? refFormOncology.Weight_TxtBox.Value : 0D;
                    refFormOncologyViewModel.ChkBox_ERPositive = refFormOncology.ChkBox_ERPositive ?? false;
                    refFormOncologyViewModel.ChkBox_ERNegative = refFormOncology.ChkBox_ERNegative ?? false;
                    refFormOncologyViewModel.ChkBox_HER2Positive = refFormOncology.ChkBox_HER2Positive ?? false;
                    refFormOncologyViewModel.ChkBox_HER2Negative = refFormOncology.ChkBox_HER2Negative ?? false;
                    refFormOncologyViewModel.ChkBox_MetastaticYes = refFormOncology.ChkBox_MetastaticYes ?? false;
                    refFormOncologyViewModel.ChkBox_MetastaticNo = refFormOncology.ChkBox_MetastaticNo ?? false;
                    refFormOncologyViewModel.Height_TxtBox = refFormOncology.Height_TxtBox != null ? refFormOncology.Height_TxtBox.Value : 0D;
                    refFormOncologyViewModel.BSA_TxtBox = refFormOncology.BSA_TxtBox;
                    refFormOncologyViewModel.ChkBox_Afinitor = refFormOncology.ChkBox_Afinitor ?? false;
                    refFormOncologyViewModel.Afinitor_Strength_TxtBox = refFormOncology.Afinitor_Strength_TxtBox;
                    refFormOncologyViewModel.Afinitor_INFORMATION_TxtBox = refFormOncology.Afinitor_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Afinitor_QUANTITY_TxtBox = refFormOncology.Afinitor_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Afinitor_REFILLS_TxtBox = refFormOncology.Afinitor_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Arimidex = refFormOncology.ChkBox_Arimidex ?? false;
                    refFormOncologyViewModel.Arimidex_Strength_TxtBox = refFormOncology.Arimidex_Strength_TxtBox;
                    refFormOncologyViewModel.Arimidex_INFORMATION_TxtBox = refFormOncology.Arimidex_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Arimidex_QUANTITY_TxtBox = refFormOncology.Arimidex_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Arimidex_REFILLS_TxtBox = refFormOncology.Arimidex_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Aromasin = refFormOncology.ChkBox_Aromasin ?? false;
                    refFormOncologyViewModel.Aromasin_Strength_TxtBox = refFormOncology.Aromasin_Strength_TxtBox;
                    refFormOncologyViewModel.Aromasin_INFORMATION_TxtBox = refFormOncology.Aromasin_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Aromasin_QUANTITY_TxtBox = refFormOncology.Aromasin_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Aromasin_REFILLS_TxtBox = refFormOncology.Aromasin_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Bosulif = refFormOncology.ChkBox_Bosulif ?? false;
                    refFormOncologyViewModel.Bosulif_Strength_TxtBox = refFormOncology.Bosulif_Strength_TxtBox;
                    refFormOncologyViewModel.Bosulif_INFORMATION_TxtBox = refFormOncology.Bosulif_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Bosulif_QUANTITY_TxtBox = refFormOncology.Bosulif_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Bosulif_REFILLS_TxtBox = refFormOncology.Bosulif_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Erivedge = refFormOncology.ChkBox_Erivedge ?? false;
                    refFormOncologyViewModel.Erivedge_Strength_TxtBox = refFormOncology.Erivedge_Strength_TxtBox;
                    refFormOncologyViewModel.Erivedge_INFORMATION_TxtBox = refFormOncology.Erivedge_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Erivedge_QUANTITY_TxtBox = refFormOncology.Erivedge_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Erivedge_REFILLS_TxtBox = refFormOncology.Erivedge_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Femara = refFormOncology.ChkBox_Femara ?? false;
                    refFormOncologyViewModel.Femara_Strength_TxtBox = refFormOncology.Femara_Strength_TxtBox;
                    refFormOncologyViewModel.Femara_INFORMATION_TxtBox = refFormOncology.Femara_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Femara_QUANTITY_TxtBox = refFormOncology.Femara_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Femara_REFILLS_TxtBox = refFormOncology.Femara_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Gleevec = refFormOncology.ChkBox_Gleevec ?? false;
                    refFormOncologyViewModel.Gleevec_Strength_TxtBox = refFormOncology.Gleevec_Strength_TxtBox;
                    refFormOncologyViewModel.Gleevec_INFORMATION_TxtBox = refFormOncology.Gleevec_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Gleevec_QUANTITY_TxtBox = refFormOncology.Gleevec_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Gleevec_REFILLS_TxtBox = refFormOncology.Gleevec_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Hycamtin = refFormOncology.ChkBox_Hycamtin ?? false;
                    refFormOncologyViewModel.Hycamtin_Strength_TxtBox = refFormOncology.Hycamtin_Strength_TxtBox;
                    refFormOncologyViewModel.Hycamtin_INFORMATION_TxtBox = refFormOncology.Hycamtin_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Hycamtin_QUANTITY_TxtBox = refFormOncology.Hycamtin_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Hycamtin_REFILLS_TxtBox = refFormOncology.Hycamtin_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Ibrance = refFormOncology.ChkBox_Ibrance ?? false;
                    refFormOncologyViewModel.Ibrance_Strength_TxtBox = refFormOncology.Ibrance_Strength_TxtBox;
                    refFormOncologyViewModel.Ibrance_INFORMATION_TxtBox = refFormOncology.Ibrance_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Ibrance_QUANTITY_TxtBox = refFormOncology.Ibrance_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Ibrance_REFILLS_TxtBox = refFormOncology.Ibrance_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Inlyta = refFormOncology.ChkBox_Inlyta ?? false;
                    refFormOncologyViewModel.Inlyta_Strength_TxtBox = refFormOncology.Inlyta_Strength_TxtBox;
                    refFormOncologyViewModel.Inlyta_INFORMATION_TxtBox = refFormOncology.Inlyta_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Inlyta_QUANTITY_TxtBox = refFormOncology.Inlyta_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Inlyta_REFILLS_TxtBox = refFormOncology.Inlyta_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Mekinist = refFormOncology.ChkBox_Mekinist ?? false;
                    refFormOncologyViewModel.Mekinist_Strength_TxtBox = refFormOncology.Mekinist_Strength_TxtBox;
                    refFormOncologyViewModel.Mekinist_INFORMATION_TxtBox = refFormOncology.Mekinist_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Mekinist_QUANTITY_TxtBox = refFormOncology.Mekinist_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Mekinist_REFILLS_TxtBox = refFormOncology.Mekinist_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Nplate = refFormOncology.ChkBox_Nplate ?? false;
                    refFormOncologyViewModel.Nplate_Strength_TxtBox = refFormOncology.Nplate_Strength_TxtBox;
                    refFormOncologyViewModel.Nplate_INFORMATION_TxtBox = refFormOncology.Nplate_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Nplate_QUANTITY_TxtBox = refFormOncology.Nplate_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Nplate_REFILLS_TxtBox = refFormOncology.Nplate_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Promacta = refFormOncology.ChkBox_Promacta ?? false;
                    refFormOncologyViewModel.Promacta_Strength_TxtBox = refFormOncology.Promacta_Strength_TxtBox;
                    refFormOncologyViewModel.Promacta_INFORMATION_TxtBox = refFormOncology.Promacta_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Promacta_QUANTITY_TxtBox = refFormOncology.Promacta_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Promacta_REFILLS_TxtBox = refFormOncology.Promacta_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Sprycel = refFormOncology.ChkBox_Sprycel ?? false;
                    refFormOncologyViewModel.Sprycel_Strength_TxtBox = refFormOncology.Sprycel_Strength_TxtBox;
                    refFormOncologyViewModel.Sprycel_INFORMATION_TxtBox = refFormOncology.Sprycel_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Sprycel_QUANTITY_TxtBox = refFormOncology.Sprycel_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Sprycel_REFILLS_TxtBox = refFormOncology.Sprycel_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Sutent = refFormOncology.ChkBox_Sutent ?? false;
                    refFormOncologyViewModel.Sutent_Strength_TxtBox = refFormOncology.Sutent_Strength_TxtBox;
                    refFormOncologyViewModel.Sutent_INFORMATION_TxtBox = refFormOncology.Sutent_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Sutent_QUANTITY_TxtBox = refFormOncology.Sutent_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Sutent_REFILLS_TxtBox = refFormOncology.Sutent_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Sylatron = refFormOncology.ChkBox_Sylatron ?? false;
                    refFormOncologyViewModel.Sylatron_Strength_TxtBox = refFormOncology.Sylatron_Strength_TxtBox;
                    refFormOncologyViewModel.Sylatron_INFORMATION_TxtBox = refFormOncology.Sylatron_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Sylatron_QUANTITY_TxtBox = refFormOncology.Sylatron_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Sylatron_REFILLS_TxtBox = refFormOncology.Sylatron_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Tafinlar = refFormOncology.ChkBox_Tafinlar ?? false;
                    refFormOncologyViewModel.Tafinlar_Strength_TxtBox = refFormOncology.Tafinlar_Strength_TxtBox;
                    refFormOncologyViewModel.Tafinlar_INFORMATION_TxtBox = refFormOncology.Tafinlar_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Tafinlar_QUANTITY_TxtBox = refFormOncology.Tafinlar_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Tafinlar_REFILLS_TxtBox = refFormOncology.Tafinlar_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Tarceva = refFormOncology.ChkBox_Tarceva ?? false;
                    refFormOncologyViewModel.Tarceva_Strength_TxtBox = refFormOncology.Tarceva_Strength_TxtBox;
                    refFormOncologyViewModel.Tarceva_INFORMATION_TxtBox = refFormOncology.Tarceva_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Tarceva_QUANTITY_TxtBox = refFormOncology.Tarceva_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Tarceva_REFILLS_TxtBox = refFormOncology.Tarceva_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Targretin = refFormOncology.ChkBox_Targretin ?? false;
                    refFormOncologyViewModel.Targretin_Strength_TxtBox = refFormOncology.Targretin_Strength_TxtBox;
                    refFormOncologyViewModel.Targretin_INFORMATION_TxtBox = refFormOncology.Targretin_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Targretin_QUANTITY_TxtBox = refFormOncology.Targretin_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Targretin_REFILLS_TxtBox = refFormOncology.Targretin_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Tasigna = refFormOncology.ChkBox_Tasigna ?? false;
                    refFormOncologyViewModel.Tasigna_Strength_TxtBox = refFormOncology.Tasigna_Strength_TxtBox;
                    refFormOncologyViewModel.Tasigna_INFORMATION_TxtBox = refFormOncology.Tasigna_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Tasigna_QUANTITY_TxtBox = refFormOncology.Tasigna_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Tasigna_REFILLS_TxtBox = refFormOncology.Tasigna_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Temodar = refFormOncology.ChkBox_Temodar ?? false;
                    refFormOncologyViewModel.Temodar_Strength_TxtBox = refFormOncology.Temodar_Strength_TxtBox;
                    refFormOncologyViewModel.Temodar_INFORMATION_TxtBox = refFormOncology.Temodar_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Temodar_QUANTITY_TxtBox = refFormOncology.Temodar_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Temodar_REFILLS_TxtBox = refFormOncology.Temodar_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Tykerb = refFormOncology.ChkBox_Tykerb ?? false;
                    refFormOncologyViewModel.Tykerb_Strength_TxtBox = refFormOncology.Tykerb_Strength_TxtBox;
                    refFormOncologyViewModel.Tykerb_INFORMATION_TxtBox = refFormOncology.Tykerb_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Tykerb_QUANTITY_TxtBox = refFormOncology.Tykerb_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Tykerb_REFILLS_TxtBox = refFormOncology.Tykerb_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Vidaza = refFormOncology.ChkBox_Vidaza ?? false;
                    refFormOncologyViewModel.Vidaza_Strength_TxtBox = refFormOncology.Vidaza_Strength_TxtBox;
                    refFormOncologyViewModel.Vidaza_INFORMATION_TxtBox = refFormOncology.Vidaza_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Vidaza_QUANTITY_TxtBox = refFormOncology.Vidaza_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Vidaza_REFILLS_TxtBox = refFormOncology.Vidaza_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Votrient = refFormOncology.ChkBox_Votrient ?? false;
                    refFormOncologyViewModel.Votrient_Strength_TxtBox = refFormOncology.Votrient_Strength_TxtBox;
                    refFormOncologyViewModel.Votrient_INFORMATION_TxtBox = refFormOncology.Votrient_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Votrient_QUANTITY_TxtBox = refFormOncology.Votrient_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Votrient_REFILLS_TxtBox = refFormOncology.Votrient_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Xalkori = refFormOncology.ChkBox_Xalkori ?? false;
                    refFormOncologyViewModel.Xalkori_Strength_TxtBox = refFormOncology.Xalkori_Strength_TxtBox;
                    refFormOncologyViewModel.Xalkori_INFORMATION_TxtBox = refFormOncology.Xalkori_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Xalkori_QUANTITY_TxtBox = refFormOncology.Xalkori_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Xalkori_REFILLS_TxtBox = refFormOncology.Xalkori_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Xeloda = refFormOncology.ChkBox_Xeloda ?? false;
                    refFormOncologyViewModel.Xeloda_Strength_TxtBox = refFormOncology.Xeloda_Strength_TxtBox;
                    refFormOncologyViewModel.Xeloda_INFORMATION_TxtBox = refFormOncology.Xeloda_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Xeloda_QUANTITY_TxtBox = refFormOncology.Xeloda_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Xeloda_REFILLS_TxtBox = refFormOncology.Xeloda_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Xtandi = refFormOncology.ChkBox_Xtandi ?? false;
                    refFormOncologyViewModel.Xtandi_Strength_TxtBox = refFormOncology.Xtandi_Strength_TxtBox;
                    refFormOncologyViewModel.Xtandi_INFORMATION_TxtBox = refFormOncology.Xtandi_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Xtandi_QUANTITY_TxtBox = refFormOncology.Xtandi_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Xtandi_REFILLS_TxtBox = refFormOncology.Xtandi_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Zelboraf = refFormOncology.ChkBox_Zelboraf ?? false;
                    refFormOncologyViewModel.Zelboraf_Strength_TxtBox = refFormOncology.Zelboraf_Strength_TxtBox;
                    refFormOncologyViewModel.Zelboraf_INFORMATION_TxtBox = refFormOncology.Zelboraf_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Zelboraf_QUANTITY_TxtBox = refFormOncology.Zelboraf_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Zelboraf_REFILLS_TxtBox = refFormOncology.Zelboraf_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Zolinza = refFormOncology.ChkBox_Zolinza ?? false;
                    refFormOncologyViewModel.Zolinza_Strength_TxtBox = refFormOncology.Zolinza_Strength_TxtBox;
                    refFormOncologyViewModel.Zolinza_INFORMATION_TxtBox = refFormOncology.Zolinza_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Zolinza_QUANTITY_TxtBox = refFormOncology.Zolinza_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Zolinza_REFILLS_TxtBox = refFormOncology.Zolinza_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Zytiga = refFormOncology.ChkBox_Zytiga ?? false;
                    refFormOncologyViewModel.Zytiga_Strength_TxtBox = refFormOncology.Zytiga_Strength_TxtBox;
                    refFormOncologyViewModel.Zytiga_INFORMATION_TxtBox = refFormOncology.Zytiga_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Zytiga_QUANTITY_TxtBox = refFormOncology.Zytiga_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Zytiga_REFILLS_TxtBox = refFormOncology.Zytiga_REFILLS_TxtBox;
                    refFormOncologyViewModel.ChkBox_Other = refFormOncology.ChkBox_Other ?? false;
                    refFormOncologyViewModel.Other_Strength_TxtBox = refFormOncology.Other_Strength_TxtBox;
                    refFormOncologyViewModel.Other_INFORMATION_TxtBox = refFormOncology.Other_INFORMATION_TxtBox;
                    refFormOncologyViewModel.Other_QUANTITY_TxtBox = refFormOncology.Other_QUANTITY_TxtBox;
                    refFormOncologyViewModel.Other_REFILLS_TxtBox = refFormOncology.Other_REFILLS_TxtBox;







                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormOncologyViewModel.IsSignatured = refFormOncology.IsSignatured ?? false;

                    return View(refFormOncologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method RefFormOncologyViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormOncologyViewModel());
        }

        [HttpPost]
        public JsonResult OncologyReferralForm(RefFormOncologyViewModel refFormOncologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormOncologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormOncology refFormOncology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormOncologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormOncology = _unitOfWork.RefFormOncology.GetSingle(t => t.RefFormOncologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormOncology == null)
                {
                    refFormOncology = new RefFormOncology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form



                refFormOncology.RefFormOncologyId = refFormOncologyViewModel.RefFormOncologyId;
                refFormOncology.FormDate = refFormOncologyViewModel.FormDate;
                refFormOncology.FormNeedsByDate = refFormOncologyViewModel.FormNeedsByDate;
                refFormOncology.ChkBox_ShipToPatient = refFormOncologyViewModel.ChkBox_ShipToPatient;
                refFormOncology.ChkBox_ShipToOffice = refFormOncologyViewModel.ChkBox_ShipToOffice;
                refFormOncology.ChkBox_ShipToOther = refFormOncologyViewModel.ChkBox_ShipToOther;
                refFormOncology.TxtBox_ShipToOther = refFormOncologyViewModel.TxtBox_ShipToOther;
                refFormOncology.Diagnosis_TxtBox = refFormOncologyViewModel.Diagnosis_TxtBox;
                refFormOncology.ICD_10_TxtBox1 = refFormOncologyViewModel.ICD_10_TxtBox1;
                refFormOncology.SecondaryDiagnosis_TxtBox = refFormOncologyViewModel.SecondaryDiagnosis_TxtBox;
                refFormOncology.ICD_10_TxtBox2 = refFormOncologyViewModel.ICD_10_TxtBox2;
                refFormOncology.DrugAllergies_TxtBox = refFormOncologyViewModel.DrugAllergies_TxtBox;
                refFormOncology.ChkBox_RenalDysfunctionYes = refFormOncologyViewModel.ChkBox_RenalDysfunctionYes;
                refFormOncology.ChkBox_RenalDysfunctionNo = refFormOncologyViewModel.ChkBox_RenalDysfunctionNo;
                refFormOncology.ChkBox_LiverDysfunctionYes = refFormOncologyViewModel.ChkBox_LiverDysfunctionYes;
                refFormOncology.ChkBox_LiverDysfunctionNo = refFormOncologyViewModel.ChkBox_LiverDysfunctionNo;
                refFormOncology.SerumCreatinine_TxtBox = refFormOncologyViewModel.SerumCreatinine_TxtBox;
                refFormOncology.HgB_TxtBox = refFormOncologyViewModel.HgB_TxtBox;
                refFormOncology.HCT_TxtBox = refFormOncologyViewModel.HCT_TxtBox;
                refFormOncology.ChkBox_ALKpositive = refFormOncologyViewModel.ChkBox_ALKpositive;
                refFormOncology.Date_TxtBox1 = refFormOncologyViewModel.Date_TxtBox1;
                refFormOncology.Date_TxtBox2 = refFormOncologyViewModel.Date_TxtBox2;
                refFormOncology.Date_TxtBox3 = refFormOncologyViewModel.Date_TxtBox3;
                refFormOncology.ChkBox_ConfirmedBRAF = refFormOncologyViewModel.ChkBox_ConfirmedBRAF;
                refFormOncology.ChkBox_ConfirmedBRAFV600KMutationforMekinist = refFormOncologyViewModel.ChkBox_ConfirmedBRAFV600KMutationforMekinist;
                refFormOncology.ChkBox_PreviouslyonZelboraf = refFormOncologyViewModel.ChkBox_PreviouslyonZelboraf;
                refFormOncology.Weight_TxtBox = refFormOncologyViewModel.Weight_TxtBox;
                refFormOncology.ChkBox_ERPositive = refFormOncologyViewModel.ChkBox_ERPositive;
                refFormOncology.ChkBox_ERNegative = refFormOncologyViewModel.ChkBox_ERNegative;
                refFormOncology.ChkBox_HER2Positive = refFormOncologyViewModel.ChkBox_HER2Positive;
                refFormOncology.ChkBox_HER2Negative = refFormOncologyViewModel.ChkBox_HER2Negative;
                refFormOncology.ChkBox_MetastaticYes = refFormOncologyViewModel.ChkBox_MetastaticYes;
                refFormOncology.ChkBox_MetastaticNo = refFormOncologyViewModel.ChkBox_MetastaticNo;
                refFormOncology.Height_TxtBox = refFormOncologyViewModel.Height_TxtBox;
                refFormOncology.BSA_TxtBox = refFormOncologyViewModel.BSA_TxtBox;
                refFormOncology.ChkBox_Afinitor = refFormOncologyViewModel.ChkBox_Afinitor;
                refFormOncology.Afinitor_Strength_TxtBox = refFormOncologyViewModel.Afinitor_Strength_TxtBox;
                refFormOncology.Afinitor_INFORMATION_TxtBox = refFormOncologyViewModel.Afinitor_INFORMATION_TxtBox;
                refFormOncology.Afinitor_QUANTITY_TxtBox = refFormOncologyViewModel.Afinitor_QUANTITY_TxtBox;
                refFormOncology.Afinitor_REFILLS_TxtBox = refFormOncologyViewModel.Afinitor_REFILLS_TxtBox;
                refFormOncology.ChkBox_Arimidex = refFormOncologyViewModel.ChkBox_Arimidex;
                refFormOncology.Arimidex_Strength_TxtBox = refFormOncologyViewModel.Arimidex_Strength_TxtBox;
                refFormOncology.Arimidex_INFORMATION_TxtBox = refFormOncologyViewModel.Arimidex_INFORMATION_TxtBox;
                refFormOncology.Arimidex_QUANTITY_TxtBox = refFormOncologyViewModel.Arimidex_QUANTITY_TxtBox;
                refFormOncology.Arimidex_REFILLS_TxtBox = refFormOncologyViewModel.Arimidex_REFILLS_TxtBox;
                refFormOncology.ChkBox_Aromasin = refFormOncologyViewModel.ChkBox_Aromasin;
                refFormOncology.Aromasin_Strength_TxtBox = refFormOncologyViewModel.Aromasin_Strength_TxtBox;
                refFormOncology.Aromasin_INFORMATION_TxtBox = refFormOncologyViewModel.Aromasin_INFORMATION_TxtBox;
                refFormOncology.Aromasin_QUANTITY_TxtBox = refFormOncologyViewModel.Aromasin_QUANTITY_TxtBox;
                refFormOncology.Aromasin_REFILLS_TxtBox = refFormOncologyViewModel.Aromasin_REFILLS_TxtBox;
                refFormOncology.ChkBox_Bosulif = refFormOncologyViewModel.ChkBox_Bosulif;
                refFormOncology.Bosulif_Strength_TxtBox = refFormOncologyViewModel.Bosulif_Strength_TxtBox;
                refFormOncology.Bosulif_INFORMATION_TxtBox = refFormOncologyViewModel.Bosulif_INFORMATION_TxtBox;
                refFormOncology.Bosulif_QUANTITY_TxtBox = refFormOncologyViewModel.Bosulif_QUANTITY_TxtBox;
                refFormOncology.Bosulif_REFILLS_TxtBox = refFormOncologyViewModel.Bosulif_REFILLS_TxtBox;
                refFormOncology.ChkBox_Erivedge = refFormOncologyViewModel.ChkBox_Erivedge;
                refFormOncology.Erivedge_Strength_TxtBox = refFormOncologyViewModel.Erivedge_Strength_TxtBox;
                refFormOncology.Erivedge_INFORMATION_TxtBox = refFormOncologyViewModel.Erivedge_INFORMATION_TxtBox;
                refFormOncology.Erivedge_QUANTITY_TxtBox = refFormOncologyViewModel.Erivedge_QUANTITY_TxtBox;
                refFormOncology.Erivedge_REFILLS_TxtBox = refFormOncologyViewModel.Erivedge_REFILLS_TxtBox;
                refFormOncology.ChkBox_Femara = refFormOncologyViewModel.ChkBox_Femara;
                refFormOncology.Femara_Strength_TxtBox = refFormOncologyViewModel.Femara_Strength_TxtBox;
                refFormOncology.Femara_INFORMATION_TxtBox = refFormOncologyViewModel.Femara_INFORMATION_TxtBox;
                refFormOncology.Femara_QUANTITY_TxtBox = refFormOncologyViewModel.Femara_QUANTITY_TxtBox;
                refFormOncology.Femara_REFILLS_TxtBox = refFormOncologyViewModel.Femara_REFILLS_TxtBox;
                refFormOncology.ChkBox_Gleevec = refFormOncologyViewModel.ChkBox_Gleevec;
                refFormOncology.Gleevec_Strength_TxtBox = refFormOncologyViewModel.Gleevec_Strength_TxtBox;
                refFormOncology.Gleevec_INFORMATION_TxtBox = refFormOncologyViewModel.Gleevec_INFORMATION_TxtBox;
                refFormOncology.Gleevec_QUANTITY_TxtBox = refFormOncologyViewModel.Gleevec_QUANTITY_TxtBox;
                refFormOncology.Gleevec_REFILLS_TxtBox = refFormOncologyViewModel.Gleevec_REFILLS_TxtBox;
                refFormOncology.ChkBox_Hycamtin = refFormOncologyViewModel.ChkBox_Hycamtin;
                refFormOncology.Hycamtin_Strength_TxtBox = refFormOncologyViewModel.Hycamtin_Strength_TxtBox;
                refFormOncology.Hycamtin_INFORMATION_TxtBox = refFormOncologyViewModel.Hycamtin_INFORMATION_TxtBox;
                refFormOncology.Hycamtin_QUANTITY_TxtBox = refFormOncologyViewModel.Hycamtin_QUANTITY_TxtBox;
                refFormOncology.Hycamtin_REFILLS_TxtBox = refFormOncologyViewModel.Hycamtin_REFILLS_TxtBox;
                refFormOncology.ChkBox_Ibrance = refFormOncologyViewModel.ChkBox_Ibrance;
                refFormOncology.Ibrance_Strength_TxtBox = refFormOncologyViewModel.Ibrance_Strength_TxtBox;
                refFormOncology.Ibrance_INFORMATION_TxtBox = refFormOncologyViewModel.Ibrance_INFORMATION_TxtBox;
                refFormOncology.Ibrance_QUANTITY_TxtBox = refFormOncologyViewModel.Ibrance_QUANTITY_TxtBox;
                refFormOncology.Ibrance_REFILLS_TxtBox = refFormOncologyViewModel.Ibrance_REFILLS_TxtBox;
                refFormOncology.ChkBox_Inlyta = refFormOncologyViewModel.ChkBox_Inlyta;
                refFormOncology.Inlyta_Strength_TxtBox = refFormOncologyViewModel.Inlyta_Strength_TxtBox;
                refFormOncology.Inlyta_INFORMATION_TxtBox = refFormOncologyViewModel.Inlyta_INFORMATION_TxtBox;
                refFormOncology.Inlyta_QUANTITY_TxtBox = refFormOncologyViewModel.Inlyta_QUANTITY_TxtBox;
                refFormOncology.Inlyta_REFILLS_TxtBox = refFormOncologyViewModel.Inlyta_REFILLS_TxtBox;
                refFormOncology.ChkBox_Mekinist = refFormOncologyViewModel.ChkBox_Mekinist;
                refFormOncology.Mekinist_Strength_TxtBox = refFormOncologyViewModel.Mekinist_Strength_TxtBox;
                refFormOncology.Mekinist_INFORMATION_TxtBox = refFormOncologyViewModel.Mekinist_INFORMATION_TxtBox;
                refFormOncology.Mekinist_QUANTITY_TxtBox = refFormOncologyViewModel.Mekinist_QUANTITY_TxtBox;
                refFormOncology.Mekinist_REFILLS_TxtBox = refFormOncologyViewModel.Mekinist_REFILLS_TxtBox;
                refFormOncology.ChkBox_Nplate = refFormOncologyViewModel.ChkBox_Nplate;
                refFormOncology.Nplate_Strength_TxtBox = refFormOncologyViewModel.Nplate_Strength_TxtBox;
                refFormOncology.Nplate_INFORMATION_TxtBox = refFormOncologyViewModel.Nplate_INFORMATION_TxtBox;
                refFormOncology.Nplate_QUANTITY_TxtBox = refFormOncologyViewModel.Nplate_QUANTITY_TxtBox;
                refFormOncology.Nplate_REFILLS_TxtBox = refFormOncologyViewModel.Nplate_REFILLS_TxtBox;
                refFormOncology.ChkBox_Promacta = refFormOncologyViewModel.ChkBox_Promacta;
                refFormOncology.Promacta_Strength_TxtBox = refFormOncologyViewModel.Promacta_Strength_TxtBox;
                refFormOncology.Promacta_INFORMATION_TxtBox = refFormOncologyViewModel.Promacta_INFORMATION_TxtBox;
                refFormOncology.Promacta_QUANTITY_TxtBox = refFormOncologyViewModel.Promacta_QUANTITY_TxtBox;
                refFormOncology.Promacta_REFILLS_TxtBox = refFormOncologyViewModel.Promacta_REFILLS_TxtBox;
                refFormOncology.ChkBox_Sprycel = refFormOncologyViewModel.ChkBox_Sprycel;
                refFormOncology.Sprycel_Strength_TxtBox = refFormOncologyViewModel.Sprycel_Strength_TxtBox;
                refFormOncology.Sprycel_INFORMATION_TxtBox = refFormOncologyViewModel.Sprycel_INFORMATION_TxtBox;
                refFormOncology.Sprycel_QUANTITY_TxtBox = refFormOncologyViewModel.Sprycel_QUANTITY_TxtBox;
                refFormOncology.Sprycel_REFILLS_TxtBox = refFormOncologyViewModel.Sprycel_REFILLS_TxtBox;
                refFormOncology.ChkBox_Sutent = refFormOncologyViewModel.ChkBox_Sutent;
                refFormOncology.Sutent_Strength_TxtBox = refFormOncologyViewModel.Sutent_Strength_TxtBox;
                refFormOncology.Sutent_INFORMATION_TxtBox = refFormOncologyViewModel.Sutent_INFORMATION_TxtBox;
                refFormOncology.Sutent_QUANTITY_TxtBox = refFormOncologyViewModel.Sutent_QUANTITY_TxtBox;
                refFormOncology.Sutent_REFILLS_TxtBox = refFormOncologyViewModel.Sutent_REFILLS_TxtBox;
                refFormOncology.ChkBox_Sylatron = refFormOncologyViewModel.ChkBox_Sylatron;
                refFormOncology.Sylatron_Strength_TxtBox = refFormOncologyViewModel.Sylatron_Strength_TxtBox;
                refFormOncology.Sylatron_INFORMATION_TxtBox = refFormOncologyViewModel.Sylatron_INFORMATION_TxtBox;
                refFormOncology.Sylatron_QUANTITY_TxtBox = refFormOncologyViewModel.Sylatron_QUANTITY_TxtBox;
                refFormOncology.Sylatron_REFILLS_TxtBox = refFormOncologyViewModel.Sylatron_REFILLS_TxtBox;
                refFormOncology.ChkBox_Tafinlar = refFormOncologyViewModel.ChkBox_Tafinlar;
                refFormOncology.Tafinlar_Strength_TxtBox = refFormOncologyViewModel.Tafinlar_Strength_TxtBox;
                refFormOncology.Tafinlar_INFORMATION_TxtBox = refFormOncologyViewModel.Tafinlar_INFORMATION_TxtBox;
                refFormOncology.Tafinlar_QUANTITY_TxtBox = refFormOncologyViewModel.Tafinlar_QUANTITY_TxtBox;
                refFormOncology.Tafinlar_REFILLS_TxtBox = refFormOncologyViewModel.Tafinlar_REFILLS_TxtBox;
                refFormOncology.ChkBox_Tarceva = refFormOncologyViewModel.ChkBox_Tarceva;
                refFormOncology.Tarceva_Strength_TxtBox = refFormOncologyViewModel.Tarceva_Strength_TxtBox;
                refFormOncology.Tarceva_INFORMATION_TxtBox = refFormOncologyViewModel.Tarceva_INFORMATION_TxtBox;
                refFormOncology.Tarceva_QUANTITY_TxtBox = refFormOncologyViewModel.Tarceva_QUANTITY_TxtBox;
                refFormOncology.Tarceva_REFILLS_TxtBox = refFormOncologyViewModel.Tarceva_REFILLS_TxtBox;
                refFormOncology.ChkBox_Targretin = refFormOncologyViewModel.ChkBox_Targretin;
                refFormOncology.Targretin_Strength_TxtBox = refFormOncologyViewModel.Targretin_Strength_TxtBox;
                refFormOncology.Targretin_INFORMATION_TxtBox = refFormOncologyViewModel.Targretin_INFORMATION_TxtBox;
                refFormOncology.Targretin_QUANTITY_TxtBox = refFormOncologyViewModel.Targretin_QUANTITY_TxtBox;
                refFormOncology.Targretin_REFILLS_TxtBox = refFormOncologyViewModel.Targretin_REFILLS_TxtBox;
                refFormOncology.ChkBox_Tasigna = refFormOncologyViewModel.ChkBox_Tasigna;
                refFormOncology.Tasigna_Strength_TxtBox = refFormOncologyViewModel.Tasigna_Strength_TxtBox;
                refFormOncology.Tasigna_INFORMATION_TxtBox = refFormOncologyViewModel.Tasigna_INFORMATION_TxtBox;
                refFormOncology.Tasigna_QUANTITY_TxtBox = refFormOncologyViewModel.Tasigna_QUANTITY_TxtBox;
                refFormOncology.Tasigna_REFILLS_TxtBox = refFormOncologyViewModel.Tasigna_REFILLS_TxtBox;
                refFormOncology.ChkBox_Temodar = refFormOncologyViewModel.ChkBox_Temodar;
                refFormOncology.Temodar_Strength_TxtBox = refFormOncologyViewModel.Temodar_Strength_TxtBox;
                refFormOncology.Temodar_INFORMATION_TxtBox = refFormOncologyViewModel.Temodar_INFORMATION_TxtBox;
                refFormOncology.Temodar_QUANTITY_TxtBox = refFormOncologyViewModel.Temodar_QUANTITY_TxtBox;
                refFormOncology.Temodar_REFILLS_TxtBox = refFormOncologyViewModel.Temodar_REFILLS_TxtBox;
                refFormOncology.ChkBox_Tykerb = refFormOncologyViewModel.ChkBox_Tykerb;
                refFormOncology.Tykerb_Strength_TxtBox = refFormOncologyViewModel.Tykerb_Strength_TxtBox;
                refFormOncology.Tykerb_INFORMATION_TxtBox = refFormOncologyViewModel.Tykerb_INFORMATION_TxtBox;
                refFormOncology.Tykerb_QUANTITY_TxtBox = refFormOncologyViewModel.Tykerb_QUANTITY_TxtBox;
                refFormOncology.Tykerb_REFILLS_TxtBox = refFormOncologyViewModel.Tykerb_REFILLS_TxtBox;
                refFormOncology.ChkBox_Vidaza = refFormOncologyViewModel.ChkBox_Vidaza;
                refFormOncology.Vidaza_Strength_TxtBox = refFormOncologyViewModel.Vidaza_Strength_TxtBox;
                refFormOncology.Vidaza_INFORMATION_TxtBox = refFormOncologyViewModel.Vidaza_INFORMATION_TxtBox;
                refFormOncology.Vidaza_QUANTITY_TxtBox = refFormOncologyViewModel.Vidaza_QUANTITY_TxtBox;
                refFormOncology.Vidaza_REFILLS_TxtBox = refFormOncologyViewModel.Vidaza_REFILLS_TxtBox;
                refFormOncology.ChkBox_Votrient = refFormOncologyViewModel.ChkBox_Votrient;
                refFormOncology.Votrient_Strength_TxtBox = refFormOncologyViewModel.Votrient_Strength_TxtBox;
                refFormOncology.Votrient_INFORMATION_TxtBox = refFormOncologyViewModel.Votrient_INFORMATION_TxtBox;
                refFormOncology.Votrient_QUANTITY_TxtBox = refFormOncologyViewModel.Votrient_QUANTITY_TxtBox;
                refFormOncology.Votrient_REFILLS_TxtBox = refFormOncologyViewModel.Votrient_REFILLS_TxtBox;
                refFormOncology.ChkBox_Xalkori = refFormOncologyViewModel.ChkBox_Xalkori;
                refFormOncology.Xalkori_Strength_TxtBox = refFormOncologyViewModel.Xalkori_Strength_TxtBox;
                refFormOncology.Xalkori_INFORMATION_TxtBox = refFormOncologyViewModel.Xalkori_INFORMATION_TxtBox;
                refFormOncology.Xalkori_QUANTITY_TxtBox = refFormOncologyViewModel.Xalkori_QUANTITY_TxtBox;
                refFormOncology.Xalkori_REFILLS_TxtBox = refFormOncologyViewModel.Xalkori_REFILLS_TxtBox;
                refFormOncology.ChkBox_Xeloda = refFormOncologyViewModel.ChkBox_Xeloda;
                refFormOncology.Xeloda_Strength_TxtBox = refFormOncologyViewModel.Xeloda_Strength_TxtBox;
                refFormOncology.Xeloda_INFORMATION_TxtBox = refFormOncologyViewModel.Xeloda_INFORMATION_TxtBox;
                refFormOncology.Xeloda_QUANTITY_TxtBox = refFormOncologyViewModel.Xeloda_QUANTITY_TxtBox;
                refFormOncology.Xeloda_REFILLS_TxtBox = refFormOncologyViewModel.Xeloda_REFILLS_TxtBox;
                refFormOncology.ChkBox_Xtandi = refFormOncologyViewModel.ChkBox_Xtandi;
                refFormOncology.Xtandi_Strength_TxtBox = refFormOncologyViewModel.Xtandi_Strength_TxtBox;
                refFormOncology.Xtandi_INFORMATION_TxtBox = refFormOncologyViewModel.Xtandi_INFORMATION_TxtBox;
                refFormOncology.Xtandi_QUANTITY_TxtBox = refFormOncologyViewModel.Xtandi_QUANTITY_TxtBox;
                refFormOncology.Xtandi_REFILLS_TxtBox = refFormOncologyViewModel.Xtandi_REFILLS_TxtBox;
                refFormOncology.ChkBox_Zelboraf = refFormOncologyViewModel.ChkBox_Zelboraf;
                refFormOncology.Zelboraf_Strength_TxtBox = refFormOncologyViewModel.Zelboraf_Strength_TxtBox;
                refFormOncology.Zelboraf_INFORMATION_TxtBox = refFormOncologyViewModel.Zelboraf_INFORMATION_TxtBox;
                refFormOncology.Zelboraf_QUANTITY_TxtBox = refFormOncologyViewModel.Zelboraf_QUANTITY_TxtBox;
                refFormOncology.Zelboraf_REFILLS_TxtBox = refFormOncologyViewModel.Zelboraf_REFILLS_TxtBox;
                refFormOncology.ChkBox_Zolinza = refFormOncologyViewModel.ChkBox_Zolinza;
                refFormOncology.Zolinza_Strength_TxtBox = refFormOncologyViewModel.Zolinza_Strength_TxtBox;
                refFormOncology.Zolinza_INFORMATION_TxtBox = refFormOncologyViewModel.Zolinza_INFORMATION_TxtBox;
                refFormOncology.Zolinza_QUANTITY_TxtBox = refFormOncologyViewModel.Zolinza_QUANTITY_TxtBox;
                refFormOncology.Zolinza_REFILLS_TxtBox = refFormOncologyViewModel.Zolinza_REFILLS_TxtBox;
                refFormOncology.ChkBox_Zytiga = refFormOncologyViewModel.ChkBox_Zytiga;
                refFormOncology.Zytiga_Strength_TxtBox = refFormOncologyViewModel.Zytiga_Strength_TxtBox;
                refFormOncology.Zytiga_INFORMATION_TxtBox = refFormOncologyViewModel.Zytiga_INFORMATION_TxtBox;
                refFormOncology.Zytiga_QUANTITY_TxtBox = refFormOncologyViewModel.Zytiga_QUANTITY_TxtBox;
                refFormOncology.Zytiga_REFILLS_TxtBox = refFormOncologyViewModel.Zytiga_REFILLS_TxtBox;
                refFormOncology.ChkBox_Other = refFormOncologyViewModel.ChkBox_Other;
                refFormOncology.Other_Strength_TxtBox = refFormOncologyViewModel.Other_Strength_TxtBox;
                refFormOncology.Other_INFORMATION_TxtBox = refFormOncologyViewModel.Other_INFORMATION_TxtBox;
                refFormOncology.Other_QUANTITY_TxtBox = refFormOncologyViewModel.Other_QUANTITY_TxtBox;
                refFormOncology.Other_REFILLS_TxtBox = refFormOncologyViewModel.Other_REFILLS_TxtBox;





                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormOncology.ModifiedBy = CurrentUser.UserId;
                refFormOncology.ModifiedOn = DateTime.UtcNow;

                refFormOncology.IsSignatured = refFormOncologyViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormOncology.Update(refFormOncology);
                    AuditLogger.AuditTracker("Edit OncologyReferralForm", "A OncologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormOncology.CreatedBy = CurrentUser.UserId;
                    refFormOncology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormOncology.Insert(refFormOncology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New OncologyReferralForm", "A new OncologyReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormOncologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormOncology.RefFormOncologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save refFormOncology Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method refFormOncology PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save refFormOncology Referral Form Unsuccessfully.", success = false });
        }
        //lmfl infusiononcology referral form
        public ActionResult lmfl_infusiononcology_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl infusiononcology referral form"));
            return RedirectToAction("OncologyReferralForm_2", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 56 });
        }
        //Oncology2.................................
        public ActionResult OncologyReferralForm_2(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Oncology Referral Form (2)"));
                    referralFormId = referralForm?.ReferralFormId ?? 15;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormOncology_2ViewModel refFormOncology_2ViewModel = new RefFormOncology_2ViewModel();

                //Set ReferralFormId
                refFormOncology_2ViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormOncology_2ViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormOncology_2ViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormOncology_2ViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormOncology_2ViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormOncology_2ViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormOncology_2ViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormOncology_2ViewModel.PhysicianFullName = physician.FullName;
                        refFormOncology_2ViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormOncology_2ViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormOncology_2ViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormOncology_2ViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormOncology_2ViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormOncology_2ViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormOncology_2ViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormOncology_2 refFormOncology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormOncology = _unitOfWork.RefFormOncology_2.GetSingle(t => t.RefFormOncologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormOncology == null) refFormOncology = new RefFormOncology_2();


                    refFormOncology_2ViewModel.RefFormOncologyId = refFormOncology.RefFormOncologyId;

                    //Form
                    //Add your code here.



                    refFormOncology_2ViewModel.RefFormOncologyId = refFormOncology.RefFormOncologyId;

                    refFormOncology_2ViewModel.FormDate = refFormOncology.FormDate;
                    refFormOncology_2ViewModel.FormNeedsByDate = refFormOncology.FormNeedsByDate;
                    refFormOncology_2ViewModel.ChkBox_ShipToPatient = refFormOncology.ChkBox_ShipToPatient ?? false;
                    refFormOncology_2ViewModel.ChkBox_ShipToOffice = refFormOncology.ChkBox_ShipToOffice ?? false;
                    refFormOncology_2ViewModel.ChkBox_ShipToOther = refFormOncology.ChkBox_ShipToOther ?? false;
                    refFormOncology_2ViewModel.TxtBox_ShipToOther = refFormOncology.TxtBox_ShipToOther;

                    refFormOncology_2ViewModel.PrimaryDiagnosis_TxtBox = refFormOncology.PrimaryDiagnosis_TxtBox;
                    refFormOncology_2ViewModel.ICD_10_TxtBox1 = refFormOncology.ICD_10_TxtBox1;
                    refFormOncology_2ViewModel.SecondaryDiagnosis_TxtBox = refFormOncology.SecondaryDiagnosis_TxtBox;
                    refFormOncology_2ViewModel.ICD_10_TxtBox2 = refFormOncology.ICD_10_TxtBox2;
                    refFormOncology_2ViewModel.DrugAllergies_TxtBox = refFormOncology.DrugAllergies_TxtBox;
                    refFormOncology_2ViewModel.Weight_TxtBox = refFormOncology.Weight_TxtBox != null ? refFormOncology.Weight_TxtBox.Value : 0D;
                    refFormOncology_2ViewModel.Height_TxtBox = refFormOncology.Height_TxtBox != null ? refFormOncology.Height_TxtBox.Value : 0D;
                    refFormOncology_2ViewModel.BodySurfaceArea_TxtBox = refFormOncology.BodySurfaceArea_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_ABRAXANE = refFormOncology.ChkBox_ABRAXANE ?? false;
                    refFormOncology_2ViewModel.ABRAXANE_Strength_TxtBox = refFormOncology.ABRAXANE_Strength_TxtBox;
                    refFormOncology_2ViewModel.ABRAXANE_SIG_TxtBox = refFormOncology.ABRAXANE_SIG_TxtBox;
                    refFormOncology_2ViewModel.ABRAXANE_CYCLES_TxtBox = refFormOncology.ABRAXANE_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.ABRAXANE_QUANTITY_TxtBox = refFormOncology.ABRAXANE_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.ABRAXANE_REFILLS_TxtBox = refFormOncology.ABRAXANE_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_ADCETRIS = refFormOncology.ChkBox_ADCETRIS ?? false;
                    refFormOncology_2ViewModel.ADCETRIS_Strength_TxtBox = refFormOncology.ADCETRIS_Strength_TxtBox;
                    refFormOncology_2ViewModel.ADCETRIS_SIG_TxtBox = refFormOncology.ADCETRIS_SIG_TxtBox;
                    refFormOncology_2ViewModel.ADCETRIS_CYCLES_TxtBox = refFormOncology.ADCETRIS_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.ADCETRIS_QUANTITY_TxtBox = refFormOncology.ADCETRIS_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.ADCETRIS_REFILLS_TxtBox = refFormOncology.ADCETRIS_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_ALIMTA = refFormOncology.ChkBox_ALIMTA ?? false;
                    refFormOncology_2ViewModel.ALIMTA_Strength_TxtBox = refFormOncology.ALIMTA_Strength_TxtBox;
                    refFormOncology_2ViewModel.ALIMTA_SIG_TxtBox = refFormOncology.ALIMTA_SIG_TxtBox;
                    refFormOncology_2ViewModel.ALIMTA_CYCLES_TxtBox = refFormOncology.ALIMTA_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.ALIMTA_QUANTITY_TxtBox = refFormOncology.ALIMTA_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.ALIMTA_REFILLS_TxtBox = refFormOncology.ALIMTA_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_AVASTIN = refFormOncology.ChkBox_AVASTIN ?? false;
                    refFormOncology_2ViewModel.AVASTIN_Strength_TxtBox = refFormOncology.AVASTIN_Strength_TxtBox;
                    refFormOncology_2ViewModel.AVASTIN_SIG_TxtBox = refFormOncology.AVASTIN_SIG_TxtBox;
                    refFormOncology_2ViewModel.AVASTIN_CYCLES_TxtBox = refFormOncology.AVASTIN_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.AVASTIN_QUANTITY_TxtBox = refFormOncology.AVASTIN_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.AVASTIN_REFILLS_TxtBox = refFormOncology.AVASTIN_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_CARBOPLATIN = refFormOncology.ChkBox_CARBOPLATIN ?? false;
                    refFormOncology_2ViewModel.CARBOPLATIN_Strength_TxtBox = refFormOncology.CARBOPLATIN_Strength_TxtBox;
                    refFormOncology_2ViewModel.CARBOPLATIN_SIG_TxtBox = refFormOncology.CARBOPLATIN_SIG_TxtBox;
                    refFormOncology_2ViewModel.CARBOPLATIN_CYCLES_TxtBox = refFormOncology.CARBOPLATIN_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.CARBOPLATIN_QUANTITY_TxtBox = refFormOncology.CARBOPLATIN_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.CARBOPLATIN_REFILLS_TxtBox = refFormOncology.CARBOPLATIN_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_ELOXATIN = refFormOncology.ChkBox_ELOXATIN ?? false;
                    refFormOncology_2ViewModel.ELOXATIN_Strength_TxtBox = refFormOncology.ELOXATIN_Strength_TxtBox;
                    refFormOncology_2ViewModel.ELOXATIN_SIG_TxtBox = refFormOncology.ELOXATIN_SIG_TxtBox;
                    refFormOncology_2ViewModel.ELOXATIN_CYCLES_TxtBox = refFormOncology.ELOXATIN_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.ELOXATIN_QUANTITY_TxtBox = refFormOncology.ELOXATIN_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.ELOXATIN_REFILLS_TxtBox = refFormOncology.ELOXATIN_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_HERCEPTIN = refFormOncology.ChkBox_HERCEPTIN ?? false;
                    refFormOncology_2ViewModel.HERCEPTIN_Strength_TxtBox = refFormOncology.HERCEPTIN_Strength_TxtBox;
                    refFormOncology_2ViewModel.HERCEPTIN_SIG_TxtBox = refFormOncology.HERCEPTIN_SIG_TxtBox;
                    refFormOncology_2ViewModel.HERCEPTIN_CYCLES_TxtBox = refFormOncology.HERCEPTIN_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.HERCEPTIN_QUANTITY_TxtBox = refFormOncology.HERCEPTIN_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.HERCEPTIN_REFILLS_TxtBox = refFormOncology.HERCEPTIN_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_RITUXAN = refFormOncology.ChkBox_RITUXAN ?? false;
                    refFormOncology_2ViewModel.RITUXAN_Strength_TxtBox = refFormOncology.RITUXAN_Strength_TxtBox;
                    refFormOncology_2ViewModel.RITUXAN_SIG_TxtBox = refFormOncology.RITUXAN_SIG_TxtBox;
                    refFormOncology_2ViewModel.RITUXAN_CYCLES_TxtBox = refFormOncology.RITUXAN_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.RITUXAN_QUANTITY_TxtBox = refFormOncology.RITUXAN_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.RITUXAN_REFILLS_TxtBox = refFormOncology.RITUXAN_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_CISPLATIN = refFormOncology.ChkBox_CISPLATIN ?? false;
                    refFormOncology_2ViewModel.CISPLATIN_Strength_TxtBox = refFormOncology.CISPLATIN_Strength_TxtBox;
                    refFormOncology_2ViewModel.CISPLATIN_SIG_TxtBox = refFormOncology.CISPLATIN_SIG_TxtBox;
                    refFormOncology_2ViewModel.CISPLATIN_CYCLES_TxtBox = refFormOncology.CISPLATIN_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.CISPLATIN_QUANTITY_TxtBox = refFormOncology.CISPLATIN_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.CISPLATIN_REFILLS_TxtBox = refFormOncology.CISPLATIN_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_DOCETAXEL = refFormOncology.ChkBox_DOCETAXEL ?? false;
                    refFormOncology_2ViewModel.DOCETAXEL_Strength_TxtBox = refFormOncology.DOCETAXEL_Strength_TxtBox;
                    refFormOncology_2ViewModel.DOCETAXEL_SIG_TxtBox = refFormOncology.DOCETAXEL_SIG_TxtBox;
                    refFormOncology_2ViewModel.DOCETAXEL_CYCLES_TxtBox = refFormOncology.DOCETAXEL_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.DOCETAXEL_QUANTITY_TxtBox = refFormOncology.DOCETAXEL_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.DOCETAXEL_REFILLS_TxtBox = refFormOncology.DOCETAXEL_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_ERBITUX = refFormOncology.ChkBox_ERBITUX ?? false;
                    refFormOncology_2ViewModel.ERBITUX_Strength_TxtBox = refFormOncology.ERBITUX_Strength_TxtBox;
                    refFormOncology_2ViewModel.ERBITUX_SIG_TxtBox = refFormOncology.ERBITUX_SIG_TxtBox;
                    refFormOncology_2ViewModel.ERBITUX_CYCLES_TxtBox = refFormOncology.ERBITUX_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.ERBITUX_QUANTITY_TxtBox = refFormOncology.ERBITUX_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.ERBITUX_REFILLS_TxtBox = refFormOncology.ERBITUX_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_GEMCITABINE = refFormOncology.ChkBox_GEMCITABINE ?? false;
                    refFormOncology_2ViewModel.GEMCITABINE_Strength_TxtBox = refFormOncology.GEMCITABINE_Strength_TxtBox;
                    refFormOncology_2ViewModel.GEMCITABINE_SIG_TxtBox = refFormOncology.GEMCITABINE_SIG_TxtBox;
                    refFormOncology_2ViewModel.GEMCITABINE_CYCLES_TxtBox = refFormOncology.GEMCITABINE_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.GEMCITABINE_QUANTITY_TxtBox = refFormOncology.GEMCITABINE_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.GEMCITABINE_REFILLS_TxtBox = refFormOncology.GEMCITABINE_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_KADCYLA = refFormOncology.ChkBox_KADCYLA ?? false;
                    refFormOncology_2ViewModel.KADCYLA_Strength_TxtBox = refFormOncology.KADCYLA_Strength_TxtBox;
                    refFormOncology_2ViewModel.KADCYLA_SIG_TxtBox = refFormOncology.KADCYLA_SIG_TxtBox;
                    refFormOncology_2ViewModel.KADCYLA_CYCLES_TxtBox = refFormOncology.KADCYLA_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.KADCYLA_QUANTITY_TxtBox = refFormOncology.KADCYLA_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.KADCYLA_REFILLS_TxtBox = refFormOncology.KADCYLA_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_PACLITAXEL = refFormOncology.ChkBox_PACLITAXEL ?? false;
                    refFormOncology_2ViewModel.PACLITAXEL_Strength_TxtBox = refFormOncology.PACLITAXEL_Strength_TxtBox;
                    refFormOncology_2ViewModel.PACLITAXEL_SIG_TxtBox = refFormOncology.PACLITAXEL_SIG_TxtBox;
                    refFormOncology_2ViewModel.PACLITAXEL_CYCLES_TxtBox = refFormOncology.PACLITAXEL_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.PACLITAXEL_QUANTITY_TxtBox = refFormOncology.PACLITAXEL_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.PACLITAXEL_REFILLS_TxtBox = refFormOncology.PACLITAXEL_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_TORISEL = refFormOncology.ChkBox_TORISEL ?? false;
                    refFormOncology_2ViewModel.TORISEL_Strength_TxtBox = refFormOncology.TORISEL_Strength_TxtBox;
                    refFormOncology_2ViewModel.TORISEL_SIG_TxtBox = refFormOncology.TORISEL_SIG_TxtBox;
                    refFormOncology_2ViewModel.TORISEL_CYCLES_TxtBox = refFormOncology.TORISEL_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.TORISEL_QUANTITY_TxtBox = refFormOncology.TORISEL_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.TORISEL_REFILLS_TxtBox = refFormOncology.TORISEL_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_VELCADE = refFormOncology.ChkBox_VELCADE ?? false;
                    refFormOncology_2ViewModel.VELCADE_Strength_TxtBox = refFormOncology.VELCADE_Strength_TxtBox;
                    refFormOncology_2ViewModel.VELCADE_SIG_TxtBox = refFormOncology.VELCADE_SIG_TxtBox;
                    refFormOncology_2ViewModel.VELCADE_CYCLES_TxtBox = refFormOncology.VELCADE_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.VELCADE_QUANTITY_TxtBox = refFormOncology.VELCADE_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.VELCADE_REFILLS_TxtBox = refFormOncology.VELCADE_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_ZOMETA = refFormOncology.ChkBox_ZOMETA ?? false;
                    refFormOncology_2ViewModel.ZOMETA_Strength_TxtBox = refFormOncology.ZOMETA_Strength_TxtBox;
                    refFormOncology_2ViewModel.ZOMETA_SIG_TxtBox = refFormOncology.ZOMETA_SIG_TxtBox;
                    refFormOncology_2ViewModel.ZOMETA_CYCLES_TxtBox = refFormOncology.ZOMETA_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.ZOMETA_QUANTITY_TxtBox = refFormOncology.ZOMETA_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.ZOMETA_REFILLS_TxtBox = refFormOncology.ZOMETA_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_OTHER1 = refFormOncology.ChkBox_OTHER1 ?? false;
                    refFormOncology_2ViewModel.OTHER1_Strength_TxtBox = refFormOncology.OTHER1_Strength_TxtBox;
                    refFormOncology_2ViewModel.OTHER1_SIG_TxtBox = refFormOncology.OTHER1_SIG_TxtBox;
                    refFormOncology_2ViewModel.OTHER1_CYCLES_TxtBox = refFormOncology.OTHER1_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.OTHER1_QUANTITY_TxtBox = refFormOncology.OTHER1_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.OTHER1_REFILLS_TxtBox = refFormOncology.OTHER1_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_OTHER2 = refFormOncology.ChkBox_OTHER2 ?? false;
                    refFormOncology_2ViewModel.OTHER2_Strength_TxtBox = refFormOncology.OTHER2_Strength_TxtBox;
                    refFormOncology_2ViewModel.OTHER2_SIG_TxtBox = refFormOncology.OTHER2_SIG_TxtBox;
                    refFormOncology_2ViewModel.OTHER2_CYCLES_TxtBox = refFormOncology.OTHER2_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.OTHER2_QUANTITY_TxtBox = refFormOncology.OTHER2_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.OTHER2_REFILLS_TxtBox = refFormOncology.OTHER2_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_OTHER3 = refFormOncology.ChkBox_OTHER3 ?? false;
                    refFormOncology_2ViewModel.OTHER3_Strength_TxtBox = refFormOncology.OTHER3_Strength_TxtBox;
                    refFormOncology_2ViewModel.OTHER3_SIG_TxtBox = refFormOncology.OTHER3_SIG_TxtBox;
                    refFormOncology_2ViewModel.OTHER3_CYCLES_TxtBox = refFormOncology.OTHER3_CYCLES_TxtBox;
                    refFormOncology_2ViewModel.OTHER3_QUANTITY_TxtBox = refFormOncology.OTHER3_QUANTITY_TxtBox;
                    refFormOncology_2ViewModel.OTHER3_REFILLS_TxtBox = refFormOncology.OTHER3_REFILLS_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_DEXAMETHASONE = refFormOncology.ChkBox_DEXAMETHASONE ?? false;
                    refFormOncology_2ViewModel.DEXAMETHASONE_TxtBox = refFormOncology.DEXAMETHASONE_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_DIPHENHYDRAMINE = refFormOncology.ChkBox_DIPHENHYDRAMINE ?? false;
                    refFormOncology_2ViewModel.DIPHENHYDRAMINE_TxtBox = refFormOncology.DIPHENHYDRAMINE_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_RANITIDINE = refFormOncology.ChkBox_RANITIDINE ?? false;
                    refFormOncology_2ViewModel.RANITIDINE_TxtBox = refFormOncology.RANITIDINE_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_ONDANSETRON = refFormOncology.ChkBox_ONDANSETRON ?? false;
                    refFormOncology_2ViewModel.ONDANSETRON_TxtBox = refFormOncology.ONDANSETRON_TxtBox;
                    refFormOncology_2ViewModel.ChkBox_OTHER4 = refFormOncology.ChkBox_OTHER4 ?? false;
                    refFormOncology_2ViewModel.DOSE_TxtBox = refFormOncology.DOSE_TxtBox;
                    refFormOncology_2ViewModel.SIG_TxtBox = refFormOncology.SIG_TxtBox;
                    refFormOncology_2ViewModel.REFILLS_TxtBox = refFormOncology.REFILLS_TxtBox;
                    refFormOncology_2ViewModel.OTHER4_TxtBox = refFormOncology.OTHER4_TxtBox;







                    //refFormCysticFibrosisViewModel.Date1 = refFormCysticFibrosi.Date1;
                    //refFormCysticFibrosisViewModel.Date2 = refFormCysticFibrosi.Date2;

                    refFormOncology_2ViewModel.IsSignatured = refFormOncology.IsSignatured ?? false;

                    return View(refFormOncology_2ViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method refFormOncology_2ViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormOncology_2ViewModel());
        }

        [HttpPost]
        public JsonResult OncologyReferralForm_2(RefFormOncology_2ViewModel refFormOncology_2ViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Cardiovascular Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 1;

                int referralFormId = refFormOncology_2ViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormOncology_2 refFormOncology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormOncology_2ViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormOncology = _unitOfWork.RefFormOncology_2.GetSingle(t => t.RefFormOncologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormOncology == null)
                {
                    refFormOncology = new RefFormOncology_2();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                //Form



                refFormOncology.RefFormOncologyId = refFormOncology_2ViewModel.RefFormOncologyId;
                refFormOncology.FormDate = refFormOncology_2ViewModel.FormDate;
                refFormOncology.FormNeedsByDate = refFormOncology_2ViewModel.FormNeedsByDate;
                refFormOncology.ChkBox_ShipToPatient = refFormOncology_2ViewModel.ChkBox_ShipToPatient;
                refFormOncology.ChkBox_ShipToOffice = refFormOncology_2ViewModel.ChkBox_ShipToOffice;
                refFormOncology.ChkBox_ShipToOther = refFormOncology_2ViewModel.ChkBox_ShipToOther;
                refFormOncology.TxtBox_ShipToOther = refFormOncology_2ViewModel.TxtBox_ShipToOther;
                refFormOncology.PrimaryDiagnosis_TxtBox = refFormOncology_2ViewModel.PrimaryDiagnosis_TxtBox;
                refFormOncology.ICD_10_TxtBox1 = refFormOncology_2ViewModel.ICD_10_TxtBox1;
                refFormOncology.SecondaryDiagnosis_TxtBox = refFormOncology_2ViewModel.SecondaryDiagnosis_TxtBox;
                refFormOncology.ICD_10_TxtBox2 = refFormOncology_2ViewModel.ICD_10_TxtBox2;
                refFormOncology.DrugAllergies_TxtBox = refFormOncology_2ViewModel.DrugAllergies_TxtBox;
                refFormOncology.Weight_TxtBox = refFormOncology_2ViewModel.Weight_TxtBox;
                refFormOncology.Height_TxtBox = refFormOncology_2ViewModel.Height_TxtBox;
                refFormOncology.BodySurfaceArea_TxtBox = refFormOncology_2ViewModel.BodySurfaceArea_TxtBox;
                refFormOncology.ChkBox_ABRAXANE = refFormOncology_2ViewModel.ChkBox_ABRAXANE;
                refFormOncology.ABRAXANE_Strength_TxtBox = refFormOncology_2ViewModel.ABRAXANE_Strength_TxtBox;
                refFormOncology.ABRAXANE_SIG_TxtBox = refFormOncology_2ViewModel.ABRAXANE_SIG_TxtBox;
                refFormOncology.ABRAXANE_CYCLES_TxtBox = refFormOncology_2ViewModel.ABRAXANE_CYCLES_TxtBox;
                refFormOncology.ABRAXANE_QUANTITY_TxtBox = refFormOncology_2ViewModel.ABRAXANE_QUANTITY_TxtBox;
                refFormOncology.ABRAXANE_REFILLS_TxtBox = refFormOncology_2ViewModel.ABRAXANE_REFILLS_TxtBox;
                refFormOncology.ChkBox_ADCETRIS = refFormOncology_2ViewModel.ChkBox_ADCETRIS;
                refFormOncology.ADCETRIS_Strength_TxtBox = refFormOncology_2ViewModel.ADCETRIS_Strength_TxtBox;
                refFormOncology.ADCETRIS_SIG_TxtBox = refFormOncology_2ViewModel.ADCETRIS_SIG_TxtBox;
                refFormOncology.ADCETRIS_CYCLES_TxtBox = refFormOncology_2ViewModel.ADCETRIS_CYCLES_TxtBox;
                refFormOncology.ADCETRIS_QUANTITY_TxtBox = refFormOncology_2ViewModel.ADCETRIS_QUANTITY_TxtBox;
                refFormOncology.ADCETRIS_REFILLS_TxtBox = refFormOncology_2ViewModel.ADCETRIS_REFILLS_TxtBox;
                refFormOncology.ChkBox_ALIMTA = refFormOncology_2ViewModel.ChkBox_ALIMTA;
                refFormOncology.ALIMTA_Strength_TxtBox = refFormOncology_2ViewModel.ALIMTA_Strength_TxtBox;
                refFormOncology.ALIMTA_SIG_TxtBox = refFormOncology_2ViewModel.ALIMTA_SIG_TxtBox;
                refFormOncology.ALIMTA_CYCLES_TxtBox = refFormOncology_2ViewModel.ALIMTA_CYCLES_TxtBox;
                refFormOncology.ALIMTA_QUANTITY_TxtBox = refFormOncology_2ViewModel.ALIMTA_QUANTITY_TxtBox;
                refFormOncology.ALIMTA_REFILLS_TxtBox = refFormOncology_2ViewModel.ALIMTA_REFILLS_TxtBox;
                refFormOncology.ChkBox_AVASTIN = refFormOncology_2ViewModel.ChkBox_AVASTIN;
                refFormOncology.AVASTIN_Strength_TxtBox = refFormOncology_2ViewModel.AVASTIN_Strength_TxtBox;
                refFormOncology.AVASTIN_SIG_TxtBox = refFormOncology_2ViewModel.AVASTIN_SIG_TxtBox;
                refFormOncology.AVASTIN_CYCLES_TxtBox = refFormOncology_2ViewModel.AVASTIN_CYCLES_TxtBox;
                refFormOncology.AVASTIN_QUANTITY_TxtBox = refFormOncology_2ViewModel.AVASTIN_QUANTITY_TxtBox;
                refFormOncology.AVASTIN_REFILLS_TxtBox = refFormOncology_2ViewModel.AVASTIN_REFILLS_TxtBox;
                refFormOncology.ChkBox_CARBOPLATIN = refFormOncology_2ViewModel.ChkBox_CARBOPLATIN;
                refFormOncology.CARBOPLATIN_Strength_TxtBox = refFormOncology_2ViewModel.CARBOPLATIN_Strength_TxtBox;
                refFormOncology.CARBOPLATIN_SIG_TxtBox = refFormOncology_2ViewModel.CARBOPLATIN_SIG_TxtBox;
                refFormOncology.CARBOPLATIN_CYCLES_TxtBox = refFormOncology_2ViewModel.CARBOPLATIN_CYCLES_TxtBox;
                refFormOncology.CARBOPLATIN_QUANTITY_TxtBox = refFormOncology_2ViewModel.CARBOPLATIN_QUANTITY_TxtBox;
                refFormOncology.CARBOPLATIN_REFILLS_TxtBox = refFormOncology_2ViewModel.CARBOPLATIN_REFILLS_TxtBox;
                refFormOncology.ChkBox_ELOXATIN = refFormOncology_2ViewModel.ChkBox_ELOXATIN;
                refFormOncology.ELOXATIN_Strength_TxtBox = refFormOncology_2ViewModel.ELOXATIN_Strength_TxtBox;
                refFormOncology.ELOXATIN_SIG_TxtBox = refFormOncology_2ViewModel.ELOXATIN_SIG_TxtBox;
                refFormOncology.ELOXATIN_CYCLES_TxtBox = refFormOncology_2ViewModel.ELOXATIN_CYCLES_TxtBox;
                refFormOncology.ELOXATIN_QUANTITY_TxtBox = refFormOncology_2ViewModel.ELOXATIN_QUANTITY_TxtBox;
                refFormOncology.ELOXATIN_REFILLS_TxtBox = refFormOncology_2ViewModel.ELOXATIN_REFILLS_TxtBox;
                refFormOncology.ChkBox_HERCEPTIN = refFormOncology_2ViewModel.ChkBox_HERCEPTIN;
                refFormOncology.HERCEPTIN_Strength_TxtBox = refFormOncology_2ViewModel.HERCEPTIN_Strength_TxtBox;
                refFormOncology.HERCEPTIN_SIG_TxtBox = refFormOncology_2ViewModel.HERCEPTIN_SIG_TxtBox;
                refFormOncology.HERCEPTIN_CYCLES_TxtBox = refFormOncology_2ViewModel.HERCEPTIN_CYCLES_TxtBox;
                refFormOncology.HERCEPTIN_QUANTITY_TxtBox = refFormOncology_2ViewModel.HERCEPTIN_QUANTITY_TxtBox;
                refFormOncology.HERCEPTIN_REFILLS_TxtBox = refFormOncology_2ViewModel.HERCEPTIN_REFILLS_TxtBox;
                refFormOncology.ChkBox_RITUXAN = refFormOncology_2ViewModel.ChkBox_RITUXAN;
                refFormOncology.RITUXAN_Strength_TxtBox = refFormOncology_2ViewModel.RITUXAN_Strength_TxtBox;
                refFormOncology.RITUXAN_SIG_TxtBox = refFormOncology_2ViewModel.RITUXAN_SIG_TxtBox;
                refFormOncology.RITUXAN_CYCLES_TxtBox = refFormOncology_2ViewModel.RITUXAN_CYCLES_TxtBox;
                refFormOncology.RITUXAN_QUANTITY_TxtBox = refFormOncology_2ViewModel.RITUXAN_QUANTITY_TxtBox;
                refFormOncology.RITUXAN_REFILLS_TxtBox = refFormOncology_2ViewModel.RITUXAN_REFILLS_TxtBox;
                refFormOncology.ChkBox_CISPLATIN = refFormOncology_2ViewModel.ChkBox_CISPLATIN;
                refFormOncology.CISPLATIN_Strength_TxtBox = refFormOncology_2ViewModel.CISPLATIN_Strength_TxtBox;
                refFormOncology.CISPLATIN_SIG_TxtBox = refFormOncology_2ViewModel.CISPLATIN_SIG_TxtBox;
                refFormOncology.CISPLATIN_CYCLES_TxtBox = refFormOncology_2ViewModel.CISPLATIN_CYCLES_TxtBox;
                refFormOncology.CISPLATIN_QUANTITY_TxtBox = refFormOncology_2ViewModel.CISPLATIN_QUANTITY_TxtBox;
                refFormOncology.CISPLATIN_REFILLS_TxtBox = refFormOncology_2ViewModel.CISPLATIN_REFILLS_TxtBox;
                refFormOncology.ChkBox_DOCETAXEL = refFormOncology_2ViewModel.ChkBox_DOCETAXEL;
                refFormOncology.DOCETAXEL_Strength_TxtBox = refFormOncology_2ViewModel.DOCETAXEL_Strength_TxtBox;
                refFormOncology.DOCETAXEL_SIG_TxtBox = refFormOncology_2ViewModel.DOCETAXEL_SIG_TxtBox;
                refFormOncology.DOCETAXEL_CYCLES_TxtBox = refFormOncology_2ViewModel.DOCETAXEL_CYCLES_TxtBox;
                refFormOncology.DOCETAXEL_QUANTITY_TxtBox = refFormOncology_2ViewModel.DOCETAXEL_QUANTITY_TxtBox;
                refFormOncology.DOCETAXEL_REFILLS_TxtBox = refFormOncology_2ViewModel.DOCETAXEL_REFILLS_TxtBox;
                refFormOncology.ChkBox_ERBITUX = refFormOncology_2ViewModel.ChkBox_ERBITUX;
                refFormOncology.ERBITUX_Strength_TxtBox = refFormOncology_2ViewModel.ERBITUX_Strength_TxtBox;
                refFormOncology.ERBITUX_SIG_TxtBox = refFormOncology_2ViewModel.ERBITUX_SIG_TxtBox;
                refFormOncology.ERBITUX_CYCLES_TxtBox = refFormOncology_2ViewModel.ERBITUX_CYCLES_TxtBox;
                refFormOncology.ERBITUX_QUANTITY_TxtBox = refFormOncology_2ViewModel.ERBITUX_QUANTITY_TxtBox;
                refFormOncology.ERBITUX_REFILLS_TxtBox = refFormOncology_2ViewModel.ERBITUX_REFILLS_TxtBox;
                refFormOncology.ChkBox_GEMCITABINE = refFormOncology_2ViewModel.ChkBox_GEMCITABINE;
                refFormOncology.GEMCITABINE_Strength_TxtBox = refFormOncology_2ViewModel.GEMCITABINE_Strength_TxtBox;
                refFormOncology.GEMCITABINE_SIG_TxtBox = refFormOncology_2ViewModel.GEMCITABINE_SIG_TxtBox;
                refFormOncology.GEMCITABINE_CYCLES_TxtBox = refFormOncology_2ViewModel.GEMCITABINE_CYCLES_TxtBox;
                refFormOncology.GEMCITABINE_QUANTITY_TxtBox = refFormOncology_2ViewModel.GEMCITABINE_QUANTITY_TxtBox;
                refFormOncology.GEMCITABINE_REFILLS_TxtBox = refFormOncology_2ViewModel.GEMCITABINE_REFILLS_TxtBox;
                refFormOncology.ChkBox_KADCYLA = refFormOncology_2ViewModel.ChkBox_KADCYLA;
                refFormOncology.KADCYLA_Strength_TxtBox = refFormOncology_2ViewModel.KADCYLA_Strength_TxtBox;
                refFormOncology.KADCYLA_SIG_TxtBox = refFormOncology_2ViewModel.KADCYLA_SIG_TxtBox;
                refFormOncology.KADCYLA_CYCLES_TxtBox = refFormOncology_2ViewModel.KADCYLA_CYCLES_TxtBox;
                refFormOncology.KADCYLA_QUANTITY_TxtBox = refFormOncology_2ViewModel.KADCYLA_QUANTITY_TxtBox;
                refFormOncology.KADCYLA_REFILLS_TxtBox = refFormOncology_2ViewModel.KADCYLA_REFILLS_TxtBox;
                refFormOncology.ChkBox_PACLITAXEL = refFormOncology_2ViewModel.ChkBox_PACLITAXEL;
                refFormOncology.PACLITAXEL_Strength_TxtBox = refFormOncology_2ViewModel.PACLITAXEL_Strength_TxtBox;
                refFormOncology.PACLITAXEL_SIG_TxtBox = refFormOncology_2ViewModel.PACLITAXEL_SIG_TxtBox;
                refFormOncology.PACLITAXEL_CYCLES_TxtBox = refFormOncology_2ViewModel.PACLITAXEL_CYCLES_TxtBox;
                refFormOncology.PACLITAXEL_QUANTITY_TxtBox = refFormOncology_2ViewModel.PACLITAXEL_QUANTITY_TxtBox;
                refFormOncology.PACLITAXEL_REFILLS_TxtBox = refFormOncology_2ViewModel.PACLITAXEL_REFILLS_TxtBox;
                refFormOncology.ChkBox_TORISEL = refFormOncology_2ViewModel.ChkBox_TORISEL;
                refFormOncology.TORISEL_Strength_TxtBox = refFormOncology_2ViewModel.TORISEL_Strength_TxtBox;
                refFormOncology.TORISEL_SIG_TxtBox = refFormOncology_2ViewModel.TORISEL_SIG_TxtBox;
                refFormOncology.TORISEL_CYCLES_TxtBox = refFormOncology_2ViewModel.TORISEL_CYCLES_TxtBox;
                refFormOncology.TORISEL_QUANTITY_TxtBox = refFormOncology_2ViewModel.TORISEL_QUANTITY_TxtBox;
                refFormOncology.TORISEL_REFILLS_TxtBox = refFormOncology_2ViewModel.TORISEL_REFILLS_TxtBox;
                refFormOncology.ChkBox_VELCADE = refFormOncology_2ViewModel.ChkBox_VELCADE;
                refFormOncology.VELCADE_Strength_TxtBox = refFormOncology_2ViewModel.VELCADE_Strength_TxtBox;
                refFormOncology.VELCADE_SIG_TxtBox = refFormOncology_2ViewModel.VELCADE_SIG_TxtBox;
                refFormOncology.VELCADE_CYCLES_TxtBox = refFormOncology_2ViewModel.VELCADE_CYCLES_TxtBox;
                refFormOncology.VELCADE_QUANTITY_TxtBox = refFormOncology_2ViewModel.VELCADE_QUANTITY_TxtBox;
                refFormOncology.VELCADE_REFILLS_TxtBox = refFormOncology_2ViewModel.VELCADE_REFILLS_TxtBox;
                refFormOncology.ChkBox_ZOMETA = refFormOncology_2ViewModel.ChkBox_ZOMETA;
                refFormOncology.ZOMETA_Strength_TxtBox = refFormOncology_2ViewModel.ZOMETA_Strength_TxtBox;
                refFormOncology.ZOMETA_SIG_TxtBox = refFormOncology_2ViewModel.ZOMETA_SIG_TxtBox;
                refFormOncology.ZOMETA_CYCLES_TxtBox = refFormOncology_2ViewModel.ZOMETA_CYCLES_TxtBox;
                refFormOncology.ZOMETA_QUANTITY_TxtBox = refFormOncology_2ViewModel.ZOMETA_QUANTITY_TxtBox;
                refFormOncology.ZOMETA_REFILLS_TxtBox = refFormOncology_2ViewModel.ZOMETA_REFILLS_TxtBox;
                refFormOncology.ChkBox_OTHER1 = refFormOncology_2ViewModel.ChkBox_OTHER1;
                refFormOncology.OTHER1_Strength_TxtBox = refFormOncology_2ViewModel.OTHER1_Strength_TxtBox;
                refFormOncology.OTHER1_SIG_TxtBox = refFormOncology_2ViewModel.OTHER1_SIG_TxtBox;
                refFormOncology.OTHER1_CYCLES_TxtBox = refFormOncology_2ViewModel.OTHER1_CYCLES_TxtBox;
                refFormOncology.OTHER1_QUANTITY_TxtBox = refFormOncology_2ViewModel.OTHER1_QUANTITY_TxtBox;
                refFormOncology.OTHER1_REFILLS_TxtBox = refFormOncology_2ViewModel.OTHER1_REFILLS_TxtBox;
                refFormOncology.ChkBox_OTHER2 = refFormOncology_2ViewModel.ChkBox_OTHER2;
                refFormOncology.OTHER2_Strength_TxtBox = refFormOncology_2ViewModel.OTHER2_Strength_TxtBox;
                refFormOncology.OTHER2_SIG_TxtBox = refFormOncology_2ViewModel.OTHER2_SIG_TxtBox;
                refFormOncology.OTHER2_CYCLES_TxtBox = refFormOncology_2ViewModel.OTHER2_CYCLES_TxtBox;
                refFormOncology.OTHER2_QUANTITY_TxtBox = refFormOncology_2ViewModel.OTHER2_QUANTITY_TxtBox;
                refFormOncology.OTHER2_REFILLS_TxtBox = refFormOncology_2ViewModel.OTHER2_REFILLS_TxtBox;
                refFormOncology.ChkBox_OTHER3 = refFormOncology_2ViewModel.ChkBox_OTHER3;
                refFormOncology.OTHER3_Strength_TxtBox = refFormOncology_2ViewModel.OTHER3_Strength_TxtBox;
                refFormOncology.OTHER3_SIG_TxtBox = refFormOncology_2ViewModel.OTHER3_SIG_TxtBox;
                refFormOncology.OTHER3_CYCLES_TxtBox = refFormOncology_2ViewModel.OTHER3_CYCLES_TxtBox;
                refFormOncology.OTHER3_QUANTITY_TxtBox = refFormOncology_2ViewModel.OTHER3_QUANTITY_TxtBox;
                refFormOncology.OTHER3_REFILLS_TxtBox = refFormOncology_2ViewModel.OTHER3_REFILLS_TxtBox;
                refFormOncology.ChkBox_DEXAMETHASONE = refFormOncology_2ViewModel.ChkBox_DEXAMETHASONE;
                refFormOncology.DEXAMETHASONE_TxtBox = refFormOncology_2ViewModel.DEXAMETHASONE_TxtBox;
                refFormOncology.ChkBox_DIPHENHYDRAMINE = refFormOncology_2ViewModel.ChkBox_DIPHENHYDRAMINE;
                refFormOncology.DIPHENHYDRAMINE_TxtBox = refFormOncology_2ViewModel.DIPHENHYDRAMINE_TxtBox;
                refFormOncology.ChkBox_RANITIDINE = refFormOncology_2ViewModel.ChkBox_RANITIDINE;
                refFormOncology.RANITIDINE_TxtBox = refFormOncology_2ViewModel.RANITIDINE_TxtBox;
                refFormOncology.ChkBox_ONDANSETRON = refFormOncology_2ViewModel.ChkBox_ONDANSETRON;
                refFormOncology.ONDANSETRON_TxtBox = refFormOncology_2ViewModel.ONDANSETRON_TxtBox;
                refFormOncology.ChkBox_OTHER4 = refFormOncology_2ViewModel.ChkBox_OTHER4;
                refFormOncology.DOSE_TxtBox = refFormOncology_2ViewModel.DOSE_TxtBox;
                refFormOncology.SIG_TxtBox = refFormOncology_2ViewModel.SIG_TxtBox;
                refFormOncology.REFILLS_TxtBox = refFormOncology_2ViewModel.REFILLS_TxtBox;
                refFormOncology.OTHER4_TxtBox = refFormOncology_2ViewModel.OTHER4_TxtBox;







                //refFormGastroenterology.Date1 = refFormGastroenterologyViewModel.Date1;
                //refFormGastroenterology.Date2 = refFormGastroenterologyViewModel.Date2;

                refFormOncology.ModifiedBy = CurrentUser.UserId;
                refFormOncology.ModifiedOn = DateTime.UtcNow;

                refFormOncology.IsSignatured = refFormOncology_2ViewModel.IsSignatured;

                if (IsEdit)
                {
                    _unitOfWork.RefFormOncology_2.Update(refFormOncology);
                    AuditLogger.AuditTracker("Edit OncologyReferralForm_2", "An OncologyReferralForm_2  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormOncology.CreatedBy = CurrentUser.UserId;
                    refFormOncology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormOncology_2.Insert(refFormOncology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New OncologyReferralForm_2", "A new OncologyReferralForm_2  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormOncology_2ViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormOncology.RefFormOncologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Save refFormOncology_2 Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method refFormOncology_2 PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save refFormOncology_2 Referral Form Unsuccessfully.", success = false });
        }

        //nola_oncology.............................

        public ActionResult nola_oncology_referral_form(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola oncology referral form"));
                    referralFormId = referralForm?.ReferralFormId ?? 15;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormNolaOncologyViewModel refFormNolaOncologyViewModel = new RefFormNolaOncologyViewModel();

                //Set ReferralFormId
                refFormNolaOncologyViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormNolaOncologyViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormNolaOncologyViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormNolaOncologyViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormNolaOncologyViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormNolaOncologyViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormNolaOncologyViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormNolaOncologyViewModel.PhysicianFullName = physician.FullName;
                        refFormNolaOncologyViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormNolaOncologyViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormNolaOncologyViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormNolaOncologyViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormNolaOncologyViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormNolaOncologyViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormNolaOncologyViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormNolaOncology refFormNolaOncology = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormNolaOncology = _unitOfWork.RefFormNolaOncology.GetSingle(t => t.RefFormnolaOncologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormNolaOncology == null) refFormNolaOncology = new RefFormNolaOncology();


                    refFormNolaOncologyViewModel.RefFormnolaOncologyId = refFormNolaOncology.RefFormnolaOncologyId;

                    //Form
                    //Add your code here.

                    refFormNolaOncologyViewModel.FormDate = refFormNolaOncology.FormDate;
                    refFormNolaOncologyViewModel.FormNeedsByDate = refFormNolaOncology.FormNeedsByDate;
                    refFormNolaOncologyViewModel.ChkBox_ShipToPatient = refFormNolaOncology.ChkBox_ShipToPatient ?? false;
                    refFormNolaOncologyViewModel.ChkBox_ShipToOffice = refFormNolaOncology.ChkBox_ShipToOffice ?? false;
                    refFormNolaOncologyViewModel.ChkBox_ShipToOther = refFormNolaOncology.ChkBox_ShipToOther ?? false;
                    refFormNolaOncologyViewModel.TxtBox_ShipToOther = refFormNolaOncology.TxtBox_ShipToOther;
                    refFormNolaOncologyViewModel.DiagnosisCode_TxtBox = refFormNolaOncology.DiagnosisCode_TxtBox;
                    refFormNolaOncologyViewModel.PriorFailed_TxtBox = refFormNolaOncology.PriorFailed_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Afinitor = refFormNolaOncology.ChkBox_Afinitor ?? false;
                    refFormNolaOncologyViewModel.Afinitor_TxtBox1 = refFormNolaOncology.Afinitor_TxtBox1;
                    refFormNolaOncologyViewModel.Afinitor_TxtBox2 = refFormNolaOncology.Afinitor_TxtBox2;
                    refFormNolaOncologyViewModel.Afinitor_Qty_TxtBox = refFormNolaOncology.Afinitor_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Afinitor_Refills_TxtBox = refFormNolaOncology.Afinitor_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Avastin = refFormNolaOncology.ChkBox_Avastin ?? false;
                    refFormNolaOncologyViewModel.Avastin_TxtBox1 = refFormNolaOncology.Avastin_TxtBox1;
                    refFormNolaOncologyViewModel.Avastin_TxtBox2 = refFormNolaOncology.Avastin_TxtBox2;
                    refFormNolaOncologyViewModel.Avastin_Qty_TxtBox = refFormNolaOncology.Avastin_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Avastin_Refills_TxtBox = refFormNolaOncology.Avastin_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Erivedge = refFormNolaOncology.ChkBox_Erivedge ?? false;
                    refFormNolaOncologyViewModel.Erivedge_TxtBox2 = refFormNolaOncology.Erivedge_TxtBox2;
                    refFormNolaOncologyViewModel.Erivedge_Qty_TxtBox = refFormNolaOncology.Erivedge_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Erivedge_Refills_TxtBox = refFormNolaOncology.Erivedge_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Gleevec = refFormNolaOncology.ChkBox_Gleevec ?? false;
                    refFormNolaOncologyViewModel.Gleevec_TxtBox1 = refFormNolaOncology.Gleevec_TxtBox1;
                    refFormNolaOncologyViewModel.Gleevec_TxtBox2 = refFormNolaOncology.Gleevec_TxtBox2;
                    refFormNolaOncologyViewModel.Gleevec_Qty_TxtBox = refFormNolaOncology.Gleevec_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Gleevec_Refills_TxtBox = refFormNolaOncology.Gleevec_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Sprycel = refFormNolaOncology.ChkBox_Sprycel ?? false;
                    refFormNolaOncologyViewModel.Sprycel_TxtBox1 = refFormNolaOncology.Sprycel_TxtBox1;
                    refFormNolaOncologyViewModel.Sprycel_TxtBox2 = refFormNolaOncology.Sprycel_TxtBox2;
                    refFormNolaOncologyViewModel.Sprycel_Qty_TxtBox = refFormNolaOncology.Sprycel_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Sprycel_Refills_TxtBox = refFormNolaOncology.Sprycel_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Sutent = refFormNolaOncology.ChkBox_Sutent ?? false;
                    refFormNolaOncologyViewModel.Sutent_TxtBox1 = refFormNolaOncology.Sutent_TxtBox1;
                    refFormNolaOncologyViewModel.Sutent_TxtBox2 = refFormNolaOncology.Sutent_TxtBox2;
                    refFormNolaOncologyViewModel.Sutent_Qty_TxtBox = refFormNolaOncology.Sutent_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Sutent_Refills_TxtBox = refFormNolaOncology.Sutent_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Tarceva = refFormNolaOncology.ChkBox_Tarceva ?? false;
                    refFormNolaOncologyViewModel.ChkBox_Tarceva25mg = refFormNolaOncology.ChkBox_Tarceva25mg ?? false;
                    refFormNolaOncologyViewModel.ChkBox_Tarceva100mg = refFormNolaOncology.ChkBox_Tarceva100mg ?? false;
                    refFormNolaOncologyViewModel.ChkBox_Tarceva150mg = refFormNolaOncology.ChkBox_Tarceva150mg ?? false;
                    refFormNolaOncologyViewModel.Tarceva_TxtBox2 = refFormNolaOncology.Tarceva_TxtBox2;
                    refFormNolaOncologyViewModel.Tarceva_Qty_TxtBox1 = refFormNolaOncology.Tarceva_Qty_TxtBox1;
                    refFormNolaOncologyViewModel.Tarceva_Refills_TxtBox1 = refFormNolaOncology.Tarceva_Refills_TxtBox1;
                    refFormNolaOncologyViewModel.ChkBox_Targretin = refFormNolaOncology.ChkBox_Targretin ?? false;
                    refFormNolaOncologyViewModel.Targretin_TxtBox1 = refFormNolaOncology.Targretin_TxtBox1;
                    refFormNolaOncologyViewModel.Targretin_TxtBox2 = refFormNolaOncology.Targretin_TxtBox2;
                    refFormNolaOncologyViewModel.Targretin_Qty_TxtBox = refFormNolaOncology.Targretin_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Targretin_Refills_TxtBox = refFormNolaOncology.Targretin_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Tasigna = refFormNolaOncology.ChkBox_Tasigna ?? false;
                    refFormNolaOncologyViewModel.Tasigna_TxtBox1 = refFormNolaOncology.Tasigna_TxtBox1;
                    refFormNolaOncologyViewModel.Tasigna_TxtBox2 = refFormNolaOncology.Tasigna_TxtBox2;
                    refFormNolaOncologyViewModel.Tasigna_Qty_TxtBox = refFormNolaOncology.Tasigna_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Tasigna_Refills_TxtBox = refFormNolaOncology.Tasigna_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Temodar = refFormNolaOncology.ChkBox_Temodar ?? false;
                    refFormNolaOncologyViewModel.Temodar_TxtBox1 = refFormNolaOncology.Temodar_TxtBox1;
                    refFormNolaOncologyViewModel.Temodar_TxtBox2 = refFormNolaOncology.Temodar_TxtBox2;
                    refFormNolaOncologyViewModel.Temodar_Qty_TxtBox = refFormNolaOncology.Temodar_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Temodar_Refills_TxtBox = refFormNolaOncology.Temodar_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Xeloda = refFormNolaOncology.ChkBox_Xeloda ?? false;
                    refFormNolaOncologyViewModel.Xeloda_TxtBox1 = refFormNolaOncology.Xeloda_TxtBox1;
                    refFormNolaOncologyViewModel.Xeloda_TxtBox2 = refFormNolaOncology.Xeloda_TxtBox2;
                    refFormNolaOncologyViewModel.Xeloda_Qty_TxtBox = refFormNolaOncology.Xeloda_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Xeloda_Refills_TxtBox = refFormNolaOncology.Xeloda_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Zelboraf = refFormNolaOncology.ChkBox_Zelboraf ?? false;
                    refFormNolaOncologyViewModel.Zelboraf_TxtBox2 = refFormNolaOncology.Zelboraf_TxtBox2;
                    refFormNolaOncologyViewModel.Zelboraf_Qty_TxtBox = refFormNolaOncology.Zelboraf_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Zelboraf_Refills_TxtBox = refFormNolaOncology.Zelboraf_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Zytiga = refFormNolaOncology.ChkBox_Zytiga ?? false;
                    refFormNolaOncologyViewModel.Zytiga_TxtBox2 = refFormNolaOncology.Zytiga_TxtBox2;
                    refFormNolaOncologyViewModel.Zytiga_Qty_TxtBox = refFormNolaOncology.Zytiga_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Zytiga_Refills_TxtBox = refFormNolaOncology.Zytiga_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Aranesp = refFormNolaOncology.ChkBox_Aranesp ?? false;
                    refFormNolaOncologyViewModel.Aranesp_TxtBox1 = refFormNolaOncology.Aranesp_TxtBox1;
                    refFormNolaOncologyViewModel.Aranesp_TxtBox2 = refFormNolaOncology.Aranesp_TxtBox2;
                    refFormNolaOncologyViewModel.Aranesp_Qty_TxtBox = refFormNolaOncology.Aranesp_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Aranesp_Refills_TxtBox = refFormNolaOncology.Aranesp_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Neulasta = refFormNolaOncology.ChkBox_Neulasta ?? false;
                    refFormNolaOncologyViewModel.Neulasta_TxtBox1 = refFormNolaOncology.Neulasta_TxtBox1;
                    refFormNolaOncologyViewModel.Neulasta_TxtBox2 = refFormNolaOncology.Neulasta_TxtBox2;
                    refFormNolaOncologyViewModel.Neulasta_Qty_TxtBox = refFormNolaOncology.Neulasta_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Neulasta_Refills_TxtBox = refFormNolaOncology.Neulasta_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Neupogen = refFormNolaOncology.ChkBox_Neupogen ?? false;
                    refFormNolaOncologyViewModel.Neupogen_TxtBox1 = refFormNolaOncology.Neupogen_TxtBox1;
                    refFormNolaOncologyViewModel.Neupogen_TxtBox2 = refFormNolaOncology.Neupogen_TxtBox2;
                    refFormNolaOncologyViewModel.Neupogen_Qty_TxtBox = refFormNolaOncology.Neupogen_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Neupogen_Refills_TxtBox = refFormNolaOncology.Neupogen_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Procrit = refFormNolaOncology.ChkBox_Procrit ?? false;
                    refFormNolaOncologyViewModel.Procrit_TxtBox1 = refFormNolaOncology.Procrit_TxtBox1;
                    refFormNolaOncologyViewModel.Procrit_TxtBox2 = refFormNolaOncology.Procrit_TxtBox2;
                    refFormNolaOncologyViewModel.Procrit_Qty_TxtBox = refFormNolaOncology.Procrit_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Procrit_Refills_TxtBox = refFormNolaOncology.Procrit_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Other1 = refFormNolaOncology.ChkBox_Other1 ?? false;
                    refFormNolaOncologyViewModel.Other1_TxtBox1 = refFormNolaOncology.Other1_TxtBox1;
                    refFormNolaOncologyViewModel.Other1_TxtBox2 = refFormNolaOncology.Other1_TxtBox2;
                    refFormNolaOncologyViewModel.Other1_Qty_TxtBox = refFormNolaOncology.Other1_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Other1_Refills_TxtBox = refFormNolaOncology.Other1_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Other2 = refFormNolaOncology.ChkBox_Other2 ?? false;
                    refFormNolaOncologyViewModel.Other2_TxtBox1 = refFormNolaOncology.Other2_TxtBox1;
                    refFormNolaOncologyViewModel.Other2_TxtBox2 = refFormNolaOncology.Other2_TxtBox2;
                    refFormNolaOncologyViewModel.Other2_Qty_TxtBox = refFormNolaOncology.Other2_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Other2_Refills_TxtBox = refFormNolaOncology.Other2_Refills_TxtBox;
                    refFormNolaOncologyViewModel.ChkBox_Other3 = refFormNolaOncology.ChkBox_Other3 ?? false;
                    refFormNolaOncologyViewModel.Other3_TxtBox1 = refFormNolaOncology.Other3_TxtBox1;
                    refFormNolaOncologyViewModel.Other3_TxtBox2 = refFormNolaOncology.Other3_TxtBox2;
                    refFormNolaOncologyViewModel.Other3_Qty_TxtBox = refFormNolaOncology.Other3_Qty_TxtBox;
                    refFormNolaOncologyViewModel.Other3_Refills_TxtBox = refFormNolaOncology.Other3_Refills_TxtBox;


                    refFormNolaOncologyViewModel.Date1 = refFormNolaOncology.Date1;
                    refFormNolaOncologyViewModel.Date2 = refFormNolaOncology.Date2;

                    refFormNolaOncologyViewModel.IsSignatured = refFormNolaOncology.IsSignatured ?? false;

                    return View(refFormNolaOncologyViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method refFormNolaOncolgyViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormNolaOncologyViewModel());
        }

        [HttpPost]
        public JsonResult nola_oncology_referral_form(RefFormNolaOncologyViewModel refFormNolaOncologyViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Hiv Aids Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 8;

                int referralFormId = refFormNolaOncologyViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormNolaOncology refFormNolaOncology = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormNolaOncologyViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormNolaOncology = _unitOfWork.RefFormNolaOncology.GetSingle(t => t.RefFormnolaOncologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormNolaOncology == null)
                {
                    refFormNolaOncology = new RefFormNolaOncology();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }


                refFormNolaOncology.RefFormnolaOncologyId = refFormNolaOncologyViewModel.RefFormnolaOncologyId;

                //Form
                refFormNolaOncology.FormDate = refFormNolaOncologyViewModel.FormDate;
                refFormNolaOncology.FormNeedsByDate = refFormNolaOncologyViewModel.FormNeedsByDate;
                refFormNolaOncology.ChkBox_ShipToPatient = refFormNolaOncologyViewModel.ChkBox_ShipToPatient;
                refFormNolaOncology.ChkBox_ShipToOffice = refFormNolaOncologyViewModel.ChkBox_ShipToOffice;
                refFormNolaOncology.ChkBox_ShipToOther = refFormNolaOncologyViewModel.ChkBox_ShipToOther;
                refFormNolaOncology.TxtBox_ShipToOther = refFormNolaOncologyViewModel.TxtBox_ShipToOther;

                //Diagnosis:

                refFormNolaOncology.DiagnosisCode_TxtBox = refFormNolaOncologyViewModel.DiagnosisCode_TxtBox;
                refFormNolaOncology.PriorFailed_TxtBox = refFormNolaOncologyViewModel.PriorFailed_TxtBox;
                refFormNolaOncology.ChkBox_Afinitor = refFormNolaOncologyViewModel.ChkBox_Afinitor;
                refFormNolaOncology.Afinitor_TxtBox1 = refFormNolaOncologyViewModel.Afinitor_TxtBox1;
                refFormNolaOncology.Afinitor_TxtBox2 = refFormNolaOncologyViewModel.Afinitor_TxtBox2;
                refFormNolaOncology.Afinitor_Qty_TxtBox = refFormNolaOncologyViewModel.Afinitor_Qty_TxtBox;
                refFormNolaOncology.Afinitor_Refills_TxtBox = refFormNolaOncologyViewModel.Afinitor_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Avastin = refFormNolaOncologyViewModel.ChkBox_Avastin;
                refFormNolaOncology.Avastin_TxtBox1 = refFormNolaOncologyViewModel.Avastin_TxtBox1;
                refFormNolaOncology.Avastin_TxtBox2 = refFormNolaOncologyViewModel.Avastin_TxtBox2;
                refFormNolaOncology.Avastin_Qty_TxtBox = refFormNolaOncologyViewModel.Avastin_Qty_TxtBox;
                refFormNolaOncology.Avastin_Refills_TxtBox = refFormNolaOncologyViewModel.Avastin_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Erivedge = refFormNolaOncologyViewModel.ChkBox_Erivedge;
                refFormNolaOncology.Erivedge_TxtBox2 = refFormNolaOncologyViewModel.Erivedge_TxtBox2;
                refFormNolaOncology.Erivedge_Qty_TxtBox = refFormNolaOncologyViewModel.Erivedge_Qty_TxtBox;
                refFormNolaOncology.Erivedge_Refills_TxtBox = refFormNolaOncologyViewModel.Erivedge_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Gleevec = refFormNolaOncologyViewModel.ChkBox_Gleevec;
                refFormNolaOncology.Gleevec_TxtBox1 = refFormNolaOncologyViewModel.Gleevec_TxtBox1;
                refFormNolaOncology.Gleevec_TxtBox2 = refFormNolaOncologyViewModel.Gleevec_TxtBox2;
                refFormNolaOncology.Gleevec_Qty_TxtBox = refFormNolaOncologyViewModel.Gleevec_Qty_TxtBox;
                refFormNolaOncology.Gleevec_Refills_TxtBox = refFormNolaOncologyViewModel.Gleevec_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Sprycel = refFormNolaOncologyViewModel.ChkBox_Sprycel;
                refFormNolaOncology.Sprycel_TxtBox1 = refFormNolaOncologyViewModel.Sprycel_TxtBox1;
                refFormNolaOncology.Sprycel_TxtBox2 = refFormNolaOncologyViewModel.Sprycel_TxtBox2;
                refFormNolaOncology.Sprycel_Qty_TxtBox = refFormNolaOncologyViewModel.Sprycel_Qty_TxtBox;
                refFormNolaOncology.Sprycel_Refills_TxtBox = refFormNolaOncologyViewModel.Sprycel_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Sutent = refFormNolaOncologyViewModel.ChkBox_Sutent;
                refFormNolaOncology.Sutent_TxtBox1 = refFormNolaOncologyViewModel.Sutent_TxtBox1;
                refFormNolaOncology.Sutent_TxtBox2 = refFormNolaOncologyViewModel.Sutent_TxtBox2;
                refFormNolaOncology.Sutent_Qty_TxtBox = refFormNolaOncologyViewModel.Sutent_Qty_TxtBox;
                refFormNolaOncology.Sutent_Refills_TxtBox = refFormNolaOncologyViewModel.Sutent_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Tarceva = refFormNolaOncologyViewModel.ChkBox_Tarceva;
                refFormNolaOncology.ChkBox_Tarceva25mg = refFormNolaOncologyViewModel.ChkBox_Tarceva25mg;
                refFormNolaOncology.ChkBox_Tarceva100mg = refFormNolaOncologyViewModel.ChkBox_Tarceva100mg;
                refFormNolaOncology.ChkBox_Tarceva150mg = refFormNolaOncologyViewModel.ChkBox_Tarceva150mg;
                refFormNolaOncology.Tarceva_TxtBox2 = refFormNolaOncologyViewModel.Tarceva_TxtBox2;
                refFormNolaOncology.Tarceva_Qty_TxtBox1 = refFormNolaOncologyViewModel.Tarceva_Qty_TxtBox1;
                refFormNolaOncology.Tarceva_Refills_TxtBox1 = refFormNolaOncologyViewModel.Tarceva_Refills_TxtBox1;
                refFormNolaOncology.ChkBox_Targretin = refFormNolaOncologyViewModel.ChkBox_Targretin;
                refFormNolaOncology.Targretin_TxtBox1 = refFormNolaOncologyViewModel.Targretin_TxtBox1;
                refFormNolaOncology.Targretin_TxtBox2 = refFormNolaOncologyViewModel.Targretin_TxtBox2;
                refFormNolaOncology.Targretin_Qty_TxtBox = refFormNolaOncologyViewModel.Targretin_Qty_TxtBox;
                refFormNolaOncology.Targretin_Refills_TxtBox = refFormNolaOncologyViewModel.Targretin_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Tasigna = refFormNolaOncologyViewModel.ChkBox_Tasigna;
                refFormNolaOncology.Tasigna_TxtBox1 = refFormNolaOncologyViewModel.Tasigna_TxtBox1;
                refFormNolaOncology.Tasigna_TxtBox2 = refFormNolaOncologyViewModel.Tasigna_TxtBox2;
                refFormNolaOncology.Tasigna_Qty_TxtBox = refFormNolaOncologyViewModel.Tasigna_Qty_TxtBox;
                refFormNolaOncology.Tasigna_Refills_TxtBox = refFormNolaOncologyViewModel.Tasigna_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Temodar = refFormNolaOncologyViewModel.ChkBox_Temodar;
                refFormNolaOncology.Temodar_TxtBox1 = refFormNolaOncologyViewModel.Temodar_TxtBox1;
                refFormNolaOncology.Temodar_TxtBox2 = refFormNolaOncologyViewModel.Temodar_TxtBox2;
                refFormNolaOncology.Temodar_Qty_TxtBox = refFormNolaOncologyViewModel.Temodar_Qty_TxtBox;
                refFormNolaOncology.Temodar_Refills_TxtBox = refFormNolaOncologyViewModel.Temodar_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Xeloda = refFormNolaOncologyViewModel.ChkBox_Xeloda;
                refFormNolaOncology.Xeloda_TxtBox1 = refFormNolaOncologyViewModel.Xeloda_TxtBox1;
                refFormNolaOncology.Xeloda_TxtBox2 = refFormNolaOncologyViewModel.Xeloda_TxtBox2;
                refFormNolaOncology.Xeloda_Qty_TxtBox = refFormNolaOncologyViewModel.Xeloda_Qty_TxtBox;
                refFormNolaOncology.Xeloda_Refills_TxtBox = refFormNolaOncologyViewModel.Xeloda_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Zelboraf = refFormNolaOncologyViewModel.ChkBox_Zelboraf;
                refFormNolaOncology.Zelboraf_TxtBox2 = refFormNolaOncologyViewModel.Zelboraf_TxtBox2;
                refFormNolaOncology.Zelboraf_Qty_TxtBox = refFormNolaOncologyViewModel.Zelboraf_Qty_TxtBox;
                refFormNolaOncology.Zelboraf_Refills_TxtBox = refFormNolaOncologyViewModel.Zelboraf_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Zytiga = refFormNolaOncologyViewModel.ChkBox_Zytiga;
                refFormNolaOncology.Zytiga_TxtBox2 = refFormNolaOncologyViewModel.Zytiga_TxtBox2;
                refFormNolaOncology.Zytiga_Qty_TxtBox = refFormNolaOncologyViewModel.Zytiga_Qty_TxtBox;
                refFormNolaOncology.Zytiga_Refills_TxtBox = refFormNolaOncologyViewModel.Zytiga_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Aranesp = refFormNolaOncologyViewModel.ChkBox_Aranesp;
                refFormNolaOncology.Aranesp_TxtBox1 = refFormNolaOncologyViewModel.Aranesp_TxtBox1;
                refFormNolaOncology.Aranesp_TxtBox2 = refFormNolaOncologyViewModel.Aranesp_TxtBox2;
                refFormNolaOncology.Aranesp_Qty_TxtBox = refFormNolaOncologyViewModel.Aranesp_Qty_TxtBox;
                refFormNolaOncology.Aranesp_Refills_TxtBox = refFormNolaOncologyViewModel.Aranesp_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Neulasta = refFormNolaOncologyViewModel.ChkBox_Neulasta;
                refFormNolaOncology.Neulasta_TxtBox1 = refFormNolaOncologyViewModel.Neulasta_TxtBox1;
                refFormNolaOncology.Neulasta_TxtBox2 = refFormNolaOncologyViewModel.Neulasta_TxtBox2;
                refFormNolaOncology.Neulasta_Qty_TxtBox = refFormNolaOncologyViewModel.Neulasta_Qty_TxtBox;
                refFormNolaOncology.Neulasta_Refills_TxtBox = refFormNolaOncologyViewModel.Neulasta_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Neupogen = refFormNolaOncologyViewModel.ChkBox_Neupogen;
                refFormNolaOncology.Neupogen_TxtBox1 = refFormNolaOncologyViewModel.Neupogen_TxtBox1;
                refFormNolaOncology.Neupogen_TxtBox2 = refFormNolaOncologyViewModel.Neupogen_TxtBox2;
                refFormNolaOncology.Neupogen_Qty_TxtBox = refFormNolaOncologyViewModel.Neupogen_Qty_TxtBox;
                refFormNolaOncology.Neupogen_Refills_TxtBox = refFormNolaOncologyViewModel.Neupogen_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Procrit = refFormNolaOncologyViewModel.ChkBox_Procrit;
                refFormNolaOncology.Procrit_TxtBox1 = refFormNolaOncologyViewModel.Procrit_TxtBox1;
                refFormNolaOncology.Procrit_TxtBox2 = refFormNolaOncologyViewModel.Procrit_TxtBox2;
                refFormNolaOncology.Procrit_Qty_TxtBox = refFormNolaOncologyViewModel.Procrit_Qty_TxtBox;
                refFormNolaOncology.Procrit_Refills_TxtBox = refFormNolaOncologyViewModel.Procrit_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Other1 = refFormNolaOncologyViewModel.ChkBox_Other1;
                refFormNolaOncology.Other1_TxtBox1 = refFormNolaOncologyViewModel.Other1_TxtBox1;
                refFormNolaOncology.Other1_TxtBox2 = refFormNolaOncologyViewModel.Other1_TxtBox2;
                refFormNolaOncology.Other1_Qty_TxtBox = refFormNolaOncologyViewModel.Other1_Qty_TxtBox;
                refFormNolaOncology.Other1_Refills_TxtBox = refFormNolaOncologyViewModel.Other1_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Other2 = refFormNolaOncologyViewModel.ChkBox_Other2;
                refFormNolaOncology.Other2_TxtBox1 = refFormNolaOncologyViewModel.Other2_TxtBox1;
                refFormNolaOncology.Other2_TxtBox2 = refFormNolaOncologyViewModel.Other2_TxtBox2;
                refFormNolaOncology.Other2_Qty_TxtBox = refFormNolaOncologyViewModel.Other2_Qty_TxtBox;
                refFormNolaOncology.Other2_Refills_TxtBox = refFormNolaOncologyViewModel.Other2_Refills_TxtBox;
                refFormNolaOncology.ChkBox_Other3 = refFormNolaOncologyViewModel.ChkBox_Other3;
                refFormNolaOncology.Other3_TxtBox1 = refFormNolaOncologyViewModel.Other3_TxtBox1;
                refFormNolaOncology.Other3_TxtBox2 = refFormNolaOncologyViewModel.Other3_TxtBox2;
                refFormNolaOncology.Other3_Qty_TxtBox = refFormNolaOncologyViewModel.Other3_Qty_TxtBox;
                refFormNolaOncology.Other3_Refills_TxtBox = refFormNolaOncologyViewModel.Other3_Refills_TxtBox;



                //form
                refFormNolaOncology.Date1 = refFormNolaOncologyViewModel.Date1;
                refFormNolaOncology.Date2 = refFormNolaOncologyViewModel.Date2;

                refFormNolaOncology.IsSignatured = refFormNolaOncologyViewModel.IsSignatured;

                refFormNolaOncology.ModifiedBy = CurrentUser.UserId;
                refFormNolaOncology.ModifiedOn = DateTime.UtcNow;

                if (IsEdit)
                {
                    _unitOfWork.RefFormNolaOncology.Update(refFormNolaOncology);
                    AuditLogger.AuditTracker("Edit nolaoncologyReferralForm", "nolaoncologyReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormNolaOncology.CreatedBy = CurrentUser.UserId;
                    refFormNolaOncology.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormNolaOncology.Insert(refFormNolaOncology);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New nolaoncologyReferralForm", "A nolaoncologyReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormNolaOncologyViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormNolaOncology.RefFormnolaOncologyId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();

                return Json(new { message = "Save nolaoncology Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method nolaoncologyReferralForm PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save nolaoncologys Referral Form Unsuccessfully.", success = false });
        }

        //lmfl_general_intake_referral_form
        public ActionResult lmfl_general_intake_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl general intake referral form"));
            return RedirectToAction("ggca_general_intake_referral_form", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 72 });
        }

        //nola_general_intake_referral_form
        public ActionResult nola_general_intake_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Nola general intake referral form"));
            return RedirectToAction("ggca_general_intake_referral_form", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 73 });
        }
        //ofl_general_intake_referral_form
        public ActionResult ofl_general_intake_referral_form(int PhysicianPortalPatientId)
        {
            ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ofl general intake referral form"));
            return RedirectToAction("ggca_general_intake_referral_form", new { PhysicianPortalPatientId = PhysicianPortalPatientId, referralFormId = referralForm?.ReferralFormId ?? 74 });
        }


        //ggca_generalintake_referaalform..............
        public ActionResult ggca_general_intake_referral_form(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Ggca general intake referral form"));
                    referralFormId = referralForm?.ReferralFormId ?? 71;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormGeneralintakeViewModel refFormGeneralintakeViewModel = new RefFormGeneralintakeViewModel();

                //Set ReferralFormId
                refFormGeneralintakeViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormGeneralintakeViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormGeneralintakeViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormGeneralintakeViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormGeneralintakeViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormGeneralintakeViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormGeneralintakeViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormGeneralintakeViewModel.PhysicianFullName = physician.FullName;
                        refFormGeneralintakeViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormGeneralintakeViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormGeneralintakeViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormGeneralintakeViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormGeneralintakeViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormGeneralintakeViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormGeneralintakeViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormGeneralintake refFormGeneralintake = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormGeneralintake = _unitOfWork.RefFormGeneralintake.GetSingle(t => t.RefFormGeneralintakeId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormGeneralintake == null) refFormGeneralintake = new RefFormGeneralintake();


                    refFormGeneralintakeViewModel.RefFormGeneralintakeId = refFormGeneralintake.RefFormGeneralintakeId;

                    //Form
                    //Add your code here.

                    refFormGeneralintakeViewModel.FormDate = refFormGeneralintake.FormDate;
                    refFormGeneralintakeViewModel.FormNeedsByDate = refFormGeneralintake.FormNeedsByDate;
                    refFormGeneralintakeViewModel.ChkBox_ShipToPatient = refFormGeneralintake.ChkBox_ShipToPatient ?? false;
                    refFormGeneralintakeViewModel.ChkBox_ShipToOffice = refFormGeneralintake.ChkBox_ShipToOffice ?? false;
                    refFormGeneralintakeViewModel.ChkBox_ShipToOther = refFormGeneralintake.ChkBox_ShipToOther ?? false;
                    refFormGeneralintakeViewModel.TxtBox_ShipToOther = refFormGeneralintake.TxtBox_ShipToOther;




                    refFormGeneralintakeViewModel.Diagnosis_TxtBox = refFormGeneralintake.Diagnosis_TxtBox;
                    refFormGeneralintakeViewModel.DrugAllergies_TxtBox = refFormGeneralintake.DrugAllergies_TxtBox;
                    refFormGeneralintakeViewModel.PFM_TextBox1 = refFormGeneralintake.PFM_TextBox1;
                    refFormGeneralintakeViewModel.LOT_TextBox1 = refFormGeneralintake.LOT_TextBox1;
                    refFormGeneralintakeViewModel.ROD_TextBox1 = refFormGeneralintake.ROD_TextBox1;
                    refFormGeneralintakeViewModel.PFM_TextBox2 = refFormGeneralintake.PFM_TextBox2;
                    refFormGeneralintakeViewModel.LOT_TextBox2 = refFormGeneralintake.LOT_TextBox2;
                    refFormGeneralintakeViewModel.ROD_TextBox2 = refFormGeneralintake.ROD_TextBox2;
                    refFormGeneralintakeViewModel.PFM_TextBox3 = refFormGeneralintake.PFM_TextBox3;
                    refFormGeneralintakeViewModel.LOT_TextBox3 = refFormGeneralintake.LOT_TextBox3;
                    refFormGeneralintakeViewModel.ROD_TextBox3 = refFormGeneralintake.ROD_TextBox3;
                    refFormGeneralintakeViewModel.PFM_TextBox4 = refFormGeneralintake.PFM_TextBox4;
                    refFormGeneralintakeViewModel.LOT_TextBox4 = refFormGeneralintake.LOT_TextBox4;
                    refFormGeneralintakeViewModel.ROD_TextBox4 = refFormGeneralintake.ROD_TextBox4;
                    refFormGeneralintakeViewModel.Med_TxtBox1 = refFormGeneralintake.Med_TxtBox1;
                    refFormGeneralintakeViewModel.Strength_TxtBox1 = refFormGeneralintake.Strength_TxtBox1;
                    refFormGeneralintakeViewModel.Dose_TxtBox1 = refFormGeneralintake.Dose_TxtBox1;
                    refFormGeneralintakeViewModel.Qty_TxtBox1 = refFormGeneralintake.Qty_TxtBox1;
                    refFormGeneralintakeViewModel.Refills_TxtBox1 = refFormGeneralintake.Refills_TxtBox1;
                    refFormGeneralintakeViewModel.Med_TxtBox2 = refFormGeneralintake.Med_TxtBox2;
                    refFormGeneralintakeViewModel.Strength_TxtBox2 = refFormGeneralintake.Strength_TxtBox2;
                    refFormGeneralintakeViewModel.Dose_TxtBox2 = refFormGeneralintake.Dose_TxtBox2;
                    refFormGeneralintakeViewModel.Qty_TxtBox2 = refFormGeneralintake.Qty_TxtBox2;
                    refFormGeneralintakeViewModel.Refills_TxtBox2 = refFormGeneralintake.Refills_TxtBox2;
                    refFormGeneralintakeViewModel.Med_TxtBox3 = refFormGeneralintake.Med_TxtBox3;
                    refFormGeneralintakeViewModel.Strength_TxtBox3 = refFormGeneralintake.Strength_TxtBox3;
                    refFormGeneralintakeViewModel.Dose_TxtBox3 = refFormGeneralintake.Dose_TxtBox3;
                    refFormGeneralintakeViewModel.Qty_TxtBox3 = refFormGeneralintake.Qty_TxtBox3;
                    refFormGeneralintakeViewModel.Refills_TxtBox3 = refFormGeneralintake.Refills_TxtBox3;
                    refFormGeneralintakeViewModel.Med_TxtBox4 = refFormGeneralintake.Med_TxtBox4;
                    refFormGeneralintakeViewModel.Strength_TxtBox4 = refFormGeneralintake.Strength_TxtBox4;
                    refFormGeneralintakeViewModel.Dose_TxtBox4 = refFormGeneralintake.Dose_TxtBox4;
                    refFormGeneralintakeViewModel.Qty_TxtBox4 = refFormGeneralintake.Qty_TxtBox4;
                    refFormGeneralintakeViewModel.Refills_TxtBox4 = refFormGeneralintake.Refills_TxtBox4;
                    refFormGeneralintakeViewModel.Med_TxtBox5 = refFormGeneralintake.Med_TxtBox5;
                    refFormGeneralintakeViewModel.Strength_TxtBox5 = refFormGeneralintake.Strength_TxtBox5;
                    refFormGeneralintakeViewModel.Dose_TxtBox5 = refFormGeneralintake.Dose_TxtBox5;
                    refFormGeneralintakeViewModel.Qty_TxtBox5 = refFormGeneralintake.Qty_TxtBox5;
                    refFormGeneralintakeViewModel.Refills_TxtBox5 = refFormGeneralintake.Refills_TxtBox5;
                    refFormGeneralintakeViewModel.Med_TxtBox6 = refFormGeneralintake.Med_TxtBox6;
                    refFormGeneralintakeViewModel.Strength_TxtBox6 = refFormGeneralintake.Strength_TxtBox6;
                    refFormGeneralintakeViewModel.Dose_TxtBox6 = refFormGeneralintake.Dose_TxtBox6;
                    refFormGeneralintakeViewModel.Qty_TxtBox6 = refFormGeneralintake.Qty_TxtBox6;
                    refFormGeneralintakeViewModel.Refills_TxtBox6 = refFormGeneralintake.Refills_TxtBox6;
                    refFormGeneralintakeViewModel.Med_TxtBox7 = refFormGeneralintake.Med_TxtBox7;
                    refFormGeneralintakeViewModel.Strength_TxtBox7 = refFormGeneralintake.Strength_TxtBox7;
                    refFormGeneralintakeViewModel.Dose_TxtBox7 = refFormGeneralintake.Dose_TxtBox7;
                    refFormGeneralintakeViewModel.Qty_TxtBox7 = refFormGeneralintake.Qty_TxtBox7;
                    refFormGeneralintakeViewModel.Refills_TxtBox7 = refFormGeneralintake.Refills_TxtBox7;
                    refFormGeneralintakeViewModel.Med_TxtBox8 = refFormGeneralintake.Med_TxtBox8;
                    refFormGeneralintakeViewModel.Strength_TxtBox8 = refFormGeneralintake.Strength_TxtBox8;
                    refFormGeneralintakeViewModel.Dose_TxtBox8 = refFormGeneralintake.Dose_TxtBox8;
                    refFormGeneralintakeViewModel.Qty_TxtBox8 = refFormGeneralintake.Qty_TxtBox8;
                    refFormGeneralintakeViewModel.Refills_TxtBox8 = refFormGeneralintake.Refills_TxtBox8;
                    refFormGeneralintakeViewModel.Med_TxtBox9 = refFormGeneralintake.Med_TxtBox9;
                    refFormGeneralintakeViewModel.Strength_TxtBox9 = refFormGeneralintake.Strength_TxtBox9;
                    refFormGeneralintakeViewModel.Dose_TxtBox9 = refFormGeneralintake.Dose_TxtBox9;
                    refFormGeneralintakeViewModel.Qty_TxtBox9 = refFormGeneralintake.Qty_TxtBox9;
                    refFormGeneralintakeViewModel.Refills_TxtBox9 = refFormGeneralintake.Refills_TxtBox9;
                    refFormGeneralintakeViewModel.Med_TxtBox10 = refFormGeneralintake.Med_TxtBox10;
                    refFormGeneralintakeViewModel.Strength_TxtBox10 = refFormGeneralintake.Strength_TxtBox10;
                    refFormGeneralintakeViewModel.Dose_TxtBox10 = refFormGeneralintake.Dose_TxtBox10;
                    refFormGeneralintakeViewModel.Qty_TxtBox10 = refFormGeneralintake.Qty_TxtBox10;
                    refFormGeneralintakeViewModel.Refills_TxtBox10 = refFormGeneralintake.Refills_TxtBox10;



                    refFormGeneralintakeViewModel.Date1 = refFormGeneralintake.Date1;
                    refFormGeneralintakeViewModel.Date2 = refFormGeneralintake.Date2;

                    refFormGeneralintakeViewModel.IsSignatured = refFormGeneralintake.IsSignatured ?? false;

                    return View(refFormGeneralintakeViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method refFormGeneralintakeViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormGeneralintakeViewModel());
        }

        [HttpPost]
        public JsonResult ggca_general_intake_referral_form(RefFormGeneralintakeViewModel refFormGeneralintakeViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Hiv Aids Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 8;

                int referralFormId = refFormGeneralintakeViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormGeneralintake refFormGeneralintake = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormGeneralintakeViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormGeneralintake = _unitOfWork.RefFormGeneralintake.GetSingle(t => t.RefFormGeneralintakeId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormGeneralintake == null)
                {
                    refFormGeneralintake = new RefFormGeneralintake();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }


                refFormGeneralintake.RefFormGeneralintakeId = refFormGeneralintakeViewModel.RefFormGeneralintakeId;

                //Form
                refFormGeneralintake.FormDate = refFormGeneralintakeViewModel.FormDate;
                refFormGeneralintake.FormNeedsByDate = refFormGeneralintakeViewModel.FormNeedsByDate;
                refFormGeneralintake.ChkBox_ShipToPatient = refFormGeneralintakeViewModel.ChkBox_ShipToPatient;
                refFormGeneralintake.ChkBox_ShipToOffice = refFormGeneralintakeViewModel.ChkBox_ShipToOffice;
                refFormGeneralintake.ChkBox_ShipToOther = refFormGeneralintakeViewModel.ChkBox_ShipToOther;
                refFormGeneralintake.TxtBox_ShipToOther = refFormGeneralintakeViewModel.TxtBox_ShipToOther;

                //Diagnosis:

                refFormGeneralintake.Diagnosis_TxtBox = refFormGeneralintakeViewModel.Diagnosis_TxtBox;
                refFormGeneralintake.DrugAllergies_TxtBox = refFormGeneralintakeViewModel.DrugAllergies_TxtBox;
                refFormGeneralintake.PFM_TextBox1 = refFormGeneralintakeViewModel.PFM_TextBox1;
                refFormGeneralintake.LOT_TextBox1 = refFormGeneralintakeViewModel.LOT_TextBox1;
                refFormGeneralintake.ROD_TextBox1 = refFormGeneralintakeViewModel.ROD_TextBox1;
                refFormGeneralintake.PFM_TextBox2 = refFormGeneralintakeViewModel.PFM_TextBox2;
                refFormGeneralintake.LOT_TextBox2 = refFormGeneralintakeViewModel.LOT_TextBox2;
                refFormGeneralintake.ROD_TextBox2 = refFormGeneralintakeViewModel.ROD_TextBox2;
                refFormGeneralintake.PFM_TextBox3 = refFormGeneralintakeViewModel.PFM_TextBox3;
                refFormGeneralintake.LOT_TextBox3 = refFormGeneralintakeViewModel.LOT_TextBox3;
                refFormGeneralintake.ROD_TextBox3 = refFormGeneralintakeViewModel.ROD_TextBox3;
                refFormGeneralintake.PFM_TextBox4 = refFormGeneralintakeViewModel.PFM_TextBox4;
                refFormGeneralintake.LOT_TextBox4 = refFormGeneralintakeViewModel.LOT_TextBox4;
                refFormGeneralintake.ROD_TextBox4 = refFormGeneralintakeViewModel.ROD_TextBox4;
                refFormGeneralintake.Med_TxtBox1 = refFormGeneralintakeViewModel.Med_TxtBox1;
                refFormGeneralintake.Strength_TxtBox1 = refFormGeneralintakeViewModel.Strength_TxtBox1;
                refFormGeneralintake.Dose_TxtBox1 = refFormGeneralintakeViewModel.Dose_TxtBox1;
                refFormGeneralintake.Qty_TxtBox1 = refFormGeneralintakeViewModel.Qty_TxtBox1;
                refFormGeneralintake.Refills_TxtBox1 = refFormGeneralintakeViewModel.Refills_TxtBox1;
                refFormGeneralintake.Med_TxtBox2 = refFormGeneralintakeViewModel.Med_TxtBox2;
                refFormGeneralintake.Strength_TxtBox2 = refFormGeneralintakeViewModel.Strength_TxtBox2;
                refFormGeneralintake.Dose_TxtBox2 = refFormGeneralintakeViewModel.Dose_TxtBox2;
                refFormGeneralintake.Qty_TxtBox2 = refFormGeneralintakeViewModel.Qty_TxtBox2;
                refFormGeneralintake.Refills_TxtBox2 = refFormGeneralintakeViewModel.Refills_TxtBox2;
                refFormGeneralintake.Med_TxtBox3 = refFormGeneralintakeViewModel.Med_TxtBox3;
                refFormGeneralintake.Strength_TxtBox3 = refFormGeneralintakeViewModel.Strength_TxtBox3;
                refFormGeneralintake.Dose_TxtBox3 = refFormGeneralintakeViewModel.Dose_TxtBox3;
                refFormGeneralintake.Qty_TxtBox3 = refFormGeneralintakeViewModel.Qty_TxtBox3;
                refFormGeneralintake.Refills_TxtBox3 = refFormGeneralintakeViewModel.Refills_TxtBox3;
                refFormGeneralintake.Med_TxtBox4 = refFormGeneralintakeViewModel.Med_TxtBox4;
                refFormGeneralintake.Strength_TxtBox4 = refFormGeneralintakeViewModel.Strength_TxtBox4;
                refFormGeneralintake.Dose_TxtBox4 = refFormGeneralintakeViewModel.Dose_TxtBox4;
                refFormGeneralintake.Qty_TxtBox4 = refFormGeneralintakeViewModel.Qty_TxtBox4;
                refFormGeneralintake.Refills_TxtBox4 = refFormGeneralintakeViewModel.Refills_TxtBox4;
                refFormGeneralintake.Med_TxtBox5 = refFormGeneralintakeViewModel.Med_TxtBox5;
                refFormGeneralintake.Strength_TxtBox5 = refFormGeneralintakeViewModel.Strength_TxtBox5;
                refFormGeneralintake.Dose_TxtBox5 = refFormGeneralintakeViewModel.Dose_TxtBox5;
                refFormGeneralintake.Qty_TxtBox5 = refFormGeneralintakeViewModel.Qty_TxtBox5;
                refFormGeneralintake.Refills_TxtBox5 = refFormGeneralintakeViewModel.Refills_TxtBox5;
                refFormGeneralintake.Med_TxtBox6 = refFormGeneralintakeViewModel.Med_TxtBox6;
                refFormGeneralintake.Strength_TxtBox6 = refFormGeneralintakeViewModel.Strength_TxtBox6;
                refFormGeneralintake.Dose_TxtBox6 = refFormGeneralintakeViewModel.Dose_TxtBox6;
                refFormGeneralintake.Qty_TxtBox6 = refFormGeneralintakeViewModel.Qty_TxtBox6;
                refFormGeneralintake.Refills_TxtBox6 = refFormGeneralintakeViewModel.Refills_TxtBox6;
                refFormGeneralintake.Med_TxtBox7 = refFormGeneralintakeViewModel.Med_TxtBox7;
                refFormGeneralintake.Strength_TxtBox7 = refFormGeneralintakeViewModel.Strength_TxtBox7;
                refFormGeneralintake.Dose_TxtBox7 = refFormGeneralintakeViewModel.Dose_TxtBox7;
                refFormGeneralintake.Qty_TxtBox7 = refFormGeneralintakeViewModel.Qty_TxtBox7;
                refFormGeneralintake.Refills_TxtBox7 = refFormGeneralintakeViewModel.Refills_TxtBox7;
                refFormGeneralintake.Med_TxtBox8 = refFormGeneralintakeViewModel.Med_TxtBox8;
                refFormGeneralintake.Strength_TxtBox8 = refFormGeneralintakeViewModel.Strength_TxtBox8;
                refFormGeneralintake.Dose_TxtBox8 = refFormGeneralintakeViewModel.Dose_TxtBox8;
                refFormGeneralintake.Qty_TxtBox8 = refFormGeneralintakeViewModel.Qty_TxtBox8;
                refFormGeneralintake.Refills_TxtBox8 = refFormGeneralintakeViewModel.Refills_TxtBox8;
                refFormGeneralintake.Med_TxtBox9 = refFormGeneralintakeViewModel.Med_TxtBox9;
                refFormGeneralintake.Strength_TxtBox9 = refFormGeneralintakeViewModel.Strength_TxtBox9;
                refFormGeneralintake.Dose_TxtBox9 = refFormGeneralintakeViewModel.Dose_TxtBox9;
                refFormGeneralintake.Qty_TxtBox9 = refFormGeneralintakeViewModel.Qty_TxtBox9;
                refFormGeneralintake.Refills_TxtBox9 = refFormGeneralintakeViewModel.Refills_TxtBox9;
                refFormGeneralintake.Med_TxtBox10 = refFormGeneralintakeViewModel.Med_TxtBox10;
                refFormGeneralintake.Strength_TxtBox10 = refFormGeneralintakeViewModel.Strength_TxtBox10;
                refFormGeneralintake.Dose_TxtBox10 = refFormGeneralintakeViewModel.Dose_TxtBox10;
                refFormGeneralintake.Qty_TxtBox10 = refFormGeneralintakeViewModel.Qty_TxtBox10;
                refFormGeneralintake.Refills_TxtBox10 = refFormGeneralintakeViewModel.Refills_TxtBox10;



                //form
                refFormGeneralintake.Date1 = refFormGeneralintakeViewModel.Date1;
                refFormGeneralintake.Date2 = refFormGeneralintakeViewModel.Date2;

                refFormGeneralintake.IsSignatured = refFormGeneralintakeViewModel.IsSignatured;

                refFormGeneralintake.ModifiedBy = CurrentUser.UserId;
                refFormGeneralintake.ModifiedOn = DateTime.UtcNow;

                if (IsEdit)
                {
                    _unitOfWork.RefFormGeneralintake.Update(refFormGeneralintake);
                    AuditLogger.AuditTracker("Edit refFormGeneralintakeReferralForm", "refFormGeneralintakeReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormGeneralintake.CreatedBy = CurrentUser.UserId;
                    refFormGeneralintake.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormGeneralintake.Insert(refFormGeneralintake);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New GeneralintakeReferralForm", "A refFormGeneralintakeReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormGeneralintakeViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormGeneralintake.RefFormGeneralintakeId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();

                return Json(new { message = "Save Generalintake Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method GeneralintakeReferralForm PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save Generalintake Referral Form Unsuccessfully.", success = false });
        }
        //lmfl_bloodmodifyingagents_referral_form
        public ActionResult lmfl_bloodmodifyingagents_referral_form(int PhysicianPortalPatientId, int referralFormId = 0)
        {
            try
            {

                //ViewBag.CurrentUser = CurrentUser;
                var userPhysicianRelationship = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.UserId == CurrentUser.UserId);
                var physicianSignature = userPhysicianRelationship != null ?
                    _unitOfWork.PhysicianSignatureRepository.GetSingle(t => t.PhysicianMasterId == userPhysicianRelationship.PhysicianId) : null;

                if (physicianSignature?.Signature != null)
                {
                    ViewBag.IsHaveSignature = true;
                }
                else
                {
                    ViewBag.IsHaveSignature = false;
                }
                //int referralFormId;
                if (referralFormId == 0)
                {
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Lmfl bloodmodifyingagents referral form"));
                    referralFormId = referralForm?.ReferralFormId ?? 75;
                }

                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                RefFormBloodModifyingAgentViewModel refFormBloodModifyingAgentViewModel = new RefFormBloodModifyingAgentViewModel();

                //Set ReferralFormId
                refFormBloodModifyingAgentViewModel.ReferralFormId = referralFormId;

                if (patient != null)
                {
                    //Patient Information
                    refFormBloodModifyingAgentViewModel.PatientFullName = patient.FirstName + " " + patient.LastName;
                    refFormBloodModifyingAgentViewModel.PatientAddressLine1 = patient.AddressLine1;
                    refFormBloodModifyingAgentViewModel.PatientCity_StateProvince_PostalCode = patient.City + ", " + patient.StateProvince + ", " + (!string.IsNullOrEmpty(patient.PostalCode) ? patient.PostalCode.Substring(0, 5) : "");
                    refFormBloodModifyingAgentViewModel.PatientPhoneNumber = patient.PhoneNumber;
                    refFormBloodModifyingAgentViewModel.PatientDateOfBirth = patient.DateOfBirth;
                    refFormBloodModifyingAgentViewModel.PatientGender = patient.Gender;

                    //Physician Information
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    if (physician != null)
                    {
                        refFormBloodModifyingAgentViewModel.PhysicianFullName = physician.FullName;
                        refFormBloodModifyingAgentViewModel.PhysicianDrugEnforcementAdministrationNumber = physician.DrugEnforcementAdministrationNumber;
                        refFormBloodModifyingAgentViewModel.PhysicianNationalProviderIdentifier = physician.NationalProviderIdentifier;
                        refFormBloodModifyingAgentViewModel.PhysicianPhysicianLicenseNumber = physician.PhysicianLicenseNumber;
                        refFormBloodModifyingAgentViewModel.PhysicianAddressLine1 = physician.AddressLine1;
                        refFormBloodModifyingAgentViewModel.PhysicianCity_StateProvince_PostalCode = physician.City + ", " + physician.StateProvince + ", " + (!string.IsNullOrEmpty(physician.PostalCode) ? physician.PostalCode.Substring(0, 5) : "");
                        refFormBloodModifyingAgentViewModel.PhysicianPhoneNumber = physician.PhoneNumber;
                        refFormBloodModifyingAgentViewModel.PhysicianFaxNumber = physician.FaxNumber;
                    }

                    var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId && t.ReferralFormId == referralFormId);
                    RefFormBloodModifyingAgent refFormBloodModifyingAgent = null;


                    if (physicianPortalPatient_ReferralForm_Relationship != null)
                    {
                        refFormBloodModifyingAgent = _unitOfWork.RefFormBloodModifyingAgent.GetSingle(t => t.RefFormBloodmodifyingagentsId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                    }

                    if (refFormBloodModifyingAgent == null) refFormBloodModifyingAgent = new RefFormBloodModifyingAgent();


                    refFormBloodModifyingAgentViewModel.RefFormBloodmodifyingagentsId = refFormBloodModifyingAgent.RefFormBloodmodifyingagentsId;

                    //Form
                    //Add your code here.

                    refFormBloodModifyingAgentViewModel.FormDate = refFormBloodModifyingAgent.FormDate;
                    refFormBloodModifyingAgentViewModel.FormNeedsByDate = refFormBloodModifyingAgent.FormNeedsByDate;
                    refFormBloodModifyingAgentViewModel.ChkBox_ShipToPatient = refFormBloodModifyingAgent.ChkBox_ShipToPatient ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_ShipToOffice = refFormBloodModifyingAgent.ChkBox_ShipToOffice ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_ShipToOther = refFormBloodModifyingAgent.ChkBox_ShipToOther ?? false;
                    refFormBloodModifyingAgentViewModel.TxtBox_ShipToOther = refFormBloodModifyingAgent.TxtBox_ShipToOther;



                    refFormBloodModifyingAgentViewModel.Primary_TxtBox1 = refFormBloodModifyingAgent.Primary_TxtBox1;
                    refFormBloodModifyingAgentViewModel.Primary_TxtBox2 = refFormBloodModifyingAgent.Primary_TxtBox2;
                    refFormBloodModifyingAgentViewModel.Primary_ICD_10_TxtBox1 = refFormBloodModifyingAgent.Primary_ICD_10_TxtBox1;
                    refFormBloodModifyingAgentViewModel.Primary_ICD_10_TxtBox2 = refFormBloodModifyingAgent.Primary_ICD_10_TxtBox2;
                    refFormBloodModifyingAgentViewModel.Secondary_TxtBox1 = refFormBloodModifyingAgent.Secondary_TxtBox1;
                    refFormBloodModifyingAgentViewModel.Secondary_TxtBox2 = refFormBloodModifyingAgent.Secondary_TxtBox2;
                    refFormBloodModifyingAgentViewModel.Secondary_ICD_10_TxtBox1 = refFormBloodModifyingAgent.Secondary_ICD_10_TxtBox1;
                    refFormBloodModifyingAgentViewModel.Secondary_ICD_10_TxtBox2 = refFormBloodModifyingAgent.Secondary_ICD_10_TxtBox2;
                    refFormBloodModifyingAgentViewModel.ChkBox_Aranesp = refFormBloodModifyingAgent.ChkBox_Aranesp ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_25mcg = refFormBloodModifyingAgent.ChkBox_Aranesp_25mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_40mcg = refFormBloodModifyingAgent.ChkBox_Aranesp_40mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_60mcg = refFormBloodModifyingAgent.ChkBox_Aranesp_60mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_100mcg = refFormBloodModifyingAgent.ChkBox_Aranesp_100mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_200mcg = refFormBloodModifyingAgent.ChkBox_Aranesp_200mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_300mcg = refFormBloodModifyingAgent.ChkBox_Aranesp_300mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_150mcg = refFormBloodModifyingAgent.ChkBox_Aranesp_150mcg ?? false;
                    refFormBloodModifyingAgentViewModel.Aranesp_Qty_TxtBox = refFormBloodModifyingAgent.Aranesp_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Aranesp_Refills_TxtBox = refFormBloodModifyingAgent.Aranesp_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_10mcg = refFormBloodModifyingAgent.ChkBox_PFS1_10mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_25mcg = refFormBloodModifyingAgent.ChkBox_PFS1_25mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_40mcg = refFormBloodModifyingAgent.ChkBox_PFS1_40mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_60mcg = refFormBloodModifyingAgent.ChkBox_PFS1_60mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_100mcg = refFormBloodModifyingAgent.ChkBox_PFS1_100mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_150mcg = refFormBloodModifyingAgent.ChkBox_PFS1_150mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_200mcg = refFormBloodModifyingAgent.ChkBox_PFS1_200mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_300mcg = refFormBloodModifyingAgent.ChkBox_PFS1_300mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_PFS1_500mcg = refFormBloodModifyingAgent.ChkBox_PFS1_500mcg ?? false;
                    refFormBloodModifyingAgentViewModel.Qty_TxtBox = refFormBloodModifyingAgent.Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Refills_TxtBox = refFormBloodModifyingAgent.Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Arixtra = refFormBloodModifyingAgent.ChkBox_Arixtra ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Arixtra_2_5mg = refFormBloodModifyingAgent.ChkBox_Arixtra_2_5mg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Arixtra_5mg = refFormBloodModifyingAgent.ChkBox_Arixtra_5mg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Arixtra_7_5mg = refFormBloodModifyingAgent.ChkBox_Arixtra_7_5mg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Arixtra_10mg = refFormBloodModifyingAgent.ChkBox_Arixtra_10mg ?? false;
                    refFormBloodModifyingAgentViewModel.Arixtra_Qty_TxtBox = refFormBloodModifyingAgent.Arixtra_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Arixtra_Refills_TxtBox = refFormBloodModifyingAgent.Arixtra_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Epogen = refFormBloodModifyingAgent.ChkBox_Epogen ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Epogen_SDV_2000 = refFormBloodModifyingAgent.ChkBox_Epogen_SDV_2000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Epogen_SDV_3000 = refFormBloodModifyingAgent.ChkBox_Epogen_SDV_3000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Epogen_SDV_4000 = refFormBloodModifyingAgent.ChkBox_Epogen_SDV_4000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Epogen_SDV_10000 = refFormBloodModifyingAgent.ChkBox_Epogen_SDV_10000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Epogen_MDV_20000 = refFormBloodModifyingAgent.ChkBox_Epogen_MDV_20000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Epogen_20000 = refFormBloodModifyingAgent.ChkBox_Epogen_20000 ?? false;
                    refFormBloodModifyingAgentViewModel.Epogen_Qty_TxtBox = refFormBloodModifyingAgent.Epogen_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Epogen_Refills_TxtBox = refFormBloodModifyingAgent.Epogen_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Procrit = refFormBloodModifyingAgent.ChkBox_Procrit ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_2000 = refFormBloodModifyingAgent.ChkBox_Procrit_SDV_2000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_3000 = refFormBloodModifyingAgent.ChkBox_Procrit_SDV_3000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_4000 = refFormBloodModifyingAgent.ChkBox_Procrit_SDV_4000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_10000 = refFormBloodModifyingAgent.ChkBox_Procrit_SDV_10000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_40000 = refFormBloodModifyingAgent.ChkBox_Procrit_SDV_40000 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Procrit_MDV_20000_1 = refFormBloodModifyingAgent.ChkBox_Procrit_MDV_20000_1 ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Procrit_MDV_20000_2 = refFormBloodModifyingAgent.ChkBox_Procrit_MDV_20000_2 ?? false;
                    refFormBloodModifyingAgentViewModel.Procit_Qty_TxtBox = refFormBloodModifyingAgent.Procit_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Procit_Refills_TxtBox = refFormBloodModifyingAgent.Procit_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Granix = refFormBloodModifyingAgent.ChkBox_Granix ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Granix_PFS300mcg = refFormBloodModifyingAgent.ChkBox_Granix_PFS300mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Granix_PFS480mcg = refFormBloodModifyingAgent.ChkBox_Granix_PFS480mcg ?? false;
                    refFormBloodModifyingAgentViewModel.Granix_Qty_TxtBox = refFormBloodModifyingAgent.Granix_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Granix_Refills_TxtBox = refFormBloodModifyingAgent.Granix_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Leukine = refFormBloodModifyingAgent.ChkBox_Leukine ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Leukine_250mcg = refFormBloodModifyingAgent.ChkBox_Leukine_250mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Leukine_500mcg = refFormBloodModifyingAgent.ChkBox_Leukine_500mcg ?? false;
                    refFormBloodModifyingAgentViewModel.Leukine_Qty_TxtBox = refFormBloodModifyingAgent.Leukine_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Leukine_Refills_TxtBox = refFormBloodModifyingAgent.Leukine_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Neulasta = refFormBloodModifyingAgent.ChkBox_Neulasta ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Neulasta_6mg = refFormBloodModifyingAgent.ChkBox_Neulasta_6mg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Neulasta_onprokit = refFormBloodModifyingAgent.ChkBox_Neulasta_onprokit ?? false;
                    refFormBloodModifyingAgentViewModel.Neulasta_Qty_TxtBox = refFormBloodModifyingAgent.Neulasta_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Neulasta_Refills_TxtBox = refFormBloodModifyingAgent.Neulasta_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Neupogen = refFormBloodModifyingAgent.ChkBox_Neupogen ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Neupogen_vial_300mcg = refFormBloodModifyingAgent.ChkBox_Neupogen_vial_300mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Neupogen__vial_480mcg = refFormBloodModifyingAgent.ChkBox_Neupogen__vial_480mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Neupogen_PFS_300mcg = refFormBloodModifyingAgent.ChkBox_Neupogen_PFS_300mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Neupogen__PFS_480mcg = refFormBloodModifyingAgent.ChkBox_Neupogen__PFS_480mcg ?? false;
                    refFormBloodModifyingAgentViewModel.Neupogen_Qty_TxtBox = refFormBloodModifyingAgent.Neupogen_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Neupogen_Refills_TxtBox = refFormBloodModifyingAgent.Neupogen_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Zarxio = refFormBloodModifyingAgent.ChkBox_Zarxio ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Zarxio_PFS_300mcg = refFormBloodModifyingAgent.ChkBox_Zarxio_PFS_300mcg ?? false;
                    refFormBloodModifyingAgentViewModel.ChkBox_Zarxio_PFS_480mcg = refFormBloodModifyingAgent.ChkBox_Zarxio_PFS_480mcg ?? false;
                    refFormBloodModifyingAgentViewModel.Zarxio_Qty_TxtBox = refFormBloodModifyingAgent.Zarxio_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Zarxio_Refills_TxtBox = refFormBloodModifyingAgent.Zarxio_Refills_TxtBox;
                    refFormBloodModifyingAgentViewModel.ChkBox_Other = refFormBloodModifyingAgent.ChkBox_Other ?? false;
                    refFormBloodModifyingAgentViewModel.Other_TxtBox1 = refFormBloodModifyingAgent.Other_TxtBox1;
                    refFormBloodModifyingAgentViewModel.Other_TxtBox2 = refFormBloodModifyingAgent.Other_TxtBox2;
                    refFormBloodModifyingAgentViewModel.Other_Qty_TxtBox = refFormBloodModifyingAgent.Other_Qty_TxtBox;
                    refFormBloodModifyingAgentViewModel.Other_Refills_TxtBox = refFormBloodModifyingAgent.Other_Refills_TxtBox;




                    refFormBloodModifyingAgentViewModel.Date1 = refFormBloodModifyingAgent.Date1;
                    refFormBloodModifyingAgentViewModel.Date2 = refFormBloodModifyingAgent.Date2;

                    refFormBloodModifyingAgentViewModel.IsSignatured = refFormBloodModifyingAgent.IsSignatured ?? false;

                    return View(refFormBloodModifyingAgentViewModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method refFormBloodModifyingAgentViewModel Referral Form PatientsController. " + exception.Message, exception);
            }
            return View(new RefFormBloodModifyingAgentViewModel());
        }

        [HttpPost]
        public JsonResult lmfl_bloodmodifyingagents_referral_form(RefFormBloodModifyingAgentViewModel refFormBloodModifyingAgentViewModel)
        {
            try
            {
                //int referralFormId;
                //ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals("Hiv Aids Referral Form"));
                //referralFormId = referralForm?.ReferralFormId ?? 8;

                int referralFormId = refFormBloodModifyingAgentViewModel.ReferralFormId;

                bool IsEdit = false;
                RefFormBloodModifyingAgent refFormBloodModifyingAgent = null;
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == refFormBloodModifyingAgentViewModel.PhysicianPortalPatientId && t.ReferralFormId == referralFormId);

                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormBloodModifyingAgent = _unitOfWork.RefFormBloodModifyingAgent.GetSingle(t => t.RefFormBloodmodifyingagentsId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }

                if (refFormBloodModifyingAgent == null)
                {
                    refFormBloodModifyingAgent = new RefFormBloodModifyingAgent();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }


                refFormBloodModifyingAgent.RefFormBloodmodifyingagentsId = refFormBloodModifyingAgentViewModel.RefFormBloodmodifyingagentsId;

                //Form
                refFormBloodModifyingAgent.FormDate = refFormBloodModifyingAgentViewModel.FormDate;
                refFormBloodModifyingAgent.FormNeedsByDate = refFormBloodModifyingAgentViewModel.FormNeedsByDate;
                refFormBloodModifyingAgent.ChkBox_ShipToPatient = refFormBloodModifyingAgentViewModel.ChkBox_ShipToPatient;
                refFormBloodModifyingAgent.ChkBox_ShipToOffice = refFormBloodModifyingAgentViewModel.ChkBox_ShipToOffice;
                refFormBloodModifyingAgent.ChkBox_ShipToOther = refFormBloodModifyingAgentViewModel.ChkBox_ShipToOther;
                refFormBloodModifyingAgent.TxtBox_ShipToOther = refFormBloodModifyingAgentViewModel.TxtBox_ShipToOther;

                //Diagnosis:


                refFormBloodModifyingAgent.Primary_TxtBox1 = refFormBloodModifyingAgentViewModel.Primary_TxtBox1;
                refFormBloodModifyingAgent.Primary_TxtBox2 = refFormBloodModifyingAgentViewModel.Primary_TxtBox2;
                refFormBloodModifyingAgent.Primary_ICD_10_TxtBox1 = refFormBloodModifyingAgentViewModel.Primary_ICD_10_TxtBox1;
                refFormBloodModifyingAgent.Primary_ICD_10_TxtBox2 = refFormBloodModifyingAgentViewModel.Primary_ICD_10_TxtBox2;
                refFormBloodModifyingAgent.Secondary_TxtBox1 = refFormBloodModifyingAgentViewModel.Secondary_TxtBox1;
                refFormBloodModifyingAgent.Secondary_TxtBox2 = refFormBloodModifyingAgentViewModel.Secondary_TxtBox2;
                refFormBloodModifyingAgent.Secondary_ICD_10_TxtBox1 = refFormBloodModifyingAgentViewModel.Secondary_ICD_10_TxtBox1;
                refFormBloodModifyingAgent.Secondary_ICD_10_TxtBox2 = refFormBloodModifyingAgentViewModel.Secondary_ICD_10_TxtBox2;
                refFormBloodModifyingAgent.ChkBox_Aranesp = refFormBloodModifyingAgentViewModel.ChkBox_Aranesp;
                refFormBloodModifyingAgent.ChkBox_Aranesp_25mcg = refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_25mcg;
                refFormBloodModifyingAgent.ChkBox_Aranesp_40mcg = refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_40mcg;
                refFormBloodModifyingAgent.ChkBox_Aranesp_60mcg = refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_60mcg;
                refFormBloodModifyingAgent.ChkBox_Aranesp_100mcg = refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_100mcg;
                refFormBloodModifyingAgent.ChkBox_Aranesp_200mcg = refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_200mcg;
                refFormBloodModifyingAgent.ChkBox_Aranesp_300mcg = refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_300mcg;
                refFormBloodModifyingAgent.ChkBox_Aranesp_150mcg = refFormBloodModifyingAgentViewModel.ChkBox_Aranesp_150mcg;
                refFormBloodModifyingAgent.Aranesp_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Aranesp_Qty_TxtBox;
                refFormBloodModifyingAgent.Aranesp_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Aranesp_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_PFS1_10mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_10mcg;
                refFormBloodModifyingAgent.ChkBox_PFS1_25mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_25mcg;
                refFormBloodModifyingAgent.ChkBox_PFS1_40mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_40mcg;
                refFormBloodModifyingAgent.ChkBox_PFS1_60mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_60mcg;
                refFormBloodModifyingAgent.ChkBox_PFS1_100mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_100mcg;
                refFormBloodModifyingAgent.ChkBox_PFS1_150mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_150mcg;
                refFormBloodModifyingAgent.ChkBox_PFS1_200mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_200mcg;
                refFormBloodModifyingAgent.ChkBox_PFS1_300mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_300mcg;
                refFormBloodModifyingAgent.ChkBox_PFS1_500mcg = refFormBloodModifyingAgentViewModel.ChkBox_PFS1_500mcg;
                refFormBloodModifyingAgent.Qty_TxtBox = refFormBloodModifyingAgentViewModel.Qty_TxtBox;
                refFormBloodModifyingAgent.Refills_TxtBox = refFormBloodModifyingAgentViewModel.Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Arixtra = refFormBloodModifyingAgentViewModel.ChkBox_Arixtra;
                refFormBloodModifyingAgent.ChkBox_Arixtra_2_5mg = refFormBloodModifyingAgentViewModel.ChkBox_Arixtra_2_5mg;
                refFormBloodModifyingAgent.ChkBox_Arixtra_5mg = refFormBloodModifyingAgentViewModel.ChkBox_Arixtra_5mg;
                refFormBloodModifyingAgent.ChkBox_Arixtra_7_5mg = refFormBloodModifyingAgentViewModel.ChkBox_Arixtra_7_5mg;
                refFormBloodModifyingAgent.ChkBox_Arixtra_10mg = refFormBloodModifyingAgentViewModel.ChkBox_Arixtra_10mg;
                refFormBloodModifyingAgent.Arixtra_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Arixtra_Qty_TxtBox;
                refFormBloodModifyingAgent.Arixtra_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Arixtra_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Epogen = refFormBloodModifyingAgentViewModel.ChkBox_Epogen;
                refFormBloodModifyingAgent.ChkBox_Epogen_SDV_2000 = refFormBloodModifyingAgentViewModel.ChkBox_Epogen_SDV_2000;
                refFormBloodModifyingAgent.ChkBox_Epogen_SDV_3000 = refFormBloodModifyingAgentViewModel.ChkBox_Epogen_SDV_3000;
                refFormBloodModifyingAgent.ChkBox_Epogen_SDV_4000 = refFormBloodModifyingAgentViewModel.ChkBox_Epogen_SDV_4000;
                refFormBloodModifyingAgent.ChkBox_Epogen_SDV_10000 = refFormBloodModifyingAgentViewModel.ChkBox_Epogen_SDV_10000;
                refFormBloodModifyingAgent.ChkBox_Epogen_MDV_20000 = refFormBloodModifyingAgentViewModel.ChkBox_Epogen_MDV_20000;
                refFormBloodModifyingAgent.ChkBox_Epogen_20000 = refFormBloodModifyingAgentViewModel.ChkBox_Epogen_20000;
                refFormBloodModifyingAgent.Epogen_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Epogen_Qty_TxtBox;
                refFormBloodModifyingAgent.Epogen_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Epogen_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Procrit = refFormBloodModifyingAgentViewModel.ChkBox_Procrit;
                refFormBloodModifyingAgent.ChkBox_Procrit_SDV_2000 = refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_2000;
                refFormBloodModifyingAgent.ChkBox_Procrit_SDV_3000 = refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_3000;
                refFormBloodModifyingAgent.ChkBox_Procrit_SDV_4000 = refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_4000;
                refFormBloodModifyingAgent.ChkBox_Procrit_SDV_10000 = refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_10000;
                refFormBloodModifyingAgent.ChkBox_Procrit_SDV_40000 = refFormBloodModifyingAgentViewModel.ChkBox_Procrit_SDV_40000;
                refFormBloodModifyingAgent.ChkBox_Procrit_MDV_20000_1 = refFormBloodModifyingAgentViewModel.ChkBox_Procrit_MDV_20000_1;
                refFormBloodModifyingAgent.ChkBox_Procrit_MDV_20000_2 = refFormBloodModifyingAgentViewModel.ChkBox_Procrit_MDV_20000_2;
                refFormBloodModifyingAgent.Procit_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Procit_Qty_TxtBox;
                refFormBloodModifyingAgent.Procit_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Procit_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Granix = refFormBloodModifyingAgentViewModel.ChkBox_Granix;
                refFormBloodModifyingAgent.ChkBox_Granix_PFS300mcg = refFormBloodModifyingAgentViewModel.ChkBox_Granix_PFS300mcg;
                refFormBloodModifyingAgent.ChkBox_Granix_PFS480mcg = refFormBloodModifyingAgentViewModel.ChkBox_Granix_PFS480mcg;
                refFormBloodModifyingAgent.Granix_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Granix_Qty_TxtBox;
                refFormBloodModifyingAgent.Granix_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Granix_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Leukine = refFormBloodModifyingAgentViewModel.ChkBox_Leukine;
                refFormBloodModifyingAgent.ChkBox_Leukine_250mcg = refFormBloodModifyingAgentViewModel.ChkBox_Leukine_250mcg;
                refFormBloodModifyingAgent.ChkBox_Leukine_500mcg = refFormBloodModifyingAgentViewModel.ChkBox_Leukine_500mcg;
                refFormBloodModifyingAgent.Leukine_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Leukine_Qty_TxtBox;
                refFormBloodModifyingAgent.Leukine_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Leukine_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Neulasta = refFormBloodModifyingAgentViewModel.ChkBox_Neulasta;
                refFormBloodModifyingAgent.ChkBox_Neulasta_6mg = refFormBloodModifyingAgentViewModel.ChkBox_Neulasta_6mg;
                refFormBloodModifyingAgent.ChkBox_Neulasta_onprokit = refFormBloodModifyingAgentViewModel.ChkBox_Neulasta_onprokit;
                refFormBloodModifyingAgent.Neulasta_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Neulasta_Qty_TxtBox;
                refFormBloodModifyingAgent.Neulasta_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Neulasta_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Neupogen = refFormBloodModifyingAgentViewModel.ChkBox_Neupogen;
                refFormBloodModifyingAgent.ChkBox_Neupogen_vial_300mcg = refFormBloodModifyingAgentViewModel.ChkBox_Neupogen_vial_300mcg;
                refFormBloodModifyingAgent.ChkBox_Neupogen__vial_480mcg = refFormBloodModifyingAgentViewModel.ChkBox_Neupogen__vial_480mcg;
                refFormBloodModifyingAgent.ChkBox_Neupogen_PFS_300mcg = refFormBloodModifyingAgentViewModel.ChkBox_Neupogen_PFS_300mcg;
                refFormBloodModifyingAgent.ChkBox_Neupogen__PFS_480mcg = refFormBloodModifyingAgentViewModel.ChkBox_Neupogen__PFS_480mcg;
                refFormBloodModifyingAgent.Neupogen_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Neupogen_Qty_TxtBox;
                refFormBloodModifyingAgent.Neupogen_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Neupogen_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Zarxio = refFormBloodModifyingAgentViewModel.ChkBox_Zarxio;
                refFormBloodModifyingAgent.ChkBox_Zarxio_PFS_300mcg = refFormBloodModifyingAgentViewModel.ChkBox_Zarxio_PFS_300mcg;
                refFormBloodModifyingAgent.ChkBox_Zarxio_PFS_480mcg = refFormBloodModifyingAgentViewModel.ChkBox_Zarxio_PFS_480mcg;
                refFormBloodModifyingAgent.Zarxio_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Zarxio_Qty_TxtBox;
                refFormBloodModifyingAgent.Zarxio_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Zarxio_Refills_TxtBox;
                refFormBloodModifyingAgent.ChkBox_Other = refFormBloodModifyingAgentViewModel.ChkBox_Other;
                refFormBloodModifyingAgent.Other_TxtBox1 = refFormBloodModifyingAgentViewModel.Other_TxtBox1;
                refFormBloodModifyingAgent.Other_TxtBox2 = refFormBloodModifyingAgentViewModel.Other_TxtBox2;
                refFormBloodModifyingAgent.Other_Qty_TxtBox = refFormBloodModifyingAgentViewModel.Other_Qty_TxtBox;
                refFormBloodModifyingAgent.Other_Refills_TxtBox = refFormBloodModifyingAgentViewModel.Other_Refills_TxtBox;




                //form
                refFormBloodModifyingAgent.Date1 = refFormBloodModifyingAgentViewModel.Date1;
                refFormBloodModifyingAgent.Date2 = refFormBloodModifyingAgentViewModel.Date2;

                refFormBloodModifyingAgent.IsSignatured = refFormBloodModifyingAgentViewModel.IsSignatured;

                refFormBloodModifyingAgent.ModifiedBy = CurrentUser.UserId;
                refFormBloodModifyingAgent.ModifiedOn = DateTime.UtcNow;

                if (IsEdit)
                {
                    _unitOfWork.RefFormBloodModifyingAgent.Update(refFormBloodModifyingAgent);
                    AuditLogger.AuditTracker("Edit BloodModifyingAgentReferralForm", "BloodModifyingAgentReferralForm  has been edited.", (int)AuditOperationType.Change);

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Update(physicianPortalPatient_ReferralForm_Relationship);
                }
                else
                {
                    refFormBloodModifyingAgent.CreatedBy = CurrentUser.UserId;
                    refFormBloodModifyingAgent.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.RefFormBloodModifyingAgent.Insert(refFormBloodModifyingAgent);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New BloodModifyingAgentReferralForm", "A BloodModifyingAgentReferralForm  has been added.", (int)AuditOperationType.Addition);
                    // Add form id in PhysicianPortalPatient_ReferralForm_Relationship table
                    physicianPortalPatient_ReferralForm_Relationship = new PhysicianPortalPatient_ReferralForm_Relationship();

                    physicianPortalPatient_ReferralForm_Relationship.PhysicianPortalPatientId = refFormBloodModifyingAgentViewModel.PhysicianPortalPatientId;
                    physicianPortalPatient_ReferralForm_Relationship.ReferralFormId = referralFormId; // 1 // 26
                    physicianPortalPatient_ReferralForm_Relationship.FormId = refFormBloodModifyingAgent.RefFormBloodmodifyingagentsId;

                    physicianPortalPatient_ReferralForm_Relationship.FilledBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.FilledOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedBy = CurrentUser.UserId;
                    physicianPortalPatient_ReferralForm_Relationship.ModifiedOn = DateTime.UtcNow;
                    physicianPortalPatient_ReferralForm_Relationship.IsDeleted = false;

                    _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.Insert(physicianPortalPatient_ReferralForm_Relationship);
                }
                _unitOfWork.Save();

                return Json(new { message = "Save BloodModifyingAgentReferralForm Referral Form Successfully.", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in POST Method BloodModifyingAgentReferralForm PatientsController. " + exception.Message, exception);
            }
            return Json(new { message = "Save BloodModifyingAgent Referral Form Unsuccessfully.", success = false });
        }

        #endregion

        //To Do Code optimization
        public ActionResult AddPatient(/*int? PhysicianPortalPatientId = null*/)
        {
            try
            {
                var model = new AddPatientViewModel();
                List<int> listOfPhysicianIds = null;

                if (CurrentUser.RoleId == 5)
                {
                    //Get all the physicians in the application for the super admin
                    List<int> listOfUserPhysicians = _unitOfWork.UserRepository.GetAsQuerable(x => x.RoleId == 2).Select(y => y.UserId).ToList();
                    listOfPhysicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => listOfUserPhysicians.Contains(x.UserId)).Select(y => y.PhysicianId).Distinct().ToList();
                    model.PhysiciansList = _unitOfWork.PhysiciansRepository.GetAsQuerable(x => listOfPhysicianIds.Contains(x.PhysicianId)).Select(t => new SelectListItem { Text = t.FullName, Value = t.PhysicianId.ToString() }).ToList();
                }
                else if (CurrentUser.RoleId == 1)
                {
                    //get only the office physicians for the office admin
                    int currentOffice = UserManager.GetClaims(CurrentUser.Id).FirstOrDefault(c => c.Type == "UserOffice").Value.ToInt0();
                    var userIds = _unitOfWork.UserRepository.GetAsQuerable(t => t.User_Office_Relationship.Select(s => s.OfficeId).Contains(currentOffice) && t.RoleId == 2).Select(s => s.UserId);
                    listOfPhysicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => userIds.Contains(x.UserId)).Select(y => y.PhysicianId).Distinct().ToList();
                    model.PhysiciansList = _unitOfWork.PhysiciansRepository.GetAsQuerable(x => listOfPhysicianIds.Contains(x.PhysicianId)).Select(t => new SelectListItem { Text = t.FullName, Value = t.PhysicianId.ToString() }).ToList();
                }
                if (CurrentUser.RoleId == 2)
                {
                    //get only the physician himself when a physician is logged in
                    int physicianId = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => x.UserId == CurrentUser.UserId).Select(y => y.PhysicianId).FirstOrDefault();
                    model.PhysiciansList = _unitOfWork.PhysiciansRepository.GetAsQuerable(x => x.PhysicianId == physicianId).Select(t => new SelectListItem { Text = t.FullName, Value = t.PhysicianId.ToString() }).ToList();
                }
                else if (CurrentUser.RoleId == 3)
                {
                    //Get only the physicians for a technician when the technician is logged in
                    listOfPhysicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => x.UserId == CurrentUser.UserId).Select(y => y.PhysicianId).Distinct().ToList();
                    model.PhysiciansList = _unitOfWork.PhysiciansRepository.GetAsQuerable(x => listOfPhysicianIds.Contains(x.PhysicianId)).Select(t => new SelectListItem { Text = t.FullName, Value = t.PhysicianId.ToString() }).ToList();
                }

                model.PhysiciansList.Insert(0, new SelectListItem { Text = "", Value = "" });



                return View(model);
            }
            catch (Exception e)
            {
                Logger.InsertLog("Exception thrown in Method AddPatient() PatientsController. " + e.Message, e);
                return View("Error", new ErrorModel(e, "PatientsController", "AddPatient", ErrorTitle, ErrorMessage, null));
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult AddPatient(AddPatientViewModel model)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    ModelState.AddModelError("", "One or more inputs were not of the expected format");
                }
                var loggedInUserFullName = CurrentUser.FullName;
                bool IsEdit = false;
                PhysicianPortalPatient physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == model.PhysicianPortalPatientId);

                if (physicianPortalPatient == null)
                {
                    physicianPortalPatient = new PhysicianPortalPatient();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                physicianPortalPatient.PhysicianId = model.physicianId.Value;
                physicianPortalPatient.Email = model.Email;
                physicianPortalPatient.FirstName = model.FirstName;
                physicianPortalPatient.LastName = model.LastName;
                physicianPortalPatient.PhoneNumber = model.PhoneNumber;
                physicianPortalPatient.DateOfBirth = model.DateOfBirth;
                physicianPortalPatient.Gender = model.Gender;
                physicianPortalPatient.AddressLine1 = model.Address;
                physicianPortalPatient.City = model.City;
                physicianPortalPatient.StateProvince = model.State;
                physicianPortalPatient.PostalCode = model.Zip;
                physicianPortalPatient.PreferredLanguage = model.PreferredLanguage;

                // new fields added on 21/9/17
                physicianPortalPatient.SSN = model.SSN;
                physicianPortalPatient.PolicyNumber = model.PolicyNumber;
                physicianPortalPatient.GroupNumber = model.GroupNumber;

                physicianPortalPatient.ModifiedBy = CurrentUser.UserId;
                physicianPortalPatient.ModifiedOn = DateTime.UtcNow;


                if (IsEdit)
                {
                    _unitOfWork.PhysicianPortalPatientRepository.Update(physicianPortalPatient);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("Existing Referral Updated", "Existing Referral Updated by " + loggedInUserFullName + ", patient details ( Name :: " + model.FirstName + "  " + model.LastName + " PhysicianPortalPatientId = " + physicianPortalPatient.PhysicianPortalPatientId + ") ", (int)AuditOperationType.Addition);
                }
                else
                {

                    physicianPortalPatient.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.PhysicianPortalPatientRepository.Insert(physicianPortalPatient);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("New Referral Added", "New Referral Added by " + loggedInUserFullName + " with patient details ( Name :: " + model.FirstName + "  " + model.LastName + " PhysicianPortalPatientId = " + physicianPortalPatient.PhysicianPortalPatientId + ") ", (int)AuditOperationType.Change);
                }

                //return RedirectToAction("ReferralForms", new { PhysicianPortalPatientId = physicianPortalPatient.PhysicianPortalPatientId });
                return RedirectToAction("EditPatient", new { PhysicianPortalPatientId = Uri.EscapeUriString(SecurityHelper.Encrypt(physicianPortalPatient.PhysicianPortalPatientId.ToString())) });
            }
            catch (Exception ex)
            {
                Logger.InsertLog("Exception thrown in Method AddPatient(AddPatientViewModel model) PatientsController. " + ex.Message, ex);
                return Json(new { success = 0, message = "Failed to add patient: " + ex.Message });
            }
        }

        [HttpPost]
        public JsonResult AddCPRPatientToPhysicianPortal(AddCPRPatientToPhysicianPortalModel model)
        {
            try
            {
                if (!ModelState.IsValid)
                {
                    return Json(new { success = 0, message = "Unexpected paramertes in model" });
                }

                //Decrypting Ids
                model.PatientId = model.PatientIdEncrypted != null ? int.Parse(SecurityHelper.Decrypt(model.PatientIdEncrypted)) : 0;
                model.physicianId = model.PhysicianIdEncrypted != null ? int.Parse(SecurityHelper.Decrypt(model.PhysicianIdEncrypted)) : (int?)null;


                PhysicianPortalPatient physicianPortalPatient = new PhysicianPortalPatient();

                // ali ask to add this line
                var userPhysician = _unitOfWork.UserPhysicianRelationshippRepository.GetSingle(t => t.PhysicianId == model.physicianId);
                physicianPortalPatient.PhysicianId = userPhysician?.PhysicianId ?? 0;
                //model.physicianId.Value;
                //physicianPortalPatient.PhysicianId = model.physicianId.Value;
                physicianPortalPatient.Email = model.Email;
                physicianPortalPatient.FirstName = model.FirstName;
                physicianPortalPatient.LastName = model.LastName;
                physicianPortalPatient.PhoneNumber = model.PhoneNumber;
                physicianPortalPatient.DateOfBirth = model.DateOfBirth;
                physicianPortalPatient.Gender = model.Gender;
                physicianPortalPatient.AddressLine1 = model.Address;
                physicianPortalPatient.City = model.City;
                physicianPortalPatient.StateProvince = model.State;
                physicianPortalPatient.PostalCode = model.Zip;
                physicianPortalPatient.PreferredLanguage = model.PreferredLanguage;
                physicianPortalPatient.PatientId = model.PatientId;

                // new fields added on 21/9/17
                physicianPortalPatient.SSN = model.SSN;
                physicianPortalPatient.PolicyNumber = model.PolicyNumber;
                physicianPortalPatient.GroupNumber = model.GroupNumber;

                physicianPortalPatient.ModifiedBy = CurrentUser.UserId;
                physicianPortalPatient.ModifiedOn = DateTime.UtcNow;

                physicianPortalPatient.CreatedBy = CurrentUser.UserId;
                physicianPortalPatient.CreatedOn = DateTime.UtcNow;


                MH_DWEntities context = new MH_DWEntities();

                context.PhysicianPortalPatients.Add(physicianPortalPatient);
                context.SaveChanges();

                return Json(new { message = "Patient added successfully", success = true, PhysicianPortalPateintId = SecurityHelper.Encrypt(physicianPortalPatient.PhysicianPortalPatientId.ToString()) }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception ex)
            {
                Logger.InsertLog("Exception thrown in Method AddCPRPatientToPhysicianPortal() PatientsController. " + ex.Message, ex);
                return Json(new { success = 0, message = "Failed to add patient: " + ex.Message });
            }

        }

        public JsonResult CheckIfCPRPatientAlreadyAdded(string patientId)
        {
            try
            {
                int PatientId = int.Parse(SecurityHelper.Decrypt(patientId.ToString()));
                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetAsQuerable(x => x.PatientId == PatientId).FirstOrDefault();

                if (patient != null)
                {
                    return Json(new { message = "Patient added successfully", success = true, added = true, PhysicianPortalPatientId = SecurityHelper.Encrypt(patient.PhysicianPortalPatientId.ToString()) }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { message = "Patient added successfully", success = true, added = false }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception ex)
            {
                Logger.InsertLog("Exception thrown in Method CheckIfCPRPatientAlreadyAdded() PatientsController. " + ex.Message, ex);
                return Json(new { success = 0, message = "Failed to add patient: " + ex.Message });

            }
        }

        public ActionResult EditPatient(string PhysicianPortalPatientId = null)
        {
            try
            {
                ViewBag.GetReferralFormCategories = GetReferralFormCategories();

                var model = new AddPatientViewModel();
                List<int> listOfUserPhysicians = _unitOfWork.UserRepository.GetAsQuerable(x => x.RoleId == 2).Select(y => y.UserId).ToList();
                List<int> listOfPhysicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => listOfUserPhysicians.Contains(x.UserId)).Select(y => y.PhysicianId).ToList();

                if (CurrentUser.RoleId == 2)
                {
                    listOfPhysicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => x.UserId == CurrentUser.UserId).Select(y => y.PhysicianId).ToList();
                    model.PhysiciansList = _unitOfWork.PhysiciansRepository.GetAsQuerable(x => listOfPhysicianIds.Contains(x.PhysicianId)).Select(t => new SelectListItem { Text = t.FullName, Value = t.PhysicianId.ToString() }).ToList();
                }
                else if (CurrentUser.RoleId == 3)
                {
                    List<int> listOfPhysiciansAgainstTechs = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => x.UserId == CurrentUser.UserId && listOfPhysicianIds.Contains(x.PhysicianId)).Select(y => y.PhysicianId).ToList();
                    model.PhysiciansList = _unitOfWork.PhysiciansRepository.GetAsQuerable(x => listOfPhysiciansAgainstTechs.Contains(x.PhysicianId)).Select(t => new SelectListItem { Text = t.FullName, Value = t.PhysicianId.ToString() }).ToList();
                }
                else
                {
                    model.PhysiciansList = _unitOfWork.PhysiciansRepository.GetAsQuerable(x => listOfPhysicianIds.Contains(x.PhysicianId)).Select(t => new SelectListItem { Text = t.FullName, Value = t.PhysicianId.ToString() }).ToList();
                }
                model.PhysiciansList.Insert(0, new SelectListItem { Text = "", Value = "" });


                //Temporary Checks

                int patientid = 0;
                if (!String.IsNullOrEmpty(PhysicianPortalPatientId))
                {
                    try
                    {
                        //Sometimes the + symbol is not encoded and appears as a ' ' in the string, we need to replace it back to +
                        PhysicianPortalPatientId = PhysicianPortalPatientId.Replace(" ", "+");
                        patientid = int.Parse(SecurityHelper.Decrypt(PhysicianPortalPatientId));
                    }
                    catch
                    {
                        Logger.InsertLog("Exception thrown in Method EditPatient() PatientsController. PhysicianPortalPatientId recieved was not in encrypted format. Please encrypt it", "");
                        try
                        {
                            patientid = int.Parse(PhysicianPortalPatientId);
                        }
                        catch (Exception e)
                        {
                            Logger.InsertLog("Exception thrown in Method EditPatient() PatientsController. " + e.Message, e);
                            return View("Error", new ErrorModel(e, "PatientsController", "EditPatient", ErrorTitle, ErrorMessage, null));
                        }
                    }
                }

                if (PhysicianPortalPatientId != null)
                {

                    var physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == patientid);
                    model.PhysicianPortalPatientId = physicianPortalPatient.PhysicianPortalPatientId;
                    model.physicianId = physicianPortalPatient.PhysicianId;
                    model.Email = physicianPortalPatient.Email;
                    model.FirstName = physicianPortalPatient.FirstName;
                    model.LastName = physicianPortalPatient.LastName;
                    model.PhoneNumber = physicianPortalPatient.PhoneNumber;
                    model.DateOfBirth = physicianPortalPatient.DateOfBirth;
                    model.Gender = physicianPortalPatient.Gender;
                    model.Address = physicianPortalPatient.AddressLine1;
                    model.City = physicianPortalPatient.City;
                    model.State = physicianPortalPatient.StateProvince;
                    model.Zip = physicianPortalPatient.PostalCode;
                    model.PreferredLanguage = physicianPortalPatient.PreferredLanguage;
                    model.IsEligibilityValueExist = !string.IsNullOrEmpty(physicianPortalPatient.EligibilityValue);
                    model.SSN = physicianPortalPatient.SSN;
                    model.PolicyNumber = physicianPortalPatient.PolicyNumber;
                    model.GroupNumber = physicianPortalPatient.GroupNumber;
                    model.PokitDok_TradingPartnerId = physicianPortalPatient.PokitDok_TradingPartnerId;
                    model.PhysicianPortalPatientIdEncrypted = SecurityHelper.Encrypt(model.PhysicianPortalPatientId.ToString());
                }
                else
                {
                    model.DateOfBirth = null;
                }
                ViewBag.patientportalid = model.PhysicianPortalPatientId;
                return View(model);
            }
            catch (Exception e)
            {
                Logger.InsertLog("Exception thrown in Method EditPatient() PatientsController. " + e.Message, e);
                return View("Error", new ErrorModel(e, "PatientsController", "EditPatient", ErrorTitle, ErrorMessage, null));
            }
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult EditPatient(AddPatientViewModel model)
        {
            try
            {
                //Sometimes the + symbol is not encoded and appears as a ' ' in the string, we need to replace it back to +
                model.PhysicianPortalPatientIdEncrypted = model.PhysicianPortalPatientIdEncrypted.Replace(" ", "+");
                int patientid = model.PhysicianPortalPatientIdEncrypted != null ? int.Parse(SecurityHelper.Decrypt(model.PhysicianPortalPatientIdEncrypted)) : 0;

                //ViewBag.GetReferralFormCategories = GetReferralFormCategories();
                var getFullName = CurrentUser.FullName;
                bool IsEdit = false;
                PhysicianPortalPatient physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == patientid);

                if (physicianPortalPatient == null)
                {
                    physicianPortalPatient = new PhysicianPortalPatient();
                    IsEdit = false;
                }
                else
                {
                    IsEdit = true;
                }

                physicianPortalPatient.PhysicianId = model.physicianId.Value;
                physicianPortalPatient.Email = model.Email;
                physicianPortalPatient.FirstName = model.FirstName;
                physicianPortalPatient.LastName = model.LastName;
                physicianPortalPatient.PhoneNumber = model.PhoneNumber;
                physicianPortalPatient.DateOfBirth = model.DateOfBirth;
                physicianPortalPatient.Gender = model.Gender;
                physicianPortalPatient.AddressLine1 = model.Address;
                physicianPortalPatient.City = model.City;
                physicianPortalPatient.StateProvince = model.State;
                physicianPortalPatient.PostalCode = model.Zip;
                physicianPortalPatient.PreferredLanguage = model.PreferredLanguage;

                // new fields added on 21/9/17
                physicianPortalPatient.SSN = model.SSN;
                physicianPortalPatient.PolicyNumber = model.PolicyNumber;
                physicianPortalPatient.GroupNumber = model.GroupNumber;

                physicianPortalPatient.ModifiedBy = CurrentUser.UserId;
                physicianPortalPatient.ModifiedOn = DateTime.UtcNow;

                if (IsEdit)
                {
                    _unitOfWork.PhysicianPortalPatientRepository.Update(physicianPortalPatient);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("Patient Information Updated.", "Patient information updated by : " + getFullName + " with patient details ( Name = " + model.FirstName + " " + model.LastName + " , PhysicianPortalPatientId = " + patientid + "", (int)AuditOperationType.Change);
                }
                else
                {
                    physicianPortalPatient.CreatedBy = CurrentUser.UserId;
                    physicianPortalPatient.CreatedOn = DateTime.UtcNow;
                    _unitOfWork.PhysicianPortalPatientRepository.Insert(physicianPortalPatient);
                    _unitOfWork.Save();
                    AuditLogger.AuditTracker("Patient Information Added.", "Patient information added by : " + getFullName + " with patient details ( Name = " + model.FirstName + " " + model.LastName + " , PhysicianPortalPatientId = " + patientid + "", (int)AuditOperationType.Addition);
                }

                return Json(new { message = "Patient information updated successfully", success = true });

                //return View("PatientsList");
                //return RedirectToAction("EditPatient", "Patients", new { PhysicianPortalPatientId = model.PhysicianPortalPatientId });

            }
            catch (Exception ex)
            {
                Logger.InsertLog("Exception thrown in Method EditPatient(AddPatientViewModel model) PatientsController. " + ex.Message, ex);
                return Json(new { success = false, message = "Failed to add patient: " + ex.Message });
            }
        }



        public JsonResult deletePatient(string PhysicianPortalPatientId)
        {
            try
            {
                //Sometimes the + symbol is not encoded and appears as a ' ' in the string, we need to replace it back to +
                PhysicianPortalPatientId = PhysicianPortalPatientId.Replace(" ", "+");
                int patientid = PhysicianPortalPatientId != null ? int.Parse(SecurityHelper.Decrypt(PhysicianPortalPatientId)) : 0;
                PhysicianPortalPatient physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == patientid);
                if (physicianPortalPatient == null)
                {
                    return Json(new { message = "failed to find patient", success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    physicianPortalPatient.IsDeleted = true;
                    _unitOfWork.PhysicianPortalPatientRepository.Update(physicianPortalPatient);
                    _unitOfWork.Save();
                    return Json(new { message = "Record Deleted", success = true }, JsonRequestBehavior.AllowGet);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method deletePatient PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult EditOldApplicationPatients(int? phyId, int? patId)
        {
            try
            {
                ViewBag.GetReferralFormCategories = GetReferralFormCategories();
                ViewBag.PhysicianId = phyId;
                ViewBag.PatientId = patId;
                vwPatient _PatientList = _unitOfWork.PatientsRepository.GetAsQuerable(t => t.PhysicianId == phyId && t.PatientId == patId).FirstOrDefault();
                ViewBag.physicianModel = _unitOfWork.PhysiciansRepository.GetAsQuerable(t => t.PhysicianId == _PatientList.PhysicianId).FirstOrDefault();

                // For Display Messages
                var currentUser = CurrentUser;
                ViewBag.userRole = currentUser.RoleId;
                ViewBag.physicianIds = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(x => x.UserId == currentUser.UserId).Select(x => x.PhysicianId).ToList(); ;
                ViewBag.currentUserId = currentUser.UserId;
                ViewBag.WorkflowModel = _unitOfWork.WorkflowsRepository.GetAsQuerable(t => t.PatientId == patId).ToList();//.OrderByDescending(t => t.PatientPrescriptionOperationsWorkflowCounterId).ToList(); //&& t.PhysicianMasterId == phyId
                InsuranceEligibilityInfo insuranceEligibilityInfo = _unitOfWork.InsuranceEligibilityInfoRepository.GetSingle(t => t.PatientId == patId);
                ViewBag.IsEligibilityValueExist = !string.IsNullOrEmpty(insuranceEligibilityInfo?.EligibilityValue);
                ViewBag.PokitDok_TradingPartnerId = insuranceEligibilityInfo?.PokitDok_TradingPartnerId;

                if (_PatientList != null)
                {
                    var model = new OldPatientViewModel();
                    //var model = new PhysicianPortalPatientViewModel();
                    model.PatientId = _PatientList.PatientId;
                    model.PhysicianId = _PatientList.PhysicianId;
                    model.FirstName = _PatientList.FirstName;
                    model.LastName = _PatientList.LastName;
                    model.PhoneNumber = _PatientList.PhoneNumber;
                    model.DateOfBirth = _PatientList.DateOfBirth;
                    model.Gender = _PatientList.Gender;
                    model.AddressLine1 = _PatientList.AddressLine1;
                    model.City = _PatientList.City;
                    model.StateProvince = _PatientList.StateProvince;
                    model.PostalCode = _PatientList.PostalCode;
                    model.PreferredLanguage = _PatientList.PreferredLanguage;

                    //model.PhysicianPortalPatientId= _PatientList.PatientId;
                    model.PhysicianPortalPatientId = -1;


                    return View(model);

                }
                else
                {
                    return Redirect(null);
                }


            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method PatientDetails PatientsController. " + exception.Message, exception);
                return View("Error", new ErrorModel(exception, "PatientsController", "PatientDetails", ErrorTitle, ErrorMessage, null));
            }
        }


        //public ActionResult EditOldApplicationPatients(OldPatientViewModel patientModel)
        //{
        //    try
        //    {
        //         patientModel = TempData["OldPatientModel"] as OldPatientViewModel;            
        //        if (patientModel != null)
        //        {

        //            return View(patientModel);
        //        }
        //        else
        //        {
        //            return Redirect(null);
        //        }
        //    }
        //    catch (Exception exception)
        //    {
        //        Logger.InsertLog("Exception thrown in Method EditOldApplicationPatients(vwPatient patient) PatientsController. " + exception.Message, exception);
        //        return View("Error", new ErrorModel(exception, "Patients", "EditOldApplicationPatients", ErrorTitle, ErrorMessage, "~/Views/Shared/_ErrorLayout.cshtml"));
        //    }
        //}



        public ActionResult PatientsList()
        {
            return View();
        }

        public ActionResult GetPatientsList([DataSourceRequest] DataSourceRequest request)
        {
            try
            {
                List<PhysicianPortalPatientViewModel> physicianPortalPatientsList = new List<PhysicianPortalPatientViewModel>();

                if (UserManager.IsInRoleAsync(CurrentUser.Id, "SuperAdmin").Result || UserManager.IsInRoleAsync(CurrentUser.Id, "Pharmacist").Result)
                {
                    physicianPortalPatientsList = _unitOfWork.PhysicianPortalPatientRepository.GetAsQuerable(t => t.IsDeleted == false)
                    .Select(t => new PhysicianPortalPatientViewModel
                    {
                        PhysicianPortalPatientId = t.PhysicianPortalPatientId,
                        PhysicianId = t.PhysicianId,
                        Email = t.Email,
                        FirstName = t.FirstName,
                        LastName = t.LastName,
                        PhoneNumber = t.PhoneNumber,
                        DateOfBirth = t.DateOfBirth,
                        Gender = t.Gender,
                        PreferredLanguage = t.PreferredLanguage,
                        AddressLine1 = t.AddressLine1,
                        City = t.City,
                        StateProvince = t.StateProvince,
                        PostalCode = t.PostalCode
                    }).ToList();
                }
                else if (UserManager.IsInRoleAsync(CurrentUser.Id, "Admin").Result)
                {
                    //When office admin log in.
                    int currentOffice = UserManager.GetClaims(CurrentUser.Id).FirstOrDefault(c => c.Type == "UserOffice").Value.ToInt0();

                    var userIds = _unitOfWork.User_Office_RelationshipRepository.GetAsQuerable(x => x.OfficeId == currentOffice).Select(x => x.UserId).ToList();
                    var userPhysicianRelationshipsList = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(t => userIds.Contains(t.UserId)).ToList();

                    foreach (var userPhysicianRelation in userPhysicianRelationshipsList)
                    {
                        List<PhysicianPortalPatientViewModel> physicianPortalPatientsListTemp = new List<PhysicianPortalPatientViewModel>();

                        physicianPortalPatientsListTemp = _unitOfWork.PhysicianPortalPatientRepository
                                .GetAsQuerable(t => t.PhysicianId == userPhysicianRelation.PhysicianId && t.IsDeleted == false)
                                .Select(t => new PhysicianPortalPatientViewModel
                                {
                                    PhysicianPortalPatientId = t.PhysicianPortalPatientId,
                                    PhysicianId = t.PhysicianId,
                                    Email = t.Email,
                                    FirstName = t.FirstName,
                                    LastName = t.LastName,
                                    PhoneNumber = t.PhoneNumber,
                                    DateOfBirth = t.DateOfBirth,
                                    Gender = t.Gender,
                                    PreferredLanguage = t.PreferredLanguage,
                                    AddressLine1 = t.AddressLine1,
                                    City = t.City,
                                    StateProvince = t.StateProvince,
                                    PostalCode = t.PostalCode
                                }).ToList();

                        physicianPortalPatientsList.AddRange(physicianPortalPatientsListTemp);
                    }
                }
                else if (UserManager.IsInRoleAsync(CurrentUser.Id, "Physician").Result || UserManager.IsInRoleAsync(CurrentUser.Id, "Technician").Result)
                {
                    var userPhysicianRelationshipsList = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(t => t.UserId == CurrentUser.UserId).ToList();

                    foreach (var userPhysicianRelation in userPhysicianRelationshipsList)
                    {
                        List<PhysicianPortalPatientViewModel> physicianPortalPatientsListTemp = new List<PhysicianPortalPatientViewModel>();

                        physicianPortalPatientsListTemp = _unitOfWork.PhysicianPortalPatientRepository
                                .GetAsQuerable(t => t.PhysicianId == userPhysicianRelation.PhysicianId && t.IsDeleted == false)
                                .Select(t => new PhysicianPortalPatientViewModel
                                {
                                    PhysicianPortalPatientId = t.PhysicianPortalPatientId,
                                    PhysicianId = t.PhysicianId,
                                    Email = t.Email,
                                    FirstName = t.FirstName,
                                    LastName = t.LastName,
                                    PhoneNumber = t.PhoneNumber,
                                    DateOfBirth = t.DateOfBirth,
                                    Gender = t.Gender,
                                    PreferredLanguage = t.PreferredLanguage,
                                    AddressLine1 = t.AddressLine1,
                                    City = t.City,
                                    StateProvince = t.StateProvince,
                                    PostalCode = t.PostalCode
                                }).ToList();

                        physicianPortalPatientsList.AddRange(physicianPortalPatientsListTemp);
                    }
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }

                var filteredList = physicianPortalPatientsList.ToDataSourceResult(request);

                foreach (PhysicianPortalPatientViewModel patient in filteredList.Data)
                {
                    patient.PhysicianPortalPatientIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianPortalPatientId.ToString());
                    patient.PhysicianIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianId.ToString());
                }

                return Json(filteredList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientsList PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }


        public ActionResult GetPatientsProcessed([DataSourceRequest] DataSourceRequest request)
        {
            try
            {
                List<PhysicianPortalPatientViewModel> physicianPortalPatientsList = new List<PhysicianPortalPatientViewModel>();

                if (UserManager.IsInRoleAsync(CurrentUser.Id, "SuperAdmin").Result || UserManager.IsInRoleAsync(CurrentUser.Id, "Pharmacist").Result)
                {
                    physicianPortalPatientsList = _unitOfWork.PhysicianPortalPatientRepository.GetAsQuerable(t => t.IsDeleted == false && t.IsProcessed == true)
                    .Select(t => new PhysicianPortalPatientViewModel
                    {
                        PhysicianPortalPatientId = t.PhysicianPortalPatientId,
                        PhysicianId = t.PhysicianId,
                        Email = t.Email,
                        FirstName = t.FirstName,
                        LastName = t.LastName,
                        PhoneNumber = t.PhoneNumber,
                        DateOfBirth = t.DateOfBirth,
                        Gender = t.Gender,
                        PreferredLanguage = t.PreferredLanguage,
                        AddressLine1 = t.AddressLine1,
                        City = t.City,
                        StateProvince = t.StateProvince,
                        PostalCode = t.PostalCode
                    }).ToList();
                }
                else if (UserManager.IsInRoleAsync(CurrentUser.Id, "Admin").Result)
                {
                    //When office admin log in.
                    int currentOffice = UserManager.GetClaims(CurrentUser.Id).FirstOrDefault(c => c.Type == "UserOffice").Value.ToInt0();

                    var userIds = _unitOfWork.User_Office_RelationshipRepository.GetAsQuerable(x => x.OfficeId == currentOffice).Select(x => x.UserId).ToList();
                    var userPhysicianRelationshipsList = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(t => userIds.Contains(t.UserId)).ToList();

                    foreach (var userPhysicianRelation in userPhysicianRelationshipsList)
                    {
                        List<PhysicianPortalPatientViewModel> physicianPortalPatientsListTemp = new List<PhysicianPortalPatientViewModel>();

                        physicianPortalPatientsListTemp = _unitOfWork.PhysicianPortalPatientRepository
                                .GetAsQuerable(t => t.PhysicianId == userPhysicianRelation.PhysicianId && t.IsDeleted == false && t.IsProcessed == true)
                                .Select(t => new PhysicianPortalPatientViewModel
                                {
                                    PhysicianPortalPatientId = t.PhysicianPortalPatientId,
                                    PhysicianId = t.PhysicianId,
                                    Email = t.Email,
                                    FirstName = t.FirstName,
                                    LastName = t.LastName,
                                    PhoneNumber = t.PhoneNumber,
                                    DateOfBirth = t.DateOfBirth,
                                    Gender = t.Gender,
                                    PreferredLanguage = t.PreferredLanguage,
                                    AddressLine1 = t.AddressLine1,
                                    City = t.City,
                                    StateProvince = t.StateProvince,
                                    PostalCode = t.PostalCode
                                }).ToList();

                        physicianPortalPatientsList.AddRange(physicianPortalPatientsListTemp);
                    }
                }
                else if (UserManager.IsInRoleAsync(CurrentUser.Id, "Physician").Result || UserManager.IsInRoleAsync(CurrentUser.Id, "Technician").Result)
                {
                    var userPhysicianRelationshipsList = _unitOfWork.UserPhysicianRelationshippRepository.GetAsQuerable(t => t.UserId == CurrentUser.UserId).ToList();

                    foreach (var userPhysicianRelation in userPhysicianRelationshipsList)
                    {
                        List<PhysicianPortalPatientViewModel> physicianPortalPatientsListTemp = new List<PhysicianPortalPatientViewModel>();

                        physicianPortalPatientsListTemp = _unitOfWork.PhysicianPortalPatientRepository
                                .GetAsQuerable(t => t.PhysicianId == userPhysicianRelation.PhysicianId && t.IsDeleted == false && t.IsProcessed == true)
                                .Select(t => new PhysicianPortalPatientViewModel
                                {
                                    PhysicianPortalPatientId = t.PhysicianPortalPatientId,
                                    PhysicianId = t.PhysicianId,
                                    Email = t.Email,
                                    FirstName = t.FirstName,
                                    LastName = t.LastName,
                                    PhoneNumber = t.PhoneNumber,
                                    DateOfBirth = t.DateOfBirth,
                                    Gender = t.Gender,
                                    PreferredLanguage = t.PreferredLanguage,
                                    AddressLine1 = t.AddressLine1,
                                    City = t.City,
                                    StateProvince = t.StateProvince,
                                    PostalCode = t.PostalCode
                                }).ToList();

                        physicianPortalPatientsList.AddRange(physicianPortalPatientsListTemp);
                    }
                }
                else
                {
                    return Json(null, JsonRequestBehavior.AllowGet);
                }

                var filteredList = physicianPortalPatientsList.ToDataSourceResult(request);

                foreach (PhysicianPortalPatientViewModel patient in filteredList.Data)
                {
                    patient.PhysicianPortalPatientIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianPortalPatientId.ToString());
                    patient.PhysicianIdEncrypted = SecurityHelper.Encrypt(patient.PhysicianId.ToString());
                }

                return Json(filteredList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPatientsProcessed PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        [HttpGet]
        public ActionResult CheckPatientEligibility(int patientid, string PokitDok_TradingPartnerId, bool IsPhysicianPortalPatient = false)
        {
            try
            {
                //int patientid = PatientId != null ? int.Parse(SecurityHelper.Decrypt(PatientId)) : 0;
                if (IsPhysicianPortalPatient)
                {

                    PhysicianPortalPatient physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == patientid);
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == physicianPortalPatient.PhysicianId);
                    PokitDokModel pokitDokModel = null;

                    if (physicianPortalPatient != null && physician != null)
                    {
                        if (string.IsNullOrEmpty(physicianPortalPatient.EligibilityValue) || !physicianPortalPatient.PokitDok_TradingPartnerId.Equals(PokitDok_TradingPartnerId))
                        {
                            EligibilityRecord eligibilityRecord = new EligibilityRecord();

                            string birthDate = physicianPortalPatient.DateOfBirth.Value.ToString("yyyy-MM-dd");
                            string memFirstName = physicianPortalPatient.FirstName;
                            string memLastName = physicianPortalPatient.LastName;

                            string npi = physician.NationalProviderIdentifier;
                            string prodLastName = physician.LastName;
                            string prodFirstName = physician.FirstName;

                            string tradingPartnerId = PokitDok_TradingPartnerId;

                            pokitDokModel = eligibilityRecord.RetrieveData(birthDate, memFirstName, memLastName, npi, prodFirstName, prodLastName, tradingPartnerId);
                            physicianPortalPatient.EligibilityValue = pokitDokModel.ToXml();
                            physicianPortalPatient.PokitDok_TradingPartnerId = PokitDok_TradingPartnerId;

                            _unitOfWork.PhysicianPortalPatientRepository.Update(physicianPortalPatient);
                            _unitOfWork.Save();
                        }
                        else
                        {
                            string str = physicianPortalPatient.EligibilityValue;
                            pokitDokModel = str.FromXml<PokitDokModel>();
                        }
                    }
                    return View(pokitDokModel);
                }
                else
                {
                    var patient = _unitOfWork.PatientsRepository.GetSingle(t => t.PatientId == patientid);
                    vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                    PokitDokModel pokitDokModel = null;

                    if (patient != null && physician != null)
                    {
                        bool IsEdit = true;
                        var insuranceEligibilityInfo = _unitOfWork.InsuranceEligibilityInfoRepository.GetSingle(t => t.PatientId == patientid);

                        if (insuranceEligibilityInfo == null)
                        {
                            insuranceEligibilityInfo = new InsuranceEligibilityInfo();
                            IsEdit = false;
                        }

                        if (string.IsNullOrEmpty(insuranceEligibilityInfo.EligibilityValue) || (!insuranceEligibilityInfo.PokitDok_TradingPartnerId?.Equals(PokitDok_TradingPartnerId) ?? true))
                        {
                            EligibilityRecord eligibilityRecord = new EligibilityRecord();

                            string birthDate = patient.DateOfBirth.Value.ToString("yyyy-MM-dd");
                            string memFirstName = patient.FirstName;
                            string memLastName = patient.LastName;

                            string npi = physician.NationalProviderIdentifier;
                            string prodLastName = physician.LastName;
                            string prodFirstName = physician.FirstName;

                            string tradingPartnerId = PokitDok_TradingPartnerId;

                            pokitDokModel = eligibilityRecord.RetrieveData(birthDate, memFirstName, memLastName, npi, prodFirstName, prodLastName, tradingPartnerId);

                            insuranceEligibilityInfo.EligibilityValue = pokitDokModel.ToXml();
                            insuranceEligibilityInfo.PokitDok_TradingPartnerId = PokitDok_TradingPartnerId;
                            insuranceEligibilityInfo.PatientId = patient.PatientId;
                            insuranceEligibilityInfo.ModifiedBy = CurrentUser.UserId;
                            insuranceEligibilityInfo.ModifiedOn = DateTime.UtcNow;

                            if (IsEdit)
                            {
                                _unitOfWork.InsuranceEligibilityInfoRepository.Update(insuranceEligibilityInfo);
                            }
                            else
                            {
                                insuranceEligibilityInfo.CreatedBy = CurrentUser.UserId;
                                insuranceEligibilityInfo.CreatedOn = DateTime.UtcNow;
                                _unitOfWork.InsuranceEligibilityInfoRepository.Insert(insuranceEligibilityInfo);
                            }
                            _unitOfWork.Save();
                        }
                        else
                        {
                            string str = insuranceEligibilityInfo.EligibilityValue;
                            pokitDokModel = str.FromXml<PokitDokModel>();
                        }
                    }
                    return View(pokitDokModel);
                }
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method CheckPatientEligibility PatientsController. " + exception.Message, exception);
                return View("Error", new ErrorModel(exception, "PatientsController", "CheckPatientEligibility", ErrorTitle, ErrorMessage, null));
            }
        }



        public JsonResult CheckPatientDeleteStatus(string PhysicianPortalPatientId)
        {
            try
            {
                //Sometimes the + symbol is not encoded and appears as a ' ' in the string, we need to replace it back to +
                PhysicianPortalPatientId = PhysicianPortalPatientId.Replace(" ", "+");
                int patientid = PhysicianPortalPatientId != null ? int.Parse(SecurityHelper.Decrypt(PhysicianPortalPatientId)) : 0;
                PhysicianPortalPatient physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == patientid);
                PhysicianPortalPatientChecklistRelationship physicianPortalPatientChecklistRelationship = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.GetSingle(t => t.PhysicianPortalPatientId == patientid && t.IsSubmited == true);

                if (physicianPortalPatientChecklistRelationship == null)
                {
                    return Json(new { message = "no record found", success = false }, JsonRequestBehavior.AllowGet);
                }
                else
                {
                    return Json(new { message = "Submited", success = true }, JsonRequestBehavior.AllowGet);
                }


            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method CheckPatientDeleteStatus PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public JsonResult GetPokitDok_TradingPartnerList()
        {
            try
            {
                var pokitDok_TradingPartnerList = _unitOfWork.PokitDok_TradingPartnerRepository.GetAsQuerable().Select(t => new SelectListItem { Text = t.Name, Value = t.PokitDok_TradingPartnerId }).ToList();
                return Json(pokitDok_TradingPartnerList, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetPokitDok_TradingPartnerList PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult GetChecklists([DataSourceRequest] DataSourceRequest request, string PhysicianPortalPatientId, string ReferralFormName, int? ReferralFormId = null)
        {
            try
            {
                //Sometimes the + symbol is not encoded and appears as a ' ' in the string, we need to replace it back to +
                PhysicianPortalPatientId = PhysicianPortalPatientId.Replace(" ", "+");
                int patientid = PhysicianPortalPatientId != null ? int.Parse(SecurityHelper.Decrypt(PhysicianPortalPatientId)) : 0;

                if (ReferralFormId == null)
                {
                    //ReferralFormValue
                    var referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals(ReferralFormName));
                    if (referralForm != null)
                    {
                        ReferralFormId = referralForm.ReferralFormId;
                    }
                }

                var _vwPatientChecklistRepository = _unitOfWork.spPatientChecklist_ResultRepository.context.spPatientChecklist(patientid, ReferralFormId).ToList();

                return Json(_vwPatientChecklistRepository.ToDataSourceResult(request), JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetChecklists PatientsController. " + exception.Message, exception);
                return Json(null, JsonRequestBehavior.AllowGet);
            }
        }

        public ActionResult SaveAndPersist(IEnumerable<HttpPostedFileBase> files, int ReferralFormChecklistRelationshipId, int PhysicianPortalPatientId)
        {
            try
            {
                // The Name of the Upload component is "files"
                if (files != null)
                {
                    foreach (var file in files)
                    {
                        // Some browsers send file names with full path.
                        // We are only interested in the file name.
                        //var fileName1 = Path.GetFileNameWithoutExtension.GetFileName(file.FileName);
                        var fileName = Path.GetFileNameWithoutExtension(file.FileName);
                        var fileExtension = Path.GetExtension(file.FileName);

                        //var physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);

                        //if (physicianPortalPatient != null)
                        //{
                        //    fileName = fileName + "_P_" + physicianPortalPatient.PhysicianPortalPatientId + "_" + DateTime.Now.Ticks.ToString() + fileExtension;
                        //}
                        //fileName = fileName + "_P_" + PhysicianPortalPatientId + "_" + DateTime.Now.Ticks.ToString() + fileExtension;


                        //var getPatientMRN = _unitOfWork.PatientsRepository.GetSingle(t => t.PatientId == PatientId)?.PatientCode ?? "No_MRN";

                        //PhysicianPortal_NewPatient_Derm01_20171309_174430.pdf
                        //PhysicianPortal_NewDrug_MRN123456_Derm01_20171309_174430.pdf
                        string fName = fileName.Length > 15 ? fileName.Substring(0, 15) : fileName;
                        fName = fName.Replace(" ", String.Empty);


                        fileName = "PhPt_NewPat_" + fName + "_" + DateTime.Now.ToString("yyMMdd_HHmmss") + fileExtension; // milliseconds ffffff


                        var physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);
                        if (physicianPortalPatient != null && physicianPortalPatient.PatientId != null)
                        {
                            var patient = _unitOfWork.PatientsRepository.GetSingle(t => t.PatientId == physicianPortalPatient.PatientId);
                            fileName = "PhPt_NewDrug_MRN_" + (patient?.PatientCode ?? "") + "_" + fName + "_" + DateTime.Now.ToString("yyMMdd_HHmmss") + fileExtension; // milliseconds ffffff
                            fileName = GetDocumentSaveFormat(patient?.PatientCode ?? "", (int)DocumentAddedType.ReferralFormNewDrug) + fileExtension;

                        }
                        else // new patient
                            fileName = GetDocumentSaveFormat("", (int)DocumentAddedType.ReferralFormNewDrug) + fileExtension;

                        var getPatientFullName = physicianPortalPatient.FirstName + " " + physicianPortalPatient.LastName;
                        var checklistDocumentPtah = SettingManager.GetSettingByName("ChecklistDocumentPath");
                        //var physicalPath = Path.Combine(Server.MapPath(checklistDocumentPtah?.Value), fileName);
                        var physicalPath = Path.Combine(checklistDocumentPtah?.Value, fileName);

                        // The files are not actually saved in this demo
                        file.SaveAs(physicalPath);

                        var physicianPortalPatientChecklistRelationship = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository
                            .GetSingle(t => t.ReferralFormChecklistRelationshipId == ReferralFormChecklistRelationshipId && t.PhysicianPortalPatientId == PhysicianPortalPatientId && !(t.IsDeleted ?? false));
                        bool IsEdit = true;

                        if (physicianPortalPatientChecklistRelationship == null)
                        {
                            physicianPortalPatientChecklistRelationship = new PhysicianPortalPatientChecklistRelationship();
                            IsEdit = false;
                        }
                        physicianPortalPatientChecklistRelationship.PhysicianPortalPatientId = PhysicianPortalPatientId;
                        physicianPortalPatientChecklistRelationship.ReferralFormChecklistRelationshipId = ReferralFormChecklistRelationshipId;
                        physicianPortalPatientChecklistRelationship.FilePath = physicalPath;
                        physicianPortalPatientChecklistRelationship.FileName = fileName;
                        physicianPortalPatientChecklistRelationship.FileContentLength = file.ContentLength;
                        physicianPortalPatientChecklistRelationship.FileExtension = fileExtension;
                        physicianPortalPatientChecklistRelationship.UploadedOn = DateTime.UtcNow;
                        physicianPortalPatientChecklistRelationship.UploadedBy = CurrentUser.UserId;
                        physicianPortalPatientChecklistRelationship.ModifiedOn = DateTime.UtcNow;
                        physicianPortalPatientChecklistRelationship.ModifiedBy = CurrentUser.UserId;
                        physicianPortalPatientChecklistRelationship.IsDeleted = false;


                        //PatientDocument dimDocument = new PatientDocument();
                        //dimDocument.FolderFileName = physicalPath;
                        //dimDocument.FolderFileNameUNC = physicalPath;
                        //dimDocument.PatientId = PatientId;
                        //dimDocument.PhysicianId = PhysicianId;
                        //dimDocument.DocumentDescription = DocumentDescription;
                        //dimDocument.CreatedOn = DateTime.Now;

                        //_unitOfWork.DocumentsRepository.Insert(dimDocument);
                        //_unitOfWork.Save();



                        if (IsEdit)
                        {
                            _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Update(physicianPortalPatientChecklistRelationship);
                        }
                        else
                        {
                            physicianPortalPatientChecklistRelationship.CreatedOn = DateTime.UtcNow;
                            physicianPortalPatientChecklistRelationship.CreatedBy = CurrentUser.UserId;
                            _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Insert(physicianPortalPatientChecklistRelationship);
                        }
                        _unitOfWork.Save();

                        if (fileName.Contains("_mrn"))
                        {
                            AuditLogger.AuditTracker("New Referral Form Document Uploaded.", "A new referral form document name " + fileName + " has been uploaded for patient " + getPatientFullName, (int)AuditOperationType.Addition);
                        }
                        else
                            AuditLogger.AuditTracker("New Referral Form Document Uploaded.", "A new referral form document name " + fileName + " has been uploaded for new patient " + getPatientFullName, (int)AuditOperationType.Addition);
                        //AuditLogger.AuditTracker("New Document Uploaded.", "A new document  " + physicalPath + " has been uploaded.", (int)AuditOperationType.Addition);
                    }
                }

                // Return an empty string to signify success
                return Content("");
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method SaveAndPersist() PatientsController. " + exception.Message, exception);
                return Content("");
            }
        }

        public ActionResult RemoveAndPersist(string[] fileNames, int ReferralFormChecklistRelationshipId, int PhysicianPortalPatientId)
        {
            // The parameter of the Remove action must be called "fileNames"
            if (fileNames != null)
            {
                foreach (var fullName in fileNames)
                {
                    var fileName = Path.GetFileName(fullName);
                    //var physicalPath = Path.Combine(Server.MapPath("~/App_Data"), fileName);
                    //var physicalPath = Path.Combine(System.Web.Configuration.WebConfigurationManager.AppSettings["PatientDocumentsPath"].ToString(), fileName);
                    var checklistDocumentPtah = SettingManager.GetSettingByName("ChecklistDocumentPath");
                    var physicalPath = Path.Combine(checklistDocumentPtah?.Value, fileName);

                    if (System.IO.File.Exists(physicalPath))
                    {
                        // The files are not actually removed in this demo
                        //TODO here we only soft delete te files.
                        //System.IO.File.Delete(physicalPath);
                    }

                    PhysicianPortalPatientChecklistRelationship physicianPortalPatientChecklistRelationship =
                        _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository
                            .GetSingle(
                                    t =>
                                        t.ReferralFormChecklistRelationshipId == ReferralFormChecklistRelationshipId
                                        && t.PhysicianPortalPatientId == PhysicianPortalPatientId
                                        && !(t.IsDeleted ?? false)
                                );
                    if (physicianPortalPatientChecklistRelationship != null)
                    {
                        physicianPortalPatientChecklistRelationship.IsDeleted = true;
                        physicianPortalPatientChecklistRelationship.DeletedOn = DateTime.UtcNow;
                        physicianPortalPatientChecklistRelationship.DeletedBy = CurrentUser.UserId;
                        physicianPortalPatientChecklistRelationship.UploadedOn = null;
                        physicianPortalPatientChecklistRelationship.UploadedBy = null;
                        physicianPortalPatientChecklistRelationship.ModifiedOn = DateTime.UtcNow;
                        physicianPortalPatientChecklistRelationship.ModifiedBy = CurrentUser.UserId;
                        _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Update(physicianPortalPatientChecklistRelationship);
                        _unitOfWork.Save();
                    }
                }
            }

            // Return an empty string to signify success
            return Content("");
        }

        public JsonResult GetUploadChecklistDoc(int ReferralFormChecklistRelationshipId = 0, int PhysicianPortalPatientId = 0)
        {
            try
            {
                UploadFile uploadFile = new UploadFile { Name = "", Extension = "", Size = 0 };
                var physicianPortalPatientChecklistRelationship = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository
                        .GetSingle(t => t.ReferralFormChecklistRelationshipId == ReferralFormChecklistRelationshipId && t.PhysicianPortalPatientId == PhysicianPortalPatientId && !(t.IsDeleted ?? false));
                if (physicianPortalPatientChecklistRelationship != null)
                {
                    uploadFile.Name = string.IsNullOrEmpty(physicianPortalPatientChecklistRelationship.FileName) ? "" : physicianPortalPatientChecklistRelationship.FileName;
                    uploadFile.Extension = string.IsNullOrEmpty(physicianPortalPatientChecklistRelationship.FileExtension) ? "" : physicianPortalPatientChecklistRelationship.FileExtension;
                    uploadFile.Size = Convert.ToInt64(physicianPortalPatientChecklistRelationship.FileContentLength ?? 0);
                }
                return Json(new { message = uploadFile, success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method GetUploadChecklistDoc PatientsController. " + exception.Message, exception);
                return Json(new { message = "Failed to get uploaded Checklist Document", success = false });
            }
        }

        #region PrintPdf 
        private AcroFields form;

        private void ClosePdfReaderAndStamper(ref PdfReader pdfReader, ref PdfStamper pdfStamper)
        {
            try
            {
                pdfStamper.Close();
                pdfReader.Close();
            }
            catch (Exception ex)
            {
                Logger.InsertLog("Error in ClosePdfReaderAndStamper function in PDFForms Controller. <br />" + ex.Message, ex);
            }
        }

        private void FillPdfTextField(string pdfFormFieldName, string strText, ref AcroFields form)
        {
            // iTextSharp
            if (pdfFormFieldName != null)
            {
                form.SetField(pdfFormFieldName, !string.IsNullOrEmpty(strText) ? strText : " ");
            }
        }

        private void FillPdfCheckBox(string pdfFormFieldName, bool? value, ref AcroFields form)
        {
            // iTextSharp
            if (pdfFormFieldName != null && value != null && value == true)
            {
                form.SetField(pdfFormFieldName, "Yes");
            }
        }

        private string DoFormatDate(DateTime? date)
        {
            if (date != null)
            {
                return date.Value.ToShortDateString();
            }
            else
                return "";
        }

        private void SignatureFun(string fieldName, PdfStamper pdfStamper, byte[] imgByteArry)
        {
            if (imgByteArry != null)
            {
                AcroFields.FieldPosition fieldPosition = pdfStamper.AcroFields.GetFieldPositions(fieldName)[0];
                PushbuttonField imageField = new PushbuttonField(pdfStamper.Writer, fieldPosition.position, fieldName);

                imageField.Layout = PushbuttonField.LAYOUT_ICON_ONLY;
                imageField.Image = iTextSharp.text.Image.GetInstance(imgByteArry);
                imageField.ScaleIcon = PushbuttonField.SCALE_ICON_ALWAYS;
                imageField.ProportionalIcon = false;
                imageField.Options = BaseField.READ_ONLY;

                pdfStamper.AcroFields.RemoveField(fieldName);
                pdfStamper.AddAnnotation(imageField.Field, fieldPosition.page);
            }
        }
        #endregion


        //public ActionResult GetPatientDocumentsPDF(string fileName)
        //{
        //    try
        //    {
        //        if (fileName.Length > 0 && System.IO.File.Exists(Server.MapPath(fileName)))
        //        {
        //            byte[] contents = System.IO.File.ReadAllBytes(Server.MapPath(fileName));
        //            Response.AddHeader("Content-Disposition", "inline; filename=test.pdf");
        //            return File(contents, "application/pdf");
        //        }
        //        //if (fileName.Length > 0 && System.IO.File.Exists(fileName))
        //        //{
        //        //    byte[] contents = System.IO.File.ReadAllBytes(fileName);
        //        //    Response.AddHeader("Content-Disposition", "inline; filename=test.pdf");
        //        //    return File(contents, "application/pdf");
        //        //}
        //        else
        //        {
        //            return Json(new { message = "Not Found", success = false });
        //        }
        //    }
        //    catch (Exception ex)
        //    {
        //        //LogInfo(ex.Message, ex);
        //        return Json(new { message = "Error in GetPatientDocumentsPDF.", success = false });
        //    }
        //}


        #region FillPdf
        private string FillPDFForm(PDFFormModel pDFFormModel, ref FileStream outFile, ref PdfReader pdfReader, ref PdfStamper pdfStamper, ref AcroFields form)
        {
            try
            {
                if (pDFFormModel.FileName.Length > 0 && System.IO.File.Exists(SettingManager.GetSettingByName("PhysicianPortalDocumentsBaseFolder").Value + pDFFormModel.FileName + ".pdf"))
                {
                    string file = SettingManager.GetSettingByName("PhysicianPortalDocumentsBaseFolder").Value + pDFFormModel.FileName + ".pdf";
                    string fileName = pDFFormModel.FileName + DateTime.Now.Ticks.ToString() + ".pdf";

                    //iTextSharp
                    outFile = new FileStream(SettingManager.GetSettingByName("FilledPDFDocumentsPath").Value + fileName, FileMode.Create);
                    pdfReader = new PdfReader(file);
                    pdfStamper = new PdfStamper(pdfReader, outFile);
                    form = pdfStamper.AcroFields;

                    return fileName;
                }
                else
                {
                    return "PDF Form Not Found.";
                }
            }
            catch (Exception ex)
            {
                Logger.InsertLog("Error in FillPDFForm function in PDFForms Controller. <br />" + ex.Message, ex);
                return "Error in FillPDFForm.";
            }
        }


        private string GetPDFFileName(PDFFormModel pDFFormModel)
        {
            try
            {
                if (pDFFormModel.FileName.Length > 0 /*&& System.IO.File.Exists(Server.MapPath("~/Document/" + pDFFormModel.FileName + ".pdf"))*/)
                {
                    //string file = Server.MapPath("~/Document/" + pDFFormModel.FileName + ".pdf");
                    //string fileName = pDFFormModel.FileName + DateTime.Now.Ticks.ToString() + ".pdf";
                    string fileName = pDFFormModel.FileName + ".pdf";

                    //iTextSharp
                    //outFile = new FileStream(Server.MapPath("~/Document/FilledPDF/" + fileName), FileMode.Create);
                    //pdfReader = new PdfReader(file);
                    //pdfStamper = new PdfStamper(pdfReader, outFile);
                    //form = pdfStamper.AcroFields;

                    return fileName;
                }
                else
                {
                    return "PDF Form Not Found.";
                }
            }
            catch (Exception ex)
            {
                Logger.InsertLog("Error in GetPDFFilePath function in PDFForms Controller. <br />" + ex.Message, ex);
                return "Error in GetPDFFilePath.";
            }
        }

        public JsonResult FillPdfDermatology(int referralFormId, int RefFormDermatologyId, int physicianPortalPatientId)
        {
            try
            {
                PhysicianPortalPatient patient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == physicianPortalPatientId);
                vwPhysician physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == patient.PhysicianId);
                var physicianPortalPatient_ReferralForm_Relationship = _unitOfWork.PhysicianPortalPatient_ReferralForm_RelationshipsRepository.GetSingle(t => t.PhysicianPortalPatientId == physicianPortalPatientId && t.ReferralFormId == referralFormId);
                RefFormDermatology refFormDermatology = null;
                if (physicianPortalPatient_ReferralForm_Relationship != null)
                {
                    refFormDermatology = _unitOfWork.RefFormDermatology.GetSingle(t => t.RefFormDermatologyId == physicianPortalPatient_ReferralForm_Relationship.FormId);
                }
                //if (pDFForm_RFTHIViewModel != null)
                //{

                FileStream outFile = null;
                PdfReader pdfReader = null;
                PdfStamper pdfStamper = null;
                AcroFields form = null;
                //Dermatology.pdf:
                string filePath = "";
                if (referralFormId == 4)
                {
                    filePath = FillPDFForm(new PDFFormModel { FileName = "dermatology-referral-form", PatientApplicantID = 0 }, ref outFile, ref pdfReader, ref pdfStamper, ref form);
                }
                if (referralFormId == 26)
                {
                    filePath = FillPDFForm(new PDFFormModel { FileName = "nola_Dermatology_ReferralForm", PatientApplicantID = 0 }, ref outFile, ref pdfReader, ref pdfStamper, ref form);
                }
                if (referralFormId == 27)
                {
                    filePath = FillPDFForm(new PDFFormModel { FileName = "ofl_Dermatology_ReferralForm", PatientApplicantID = 0 }, ref outFile, ref pdfReader, ref pdfStamper, ref form);
                }
                //FillPdfTextField("DATE", pDFForm_RFTHIViewModel.CaseNumber, ref form);
                FillPdfTextField("Patient Name", patient.FirstName + " " + patient.LastName, ref form);
                FillPdfTextField("Address", patient.AddressLine1, ref form);
                FillPdfTextField("Main Phone", patient.PhoneNumber, ref form);
                FillPdfTextField("Date of Birth", DoFormatDate(patient.DateOfBirth), ref form);
                //FillPdfCheckBox("male check", patient.Gender, ref form);
                FillPdfTextField("City State Zip", patient.City + " " + patient.StateProvince + " " + patient.PostalCode, ref form);


                FillPdfTextField("Prescriber Name", physician.FirstName + " " + physician.LastName, ref form);
                FillPdfTextField("NPI", physician.NationalProviderIdentifier, ref form);
                FillPdfTextField("DEA", physician.DrugEnforcementAdministrationNumber, ref form);
                FillPdfTextField("License", physician.PhysicianLicenseNumber, ref form);
                FillPdfTextField("Prescriber Address", physician.AddressLine1, ref form);
                FillPdfTextField("Prescriber City State Zip", physician.City + " " + physician.StateProvince + " " + physician.PostalCode, ref form);
                FillPdfTextField("Prescriber Phone", physician.PhoneNumber, ref form);
                FillPdfTextField("Prescriber Fax", physician.FaxNumber, ref form);


                FillPdfCheckBox("diagnosis_1 check", refFormDermatology.ChkBox_L40_8_Moderate_to_Severe_Plaque_Psoriasis, ref form);
                FillPdfCheckBox("diagnosis_2 check", refFormDermatology.ChkBox_L40_50_Psoriatic_Arthritis, ref form);
                FillPdfCheckBox("diagnosis_3 check", refFormDermatology.ChkBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage, ref form);
                FillPdfTextField("hurley_stage", refFormDermatology.TxtBox_L73_2_Hidradenitis_Suppurativa_Hurley_Stage, ref form);






                FillPdfCheckBox("diagnosis_1124 check", refFormDermatology.ChkBox_Other_Dx_code, ref form);
                FillPdfTextField("dx code", refFormDermatology.TxtBox_Other_Dx_code, ref form);
                FillPdfTextField("condition", refFormDermatology.TxtBox_Condition, ref form);
                FillPdfTextField("location_other_field", refFormDermatology.TxtBox_Drug_Allergies, ref form);
                FillPdfTextField("bsa%", refFormDermatology.TxtBox_Location_BSA, ref form);
                FillPdfCheckBox("loc_check1", refFormDermatology.ChkBox_Hands, ref form);
                FillPdfCheckBox("loc_check2", refFormDermatology.ChkBox_Feet, ref form);
                FillPdfCheckBox("loc_check3", refFormDermatology.ChkBox_Scalp, ref form);
                FillPdfCheckBox("loc_check4", refFormDermatology.ChkBox_Groin, ref form);
                FillPdfCheckBox("loc_check5", refFormDermatology.ChkBox_Nails, ref form);
                FillPdfCheckBox("loc_check_other", refFormDermatology.ChkBox_Other, ref form);
                FillPdfTextField("random_2", refFormDermatology.TxtBox_Other, ref form);
                FillPdfCheckBox("prior_fail_check1", refFormDermatology.ChkBox_Biologics, ref form);
                FillPdfCheckBox("prior_fail_check3", refFormDermatology.ChkBox_Cimzia, ref form);
                FillPdfCheckBox("prior_fail_check4", refFormDermatology.ChkBox_Cosentyx, ref form);
                FillPdfCheckBox("prior_fail_check5", refFormDermatology.ChkBox_Enbrel, ref form);
                FillPdfCheckBox("prior_fail_check6", refFormDermatology.ChkBox_Humira, ref form);
                FillPdfCheckBox("prior_fail_check7", refFormDermatology.ChkBox_Orencia, ref form);
                FillPdfCheckBox("prior_fail_check8", refFormDermatology.ChkBox_Remicade, ref form);
                FillPdfCheckBox("prior_fail_check2", refFormDermatology.ChkBox_Rituxan, ref form);
                FillPdfCheckBox("prior_fail_check9", refFormDermatology.ChkBox_Simponi, ref form);
                FillPdfCheckBox("prior_fail_check9555", refFormDermatology.ChkBox_Stelara, ref form);
                FillPdfCheckBox("prior_fail_check10", refFormDermatology.ChkBox_MTX, ref form);
                FillPdfCheckBox("prior_fail_check11", refFormDermatology.ChkBox_Soriatane, ref form);
                FillPdfCheckBox("prior_fail_check12", refFormDermatology.ChkBox_CYA, ref form);
                FillPdfTextField("length_treat_1", refFormDermatology.TxtBox_CYA_Length_of_Treatment, ref form);
                FillPdfTextField("random_3", refFormDermatology.TxtBox_CYA_Reason_for_Discontinuing, ref form);
                FillPdfCheckBox("prior_fail_check13", refFormDermatology.ChkBox_PUVA_UVB, ref form);
                FillPdfTextField("length_treat_2", refFormDermatology.TxtBox_PUVA_UVB_Length_of_Treatment, ref form);
                FillPdfTextField("random_4", refFormDermatology.TxtBox_PUVA_UVB_Reason_for_Discontinuing, ref form);
                FillPdfCheckBox("prior_fail_check14", refFormDermatology.ChkBox_Topicals, ref form);
                FillPdfTextField("length_treat_3", refFormDermatology.TxtBox_Topicals_Length_of_Treatment, ref form);
                FillPdfTextField("2_0o", refFormDermatology.TxtBox_Topicals_Inadequate_Response_List_Specific_Names, ref form);
                FillPdfCheckBox("prior_fail_check15", refFormDermatology.ChkBox_Contraindicated, ref form);
                FillPdfTextField("random_1", refFormDermatology.TxtBox_Contraindicated_Medication, ref form);
                FillPdfTextField("random_5", refFormDermatology.TxtBox_Contraindicated_Reason, ref form);
                if (refFormDermatology.ChkBox_Does_patient_have_a_latex_allergy == true)
                {
                    FillPdfCheckBox("latex_yes", refFormDermatology.ChkBox_Does_patient_have_a_latex_allergy, ref form);
                }
                else
                {
                    FillPdfCheckBox("latex_no", false, ref form);
                }

                if (refFormDermatology.ChkBox_TB_PPD_Test_given_or_intended_to_be_given_before_start == true)
                {
                    FillPdfCheckBox("ppd_yes", refFormDermatology.ChkBox_TB_PPD_Test_given_or_intended_to_be_given_before_start, ref form);
                }
                else
                {
                    FillPdfCheckBox("ppd_no", false, ref form);
                }
                //FillPdfCheckBox(" ", refFormDermatology.ChkBox_TB_PPD_Test_given_or_intended_to_be_given_before_start, ref form);
                FillPdfCheckBox("enbrel_check", refFormDermatology.ChkBox_Cosentyx_1, ref form);
                FillPdfCheckBox("sureclick_check1", refFormDermatology.ChkBox_Cosentyx_1_300mg_2x150_Pen, ref form);
                FillPdfCheckBox("today_4", refFormDermatology.ChkBox_Cosentyx_1_PFS, ref form);
                FillPdfCheckBox("enbrel3", refFormDermatology.ChkBox_Cosentyx_1_150mg_Pen, ref form);
                FillPdfCheckBox("today_5", refFormDermatology.ChkBox_Cosentyx_1_PFS_1, ref form);
                FillPdfCheckBox("enbrel6", refFormDermatology.ChkBox_Cosentyx_1_Load_Inject, ref form);
                FillPdfCheckBox("today_12", refFormDermatology.ChkBox_Cosentyx_1_300mg, ref form);
                FillPdfCheckBox("today_13", refFormDermatology.ChkBox_Cosentyx_1_150mg, ref form);
                FillPdfCheckBox("enbrel7", refFormDermatology.ChkBox_Cosentyx_1_Maintenance_Inject, ref form);
                FillPdfCheckBox("today_14", refFormDermatology.ChkBox_Cosentyx_1_300mg_1, ref form);
                FillPdfCheckBox("today_15", refFormDermatology.ChkBox_Cosentyx_1_150mg_1, ref form);
                FillPdfTextField("undefined", refFormDermatology.TxtBox_Cosentyx_1_Refills, ref form);
                FillPdfCheckBox("erivedge1", refFormDermatology.ChkBox_Enbrel_1, ref form);
                FillPdfCheckBox("enbrel4", refFormDermatology.ChkBox_Enbrel_1_50mg_Sureclick, ref form);
                FillPdfCheckBox("enbrel5", refFormDermatology.ChkBox_Enbrel_1_50mg_Prefilled_Syringe, ref form);
                FillPdfCheckBox("enbrel2", refFormDermatology.ChkBox_Enbrel_1_25mg_Prefilled_Syringe, ref form);
                FillPdfCheckBox("humira24", refFormDermatology.ChkBox_Enbrel_1_25mg_Vials, ref form);
                FillPdfCheckBox("enbrel8", refFormDermatology.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_TWICE_a_week_72_96_hours_apart, ref form);
                FillPdfCheckBox("enbrel9", refFormDermatology.ChkBox_Enbrel_1_Inject_50mg_subcutaneously_ONCE_a_week, ref form);
                FillPdfCheckBox("erivedge3", refFormDermatology.ChkBox_Enbrel_1_Inject_25mg_subcutaneously_TWICE_a_week_72_96_hours_apart, ref form);
                FillPdfCheckBox("humira24", refFormDermatology.ChkBox_Enbrel_1_Inject_2_25mg_50mg_on_same_day_TWICE_a_week_72_96_hours_apart, ref form);
                FillPdfTextField("undefined_3", refFormDermatology.Enbrel_REFILLS_TxtBox, ref form);
                FillPdfCheckBox("humira22", refFormDermatology.ChkBox_Erivedge, ref form);
                FillPdfCheckBox("otezla1", refFormDermatology.ChkBox_Humaira, ref form);
                FillPdfCheckBox("humira26", refFormDermatology.ChkBox_HumairaPsoriasisStarterKit, ref form);
                FillPdfCheckBox("otezla2", refFormDermatology.ChkBox_Humaira40mgPen, ref form);
                FillPdfCheckBox("otezla4", refFormDermatology.ChkBox_Humaira40mgPrefilledSyringe, ref form);
                FillPdfCheckBox("humira27", refFormDermatology.ChkBox_HumairaInject2_40mg, ref form);
                FillPdfCheckBox("hs_001", refFormDermatology.ChkBox_HumairaInjectInject40mgsubcutaneouslyEVERY, ref form);
                FillPdfCheckBox("hs_002", refFormDermatology.ChkBox_HumairaInjectInject40mgsubcutaneouslyONCE, ref form);
                FillPdfTextField("none", refFormDermatology.Humaira_REFILLS_TxtBox, ref form);
                FillPdfCheckBox("remicade1", refFormDermatology.ChkBox_HumairaHS, ref form);
                FillPdfCheckBox("otezla425489", refFormDermatology.ChkBox_HumairaHSPsoriasisStarterKit, ref form);
                FillPdfCheckBox("remicade2", refFormDermatology.ChkBox_HumairaHS40mgPen, ref form);
                FillPdfCheckBox("remicade_01010", refFormDermatology.ChkBox_HumairaHS40mgPrefilledSyringe, ref form);
                FillPdfCheckBox("otezla5", refFormDermatology.ChkBox_HumairaHSFour40mg, ref form);
                FillPdfCheckBox("today_8", refFormDermatology.ChkBox_HumairaHSTwo40mg, ref form);
                FillPdfCheckBox("today_7", refFormDermatology.ChkBox_HumairaHSWeek4plus, ref form);
                FillPdfTextField("none 1", refFormDermatology.HumairaHS_REFILLS_TxtBox, ref form);
                FillPdfCheckBox("stelara1", refFormDermatology.ChkBox_Odomzo, ref form);
                FillPdfTextField("undefined_2", refFormDermatology.Odomzo_REFILLS_TxtBox, ref form);
                FillPdfCheckBox("simponi1", refFormDermatology.ChkBox_Otezla, ref form);
                FillPdfCheckBox("simponi2", refFormDermatology.ChkBox_OtezlaStarterPack, ref form);
                FillPdfCheckBox("stelara4", refFormDermatology.ChkBox_Otezla30mgTablets, ref form);
                FillPdfCheckBox("remicade4", refFormDermatology.ChkBox_OtezlaTitrateTake1tablet, ref form);
                FillPdfTextField("remicade_field_1", DoFormatDate(refFormDermatology.OtezlaDate_TxtBox), ref form);
                FillPdfCheckBox("remicade_001", refFormDermatology.ChkBox_OtezlaMaintenanceTake1tablet, ref form);
                FillPdfCheckBox("simponi4", refFormDermatology.ChkBox_OtezlaBridgeRxTake, ref form);
                FillPdfTextField("none 2", refFormDermatology.Otezla_REFILLS_TxtBox, ref form);
                FillPdfCheckBox("stelara2", refFormDermatology.ChkBox_Remicade2, ref form);
                FillPdfTextField("4_today", refFormDermatology.Remicade2_Wt_TxtBox, ref form);
                FillPdfCheckBox("stelara2_stopit_01", refFormDermatology.ChkBox_Remicade100mgVial, ref form);
                FillPdfCheckBox("stelara3", refFormDermatology.ChkBox_Infuse1, ref form);
                FillPdfTextField("remicade_field_3", refFormDermatology.Infuse1_TxtBox, ref form);
                FillPdfCheckBox("stelara5", refFormDermatology.ChkBox_Infuse2, ref form);
                FillPdfTextField("remicade_field_4", refFormDermatology.Infuse2_TxtBox2, ref form);
                FillPdfTextField("3_today", refFormDermatology.Remicade2_Loadingdose_TxtBox, ref form);
                FillPdfTextField("1_today", refFormDermatology.Remicade2_REFILLS_TxtBox, ref form);
                FillPdfTextField("remicade_field_2", refFormDermatology.Remicade2_Weeks_TxtBox, ref form);
                FillPdfCheckBox("stelara2_stopit_0", refFormDermatology.ChkBox_Simponi2, ref form);
                FillPdfCheckBox("stelara2_stopit_02", refFormDermatology.ChkBox_Simponi250mgSmartJect, ref form);
                FillPdfCheckBox("stelara2_stopit_03", refFormDermatology.ChkBox_Simponi2PFS, ref form);
                FillPdfTextField("2_today", refFormDermatology.Simponi2_REFILLS_TxtBox, ref form);
                FillPdfCheckBox("today_1", refFormDermatology.ChkBox_Stelara2, ref form);
                FillPdfTextField("stelara_field_1", refFormDermatology.Stelara2_Wt_TxtBox, ref form);
                FillPdfCheckBox("taltz_2", refFormDermatology.ChkBox_Stelara245mg, ref form);
                FillPdfCheckBox("taltz_3", refFormDermatology.ChkBox_Stelara290mg, ref form);
                FillPdfCheckBox("stelara_001", refFormDermatology.ChkBox_StelaraInject245mgonday, ref form);
                FillPdfCheckBox("stelara_002", refFormDermatology.ChkBox_StelaraInject290mgonday, ref form);
                FillPdfTextField("1", refFormDermatology.Stelara2_REFILLS_TxtBox1, ref form);
                FillPdfTextField("1_stopit", refFormDermatology.Stelara2_REFILLS_TxtBox2, ref form);
                FillPdfCheckBox("taltz_4", refFormDermatology.ChkBox_TaltzTM, ref form);
                FillPdfCheckBox("today_2", refFormDermatology.ChkBox_TaltzTM80mg_mL, ref form);
                FillPdfCheckBox("today_3", refFormDermatology.ChkBox_TaltzTM80mg_mLPrefilled, ref form);
                FillPdfCheckBox("taltz_0", refFormDermatology.ChkBox_TaltzTM_LoadInject160mg, ref form);
                FillPdfCheckBox("taltz_1", refFormDermatology.ChkBox_TaltzTM_MaintenanceDose, ref form);
                FillPdfTextField("2", refFormDermatology.TaltzTM_TxtBox, ref form);
                FillPdfCheckBox("other_bot1", refFormDermatology.ChkBox_Others, ref form);
                FillPdfTextField("other_field_33", refFormDermatology.Others_TxtBox1, ref form);
                FillPdfTextField("other_field_34", refFormDermatology.Others_TxtBox2, ref form);
                FillPdfTextField("2_0o34", refFormDermatology.Others_Qty_TxtBox, ref form);
                FillPdfTextField("2_847", refFormDermatology.Others_Refills_TxtBox, ref form);
                FillPdfTextField("undefined_4", refFormDermatology.Erivedge_REFILLS_TxtBox, ref form);

                //FillPdfCheckBox(" ", refFormDermatology.ChkBox_nola_L20_9AtopicDermatitis, ref form);
                //FillPdfCheckBox(" ", refFormDermatology.ChkBox_nola_Dupixent, ref form);
                //FillPdfCheckBox(" ", refFormDermatology.ChkBox_nola_Dupixent_300mg1, ref form);
                //FillPdfCheckBox(" ", refFormDermatology.ChkBox_nola_Dupixent_300mg2, ref form);
                //FillPdfCheckBox(" ", refFormDermatology.ChkBox_nola_Dupixent_Load, ref form);
                //FillPdfCheckBox(" ", refFormDermatology.ChkBox_nola_Dupixent_Mantainance, ref form);
                //FillPdfTextField(" ", refFormDermatology.nola_Dupixent_Refills_TxtBox, ref form);
                //FillPdfTextField(" ", refFormDermatology.nola_Enbrel_wt_TxtBox, ref form);
                //FillPdfCheckBox(" ", refFormDermatology.ChkBox_nola_inject_0_8mg, ref form);
                //FillPdfTextField(" ", refFormDermatology.nola_inject_0_8mg_TxtBox, ref form);
                //FillPdfCheckBox(" ", refFormDermatology.IsSignatured, ref form);
                //FillPdfTextField(" ", refFormDermatology.Erivedge_TxtBox_Refills, ref form);







                ClosePdfReaderAndStamper(ref pdfReader, ref pdfStamper);

                //return Json(new { message = "Hello", success = true });
                //}

                return Json(new { message = filePath, success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method FillPdfDermatology PatientsController. " + exception.Message, exception);
                return Json(new { message = "Failed Sending Email", success = false });
            }
        }

        #endregion

        public JsonResult NotNeededChecklist(bool IsNotNeeded, int ReferralFormChecklistRelationshipId, int PhysicianPortalPatientId)
        {
            try
            {
                var physicianPortalPatientChecklistRelationship = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository
                        .GetSingle(t => t.ReferralFormChecklistRelationshipId == ReferralFormChecklistRelationshipId && t.PhysicianPortalPatientId == PhysicianPortalPatientId && !(t.IsDeleted ?? false));
                bool IsEdit = true;

                if (physicianPortalPatientChecklistRelationship == null)
                {
                    physicianPortalPatientChecklistRelationship = new PhysicianPortalPatientChecklistRelationship();
                    IsEdit = false;
                }
                physicianPortalPatientChecklistRelationship.IsNotNeeded = IsNotNeeded;
                physicianPortalPatientChecklistRelationship.ModifiedOn = DateTime.UtcNow;
                physicianPortalPatientChecklistRelationship.ModifiedBy = CurrentUser.UserId;

                if (IsEdit)
                {
                    _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Update(physicianPortalPatientChecklistRelationship);
                }
                else
                {
                    physicianPortalPatientChecklistRelationship.PhysicianPortalPatientId = PhysicianPortalPatientId;
                    physicianPortalPatientChecklistRelationship.ReferralFormChecklistRelationshipId = ReferralFormChecklistRelationshipId;
                    physicianPortalPatientChecklistRelationship.CreatedOn = DateTime.UtcNow;
                    physicianPortalPatientChecklistRelationship.CreatedBy = CurrentUser.UserId;
                    _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Insert(physicianPortalPatientChecklistRelationship);
                }
                _unitOfWork.Save();
                return Json(new { message = "Checklist Status Changed Successfully", success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method NotNeededChecklist PatientsController. " + exception.Message, exception);
                return Json(new { message = "Getting error in NotNeededChecklist PatientsController.", success = false });
            }
        }


        public void createNewPDF()
        {

        }


        [HttpPost]
        public JsonResult ConvertHTMLToPDF(PDFPrintModel model)
        {
            try
            {
                string pdfFileName = ConvertHTMLToPDFFile(model);
                return Json(new { message = pdfFileName, success = true }, JsonRequestBehavior.AllowGet);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method ConvertHTMLToPDF PatientsController. " + exception.Message, exception);
                return Json(new { message = "Getting error in NotNeededChecklist PatientsController.", success = false });
            }
        }
        private string ConvertHTMLToPDFFile(PDFPrintModel model)
        {
            try
            {
                if (model.ReferralFormId == null)
                {
                    //ReferralFormValue
                    var referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals(model.ReferralFormName));
                    if (referralForm != null)
                    {
                        model.ReferralFormId = referralForm.ReferralFormId;
                    }
                }


                StringBuilder htmlString = new StringBuilder();

                htmlString.Append("<html><head><meta charset=\"utf-8\" /><title></title>");

                htmlString.Append("<link href=\"" + Server.MapPath("~/Content/bootstrap.css") + "\" rel=\"stylesheet\" media = \"all\" />");
                htmlString.Append("<link href=\"" + Server.MapPath("~/Content/Site.css") + "\" rel=\"stylesheet\" media = \"all\" />");
                htmlString.Append("<link href=\"" + Server.MapPath("~/Content/pdfForms.css") + "\" rel=\"stylesheet\" media = \"all\" />");
                htmlString.Append("<link href=\"" + Server.MapPath("~/Content/user-customization.css") + "\" rel=\"stylesheet\" media = \"all\" />");
                htmlString.Append("<link href=\"" + Server.MapPath("~/Content/kendo/2017.1.118/kendo.bootstrap.min.css") + "\" rel=\"stylesheet\" media = \"all\" />");
                htmlString.Append("<link href=\"" + Server.MapPath("~/Content/kendo/2017.1.118/kendo.common.min.css") + "\" rel=\"stylesheet\" media = \"all\" />");
                htmlString.Append("<link href=\"" + Server.MapPath("~/Content/PrintForm.css") + "\" rel=\"stylesheet\" media = \"all\" />");

                htmlString.Append("</head><body>");
                htmlString.Append(model.HTML);
                htmlString.Append("</body></html>");

                var finalHTML = htmlString.ToString();

                var doc1 = new HtmlDocument();
                doc1.LoadHtml(finalHTML);

                var buttonDivs = doc1.DocumentNode.Descendants("div").Where(d => d.Attributes.Contains("class") && d.Attributes["class"].Value.Contains("buttonsDiv")).ToList();

                if (buttonDivs != null)
                {
                    foreach (HtmlNode div in buttonDivs)
                    {
                        div.Remove();
                    }
                }

                var images = doc1.DocumentNode.Descendants("img").Where(d => d.Attributes.Contains("class") && d.Attributes["class"].Value.Contains("kroger-logo-class")).ToList();

                if (images != null)
                {
                    foreach (HtmlNode img in images)
                    {
                        img.SetAttributeValue("src", Server.MapPath("~/Content/images/KrogerLogo.png"));
                    }
                }

                var logoContainer = doc1.DocumentNode.Descendants("div").Where(d => d.Attributes.Contains("class") && d.Attributes["class"].Value.Contains("kroger-logo-container")).First();
                logoContainer.AddClass("visible-xs");

                var logoContainerXS = doc1.DocumentNode.Descendants("div").Where(d => d.Attributes.Contains("class") && d.Attributes["class"].Value.Contains("kroger-logo-container-xs")).First();
                logoContainerXS.Remove();


                var shipToOtherField = doc1.GetElementbyId("TxtBox_ShipToOther");
                if (shipToOtherField != null)
                {
                    string value1 = shipToOtherField.Attributes.Contains("value") ? shipToOtherField.Attributes["value"].Value : "";
                    string classes1 = shipToOtherField.Attributes.Contains("class") ? shipToOtherField.Attributes["class"].Value : "";
                    HtmlNode lbl1 = doc1.CreateElement("label");
                    lbl1.SetAttributeValue("class", classes1);
                    lbl1.AddClass("print-form-shiptoother-field");
                    lbl1.InnerHtml = value1;
                    shipToOtherField.ParentNode.ReplaceChild(lbl1, shipToOtherField);
                }


                var dateFields = doc1.DocumentNode.Descendants("span").Where(d => d.Attributes.Contains("class") && d.Attributes["class"].Value.Contains("k-datepicker")).ToList();

                foreach (var textField in dateFields)
                {
                    HtmlNode dateValueField = textField.Descendants("input").Single();

                    //dateValueField = textField.Descendants().ToList().Select(x => x.Name).Contains("input") ? textField.Descendants("input").Single() : (textField.Descendants().ToList().Select(x => x.Name).Contains("label") ? textField.Descendants("label").Single() : null);

                    if (dateValueField != null)
                    {
                        string value = dateValueField.Attributes.Contains("value") ? dateValueField.Attributes["value"].Value : "";
                        //string classes = dateValueField.Attributes.Contains("class") ? dateValueField.Attributes["class"].Value : "";
                        //string styles = dateValueField.Attributes.Contains("style") ? dateValueField.Attributes["style"].Value : "";

                        HtmlNode lbl = doc1.CreateElement("label");
                        //lbl.SetAttributeValue("class", classes);
                        //lbl.SetAttributeValue("style", styles);
                        lbl.AddClass("print-form-field");
                        lbl.AddClass("print-form-date");
                        lbl.RemoveClass("dateclass");
                        lbl.InnerHtml = value;

                        textField.ParentNode.ReplaceChild(lbl, textField);
                    }
                }


                var patientPrescriberNode = doc1.DocumentNode.Descendants("div").Where(x => x.Attributes.Contains("class") ? x.Attributes["class"].Value.Contains("patient-prescriber") : false).ToList().First();
                var patientPrescriberFields = patientPrescriberNode.Descendants("input").Where(x => x.Attributes["type"].Value == "text").ToList();

                foreach (var textField in patientPrescriberFields)
                {
                    string value = textField.Attributes.Contains("value") ? textField.Attributes["value"].Value : "";
                    string classes = textField.Attributes.Contains("class") ? textField.Attributes["class"].Value : "";

                    HtmlNode lbl = doc1.CreateElement("label");
                    lbl.SetAttributeValue("class", classes);
                    lbl.AddClass("print-form-field");
                    lbl.AddClass("print-form-fullwidth");
                    lbl.InnerHtml = value;

                    textField.ParentNode.ReplaceChild(lbl, textField);
                }

                var clinicalInfoNode = doc1.GetElementbyId("ClinicalInfoContainer");
                var clinicalTextFields = clinicalInfoNode.Descendants("input").Where(x => x.Attributes["type"].Value == "text").ToList();

                foreach (var textField in clinicalTextFields)
                {
                    string value = textField.Attributes.Contains("value") ? textField.Attributes["value"].Value : "";
                    string classes = textField.Attributes.Contains("class") ? textField.Attributes["class"].Value : "";
                    string styles = textField.Attributes.Contains("style") ? textField.Attributes["style"].Value : "";

                    HtmlNode lbl = doc1.CreateElement("label");
                    lbl.SetAttributeValue("class", classes);
                    lbl.SetAttributeValue("style", styles);
                    lbl.AddClass("print-form-field");
                    lbl.InnerHtml = value;

                    textField.ParentNode.ReplaceChild(lbl, textField);
                }

                var prescriptionInfoNode = doc1.GetElementbyId("PrescriptionInfoContainer");
                var prescriptionsTextFields = prescriptionInfoNode.Descendants("input").Where(x => x.Attributes["type"].Value == "text").ToList();

                foreach (var textField in prescriptionsTextFields)
                {
                    string value = textField.Attributes.Contains("value") ? textField.Attributes["value"].Value : "";
                    string classes = textField.Attributes.Contains("class") ? textField.Attributes["class"].Value : "";
                    string styles = textField.Attributes.Contains("style") ? textField.Attributes["style"].Value : "";

                    HtmlNode lbl = doc1.CreateElement("label");
                    lbl.SetAttributeValue("class", classes);
                    lbl.SetAttributeValue("style", styles);
                    lbl.AddClass("print-form-field-prescription");
                    lbl.InnerHtml = value;

                    textField.ParentNode.ReplaceChild(lbl, textField);
                }


                var ths = doc1.DocumentNode.Descendants("thead").ToList();

                if (ths != null)
                {
                    foreach (var th in ths)
                    {
                        th.ParentNode.RemoveChild(th, true);
                    }
                }

                finalHTML = doc1.DocumentNode.OuterHtml;




                var document = new HtmlToPdfDocument
                {
                    GlobalSettings =
                    {
                        ProduceOutline = true,
                        DocumentTitle = "Test Pdf",
                        PaperSize = PaperKind.Letter, // Implicit conversion to PechkinPaperSize
                        Margins =
                        {
                            All = 10,
                            Unit = Unit.Millimeters
                        }
                    },
                    Objects = {
                        new ObjectSettings { HtmlText = finalHTML },
                        //new ObjectSettings { PageUrl = "www.google.com" },
                        //new ObjectSettings { PageUrl = "www.microsoft.com" },
                        //new ObjectSettings { PageUrl = "www.github.com" }
                    }
                };





                //   var documentConfig = new ObjectSettings
                //   {
                //       WebSettings = new WebSettings
                //       {
                //           EnableJavascript = true,
                //           PrintBackground = true,
                //           PrintMediaType = true
                //       },
                //       LoadSettings = new LoadSettings
                //       {
                //           BlockLocalFileAccess = false,
                //           RenderDelay = 15000,
                //       },

                //       HtmlText = finalHTML
                //   };

                //   var globalConfig = new GlobalSettings();
                //   globalConfig.Margins = new MarginSettings(2.645833333333, 1.322916666667, 2.645833333333, 1.322916666667);
                //   globalConfig.Margins.Unit = Unit.Centimeters;
                //   globalConfig.DocumentTitle = "Test Document";
                //   globalConfig.PaperSize = PaperKind.A4;
                //   globalConfig.UseCompression = false;
                //   globalConfig.DPI = 1200;


                //   var doc = new HtmlToPdfDocument
                //   {
                //       Objects = {
                //    documentConfig
                //},
                //       GlobalSettings = globalConfig
                //   };

                var buffer = PDFHelper.SharedInstance.Convert(document);




                //GlobalConfig gc = new GlobalConfig();

                //gc.SetMargins(new Margins(10, 10, 10, 10))
                //  .SetDocumentTitle("Test document")
                //  .SetPaperSize(PaperKind.Letter);

                //IPechkin pechkin = new SynchronizedPechkin(gc);

                //ObjectConfig oc = new ObjectConfig();

                //oc.SetCreateExternalLinks(true)
                //  .SetFallbackEncoding(Encoding.ASCII)
                //  .SetLoadImages(true)
                //  .SetScreenMediaType(true)
                //  .SetPrintBackground(true)
                //  .SetAllowLocalContent(true);
                //byte[] pdfBuf = pdfConverter.Convert(document);


                string fileName = "PhPt_NewPat_" + model.PhysicianPortalPatientId.ToString() + "_FId_" + model.ReferralFormId.ToString();
                string pdfFileName = GetPDFFileName(new PDFFormModel { FileName = fileName, PatientApplicantID = 0 });
                var filePath = Path.Combine(SettingManager.GetSettingByName("FilledPDFDocumentsPath").Value, pdfFileName);

                if (System.IO.File.Exists(filePath))
                {
                    System.IO.File.Delete(filePath);
                }
                System.IO.File.WriteAllBytes(filePath, buffer);

                var getPatientFullName = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == model.PhysicianPortalPatientId);

                if (model.SaveReferralForm)
                    AuditLogger.AuditTracker("New Referral Form Document Uploaded.", "A new referral form named " + pdfFileName + " has been uploaded for patient " + getPatientFullName?.FirstName + " " + getPatientFullName?.LastName, (int)AuditOperationType.Addition);

                return pdfFileName;
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method ConvertHTMLToPDFFile(PDFPrintModel model) PatientsController. " + exception.Message, exception);
                return "";
            }
        }

        public JsonResult AddDeletePatientQueue(string PhysicianId, string PatientId)
        {
            try
            {
                int patientId = PatientId != null ? int.Parse(SecurityHelper.Decrypt(PatientId)) : 0;
                int physicianId = PhysicianId != null ? int.Parse(SecurityHelper.Decrypt(PhysicianId)) : 0;


                PatientQueue patientQueue = _unitOfWork.PatientQueuesRepository.GetSingle(t => t.PatientId == patientId && t.PhysicianId == physicianId);
                string message = "";
                if (patientQueue == null)
                {
                    patientQueue = new PatientQueue();
                    patientQueue.PatientId = patientId;
                    patientQueue.PhysicianId = physicianId;
                    patientQueue.CreatedOn = DateTime.UtcNow;
                    patientQueue.CreatedBy = CurrentUser.UserId;
                    patientQueue.ModifiedOn = DateTime.UtcNow;
                    patientQueue.ModifiedBy = CurrentUser.UserId;

                    _unitOfWork.PatientQueuesRepository.Insert(patientQueue);
                    message = "Patient Queued Successfully";
                }
                else
                {
                    _unitOfWork.PatientQueuesRepository.Delete(patientQueue);
                    message = "Patient Unqueued Successfully";
                }
                _unitOfWork.Save();
                return Json(new { message = message, success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method AddDeletePatientQueue PatientsController. " + exception.Message, exception);
                return Json(new { message = "Failed to add or delete patient from  PatientQueue table.", success = false });
            }
        }

        //Push data to cprtest
        //Add data into [ORTF].[dbo].[sp_parameters_data]
        public JsonResult PushPatientToCPRTest(int PhysicianPortalPatientId)
        {
            try
            {
                string message = "";
                var physicianPortalPatient = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == PhysicianPortalPatientId);

                if (physicianPortalPatient != null)
                {
                    //ORTF database
                    ORTFEntities db = new ORTFEntities();
                    sp_parameters_data _sp_parameters_data = new sp_parameters_data();

                    //Patient basic information
                    _sp_parameters_data.PatientEmail = physicianPortalPatient.Email;
                    _sp_parameters_data.PatientFirstName = physicianPortalPatient.FirstName;
                    _sp_parameters_data.PatientLastName = physicianPortalPatient.LastName;
                    _sp_parameters_data.PatientPhoneNumber = physicianPortalPatient.PhoneNumber;
                    _sp_parameters_data.PatientDOB = physicianPortalPatient.DateOfBirth.ToString();
                    _sp_parameters_data.PatientGender = physicianPortalPatient.Gender;
                    _sp_parameters_data.PatientLanguage = physicianPortalPatient.PreferredLanguage;
                    _sp_parameters_data.PatientAddressLine1 = physicianPortalPatient.AddressLine1;
                    _sp_parameters_data.PatientCity = physicianPortalPatient.City;
                    _sp_parameters_data.PatientState = physicianPortalPatient.StateProvince;
                    _sp_parameters_data.PatientPostalCode = physicianPortalPatient.PostalCode;
                    //_sp_parameters_data.PatientCity = physicianPortalPatient.City;

                    ////Physician information
                    //var physician = _unitOfWork.PhysiciansRepository.GetSingle(t => t.PhysicianId == physicianPortalPatient.PhysicianId);
                    //if (physician != null)
                    //{
                    //    _sp_parameters_data.PatientFirstName = physician.FirstName;
                    //    _sp_parameters_data.PatientLastName = physician.LastName;
                    //}

                    //dbSet.Attach(entityToUpdate);
                    //context.Entry(entityToUpdate).State = EntityState.Modified;
                    //db.Entry(_sp_parameters_data).State = System.Data.Entity.EntityState.Modified;


                    //Add sp_parameters_data object into sp_parameters_data DBset
                    db.Entry(_sp_parameters_data).State = System.Data.Entity.EntityState.Added;
                    //db.sp_parameters_data.Add(_sp_parameters_data);

                    db.SaveChanges();
                }
                return Json(new { message = message, success = true });
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method PushPatientToCPRTest PatientsController. " + exception.Message, exception);
                return Json(new { message = "Failed to push data to cprtest", success = false });
            }
        }

        public JsonResult SubmitReferralForm(SubmitFormModel model)
        {
            try
            {
                //ReferralForm referralForm;
                if (model.ReferralFormId == null)
                {
                    //ReferralFormValue
                    ReferralForm referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals(model.ReferralFormName));
                    if (referralForm != null)
                    {
                        model.ReferralFormId = referralForm.ReferralFormId;
                    }
                }
                //else
                //{
                //    referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormId == ReferralFormId);
                //}

                if (model.SelectedChecklist != "" && model.SelectedChecklist != null)
                {
                    var ReferralFormChecklistRelationshipIdList = model.SelectedChecklist.Split(',').Select(t => Convert.ToInt32(t)).ToList();

                    var physicianPortalPatientChecklistRelationshipList = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository
                            .GetAsQuerable(t =>
                                t.PhysicianPortalPatientId == model.PhysicianPortalPatientId
                                && t.ReferralFormChecklistRelationshipId != null
                                && t.ReferralFormChecklistRelationship.ReferralFormId == model.ReferralFormId
                                && !(t.IsDeleted ?? false)
                                && ReferralFormChecklistRelationshipIdList.Contains(t.ReferralFormChecklistRelationshipId ?? 0)
                            );

                    //var submitChecklistDocumentPtah = SettingManager.GetSettingByName("SubmitChecklistDocumentPath");
                    foreach (var physicianPortalPatientChecklistRelationship in physicianPortalPatientChecklistRelationshipList)
                    {
                        string filePath = physicianPortalPatientChecklistRelationship.FilePath;
                        //string filePathDestination = submitChecklistDocumentPtah?.Value + physicianPortalPatientChecklistRelationship.FileName;
                        string filePathDestination = GetDocumentPathWithPhysicianPortalPatientId(model.PhysicianPortalPatientId) + physicianPortalPatientChecklistRelationship.FileName;

                        if (!System.IO.File.Exists(filePathDestination))
                        {
                            //System.IO.File.Delete(filePathDestination);
                            System.IO.File.Copy(filePath, filePathDestination);

                            //physicianPortalPatientChecklistRelationship.FilePath = filePathDestination;
                            physicianPortalPatientChecklistRelationship.IsSubmited = true;
                            physicianPortalPatientChecklistRelationship.ModifiedOn = DateTime.UtcNow;
                            physicianPortalPatientChecklistRelationship.ModifiedBy = CurrentUser.UserId;

                            _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Update(physicianPortalPatientChecklistRelationship);
                        }
                    }

                    //////////////////////
                    

                    string fileName = "PhPt_NewPat_" + model.PhysicianPortalPatientId.ToString() + "_FId_" + model.ReferralFormId.ToString(); // old

                    PDFPrintModel pdfModel = new PDFPrintModel
                    {
                        HTML = model.FormHTML,
                        PhysicianPortalPatientId = model.PhysicianPortalPatientId,
                        ReferralFormId = model.ReferralFormId,
                        ReferralFormName = model.ReferralFormName,
                        SaveReferralForm = true
                    };

                    string refferalFormPdf = ConvertHTMLToPDFFile(pdfModel);
                    var filePath1 = Path.Combine(SettingManager.GetSettingByName("FilledPDFDocumentsPath").Value, refferalFormPdf);

                    string filePathDestination1 = GetDocumentPathWithPhysicianPortalPatientId(model.PhysicianPortalPatientId) + refferalFormPdf;


                    if (System.IO.File.Exists(filePath1))
                    {
                        if (System.IO.File.Exists(filePathDestination1))
                        {
                            System.IO.File.Delete(filePathDestination1);
                        }
                        System.IO.File.Copy(filePath1, filePathDestination1);
                    }


                    _unitOfWork.Save();
                    var getPatientFullName = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == model.PhysicianPortalPatientId);
                    AuditLogger.AuditTracker("New Referral Form Document Submitted.", "A new document name " + fileName + " has been submitted for patient " + getPatientFullName?.FirstName + " " + getPatientFullName?.LastName, (int)AuditOperationType.Addition);
                    return Json(new { message = "Submit All Documents Successfully", success = true });


                }
                else
                {
                    string fileName = "PhPt_NewPat_" + model.PhysicianPortalPatientId.ToString() + "_FId_" + model.ReferralFormId.ToString(); // old

                    PDFPrintModel pdfModel = new PDFPrintModel
                    {
                        HTML = model.FormHTML,
                        PhysicianPortalPatientId = model.PhysicianPortalPatientId,
                        ReferralFormId = model.ReferralFormId,
                        ReferralFormName = model.ReferralFormName,
                        SaveReferralForm = true
                    };

                    string refferalFormPdf = ConvertHTMLToPDFFile(pdfModel);
                    var filePath1 = Path.Combine(SettingManager.GetSettingByName("FilledPDFDocumentsPath").Value, refferalFormPdf);

                    string filePathDestination1 = GetDocumentPathWithPhysicianPortalPatientId(model.PhysicianPortalPatientId) + refferalFormPdf;


                    if (System.IO.File.Exists(filePath1))
                    {
                        if (System.IO.File.Exists(filePathDestination1))
                        {
                            System.IO.File.Delete(filePathDestination1);
                        }
                        System.IO.File.Copy(filePath1, filePathDestination1);
                    }

                    _unitOfWork.Save();
                    var getPatientFullName = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == model.PhysicianPortalPatientId);
                    AuditLogger.AuditTracker("New Referral Form Document Submitted.", "A new document name " + fileName + " has been submitted for patient " + getPatientFullName?.FirstName + " " + getPatientFullName?.LastName, (int)AuditOperationType.Addition);
                    return Json(new { message = "Submit All Documents Successfully", success = true });
                }

            }

            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method SubmitReferralForm PatientsController. " + exception.Message, exception);
                return Json(new { message = "Submit All Documents Unsuccessfully", success = false });
            }
        }


        public JsonResult ReSubmitReferralForm(string documentIdEncrypted, string physicianPortalPatientIdEncrypted)
        {
            try
            {
                int relationshipId = int.Parse(SecurityHelper.Decrypt(documentIdEncrypted));
                int physicianPortalPatientId = int.Parse(SecurityHelper.Decrypt(physicianPortalPatientIdEncrypted));

                PhysicianPortalPatientChecklistRelationship physicianPortalPatientChecklistRelationshipList = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository
                 .GetSingle(t => t.PhysicianPortalPatientChecklistRelationshipId == relationshipId);

                if (physicianPortalPatientChecklistRelationshipList == null)
                {
                    Logger.InsertLog("Exception thrown in Method ReSubmitReferralForm PatientsContoller.", "Unable to find PhysicianPortalPatientChecklistRelationshipId =" + relationshipId);
                    return Json(new { message = "failed to get PhysicianPortalPatientChecklistRelationshipId", success = false });

                }
                else
                {
                    // physicianPortalPatientChecklistRelationshipList.ReferralFormChecklistRelationshipId
                    string filePath = physicianPortalPatientChecklistRelationshipList.FilePath;
                    string filePathDestination = GetDocumentPathWithPhysicianPortalPatientId(physicianPortalPatientId) + physicianPortalPatientChecklistRelationshipList.FileName;

                    if (!System.IO.File.Exists(filePathDestination))
                    {
                        System.IO.File.Copy(filePath, filePathDestination);
                        physicianPortalPatientChecklistRelationshipList.IsSubmited = true;
                        physicianPortalPatientChecklistRelationshipList.ModifiedOn = DateTime.UtcNow;
                        physicianPortalPatientChecklistRelationshipList.ModifiedBy = CurrentUser.UserId;
                        _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository.Update(physicianPortalPatientChecklistRelationshipList);
                    }
                }

                //////////////////////
                ReferralFormChecklistRelationship rFcRelationship = _unitOfWork.ReferralFormChecklistRelationshipRepository.GetSingle(t => t.ReferralFormChecklistRelationshipId == physicianPortalPatientChecklistRelationshipList.ReferralFormChecklistRelationshipId);

                if (rFcRelationship == null)
                {
                    return Json(new { message = "failed to get ReferralFormId", success = false });
                }
                else
                {

                    string fileName = "PhPt_NewPat_" + physicianPortalPatientId.ToString() + "_FId_" + rFcRelationship.ReferralFormId.ToString();

                    //fileName = GetDocumentSaveFormat(PhysicianPortalPatientId.ToString() + "_FId_" + rFcRelationship.ReferralFormId.ToString(), (int)DocumentAddedType.SubmitReferralForm);

                    string pdfFileName = GetPDFFileName(new PDFFormModel { FileName = fileName, PatientApplicantID = 0 });
                    var filePath2 = Path.Combine(SettingManager.GetSettingByName("FilledPDFDocumentsPath").Value, pdfFileName);
                    //string filePathDestination1 = submitChecklistDocumentPtah?.Value + pdfFileName;
                    string filePathDestination1 = GetDocumentPathWithPhysicianPortalPatientId(physicianPortalPatientId) + pdfFileName;




                    if (System.IO.File.Exists(filePath2))
                        if (!System.IO.File.Exists(filePathDestination1))
                            System.IO.File.Copy(filePath2, filePathDestination1);

                    _unitOfWork.Save();
                    var getPatientFullName = _unitOfWork.PhysicianPortalPatientRepository.GetSingle(t => t.PhysicianPortalPatientId == physicianPortalPatientId);
                    AuditLogger.AuditTracker("ReferralForm Document Re-Submitted.", "A new document name " + fileName + " has been uploaded for patient " + getPatientFullName?.FirstName + " " + getPatientFullName?.LastName, (int)AuditOperationType.Addition);
                    return Json(new { message = "Submit All Documents Successfully", success = true });
                }


            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method ReSubmitReferralForm PatientsController. " + exception.Message, exception);
                return Json(new { message = "Submit All Documents Unsuccessfully", success = false });
            }
        }


        public ActionResult PreviewChecklistDocuments(string PhysicianPortalPatientId, string ReferralFormName, int? ReferralFormId = null)
        {
            try
            {
                ReferralForm referralForm;

                //Sometimes the + symbol is not encoded and appears as a ' ' in the string, we need to replace it back to +
                PhysicianPortalPatientId = PhysicianPortalPatientId.Replace(" ", "+");
                int patientid = PhysicianPortalPatientId != null ? int.Parse(SecurityHelper.Decrypt(PhysicianPortalPatientId)) : 0;

                if (ReferralFormId == null)
                {
                    //ReferralFormValue
                    referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormName.Equals(ReferralFormName));
                    if (referralForm != null)
                    {
                        ReferralFormId = referralForm.ReferralFormId;
                    }
                }
                else
                {
                    referralForm = _unitOfWork.ReferralFormsRepository.GetSingle(t => t.ReferralFormId == ReferralFormId);
                }
                PreviewChecklistDocumentsViewModel previewChecklistDocumentsViewModel = new PreviewChecklistDocumentsViewModel();
                previewChecklistDocumentsViewModel.ReferralFormName = referralForm.ReferralFormName;
                var spPatientChecklist_Result = _unitOfWork.spPatientChecklist_ResultRepository.context.spPatientChecklist(patientid, ReferralFormId)
                    .ToList();

                List<spPatientChecklist_ResultViewModel> _spPatientChecklist_ResultViewModel = new List<spPatientChecklist_ResultViewModel>();

                foreach (var item in spPatientChecklist_Result)
                {
                    //_spPatientChecklist_ResultViewModel
                    var physicianPortalPatientChecklistRelationship = _unitOfWork.PhysicianPortalPatientChecklistRelationshipRepository
                       .GetSingle(t => t.ReferralFormChecklistRelationshipId == item.ReferralFormChecklistRelationshipId && t.PhysicianPortalPatientId == item.PhysicianPortalPatientId && !(t.IsDeleted ?? false));

                    _spPatientChecklist_ResultViewModel.Add(
                        new spPatientChecklist_ResultViewModel
                        {
                            ChecklistName = item.ChecklistName,
                            Isuploaded = item.Isuploaded,
                            PhysicianPortalPatientId = item.PhysicianPortalPatientId,
                            ReferralFormChecklistRelationshipId = item.ReferralFormChecklistRelationshipId,
                            FileName = physicianPortalPatientChecklistRelationship?.FileName,
                            FileExtension = physicianPortalPatientChecklistRelationship?.FileExtension,
                        });
                }
                previewChecklistDocumentsViewModel.spPatientChecklist_ResultList = _spPatientChecklist_ResultViewModel;
                return View(previewChecklistDocumentsViewModel);
            }
            catch (Exception exception)
            {
                Logger.InsertLog("Exception thrown in Method PreviewChecklistDocuments() PatientsController. " + exception.Message, exception);
                return View("Error", new ErrorModel(exception, "PatientsController", "PreviewChecklistDocuments", ErrorTitle, ErrorMessage, null));
            }
        }

    }

    public class PDFFormModel
    {
        public string FileName { get; set; }
        public int PatientApplicantID { get; set; }
    }

    public class PDFPrintModel
    {
        [AllowHtml]
        public string HTML { get; set; }
        public int PhysicianPortalPatientId { get; set; }
        public string ReferralFormName { get; set; }
        public int? ReferralFormId { get; set; }
        public bool SaveReferralForm { get; set; }
    }


    public class SubmitFormModel
    {
        [AllowHtml]
        public string FormHTML { get; set; }
        public string ReferralFormName { get; set; }
        public int? ReferralFormId { get; set; }
        public int PhysicianPortalPatientId { get; set; }
        public string SelectedChecklist { get; set; }
    }
}